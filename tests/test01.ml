open Arytmetyka;;
let ( =. ) (x : float) (y : float) =
let e = 1e-6 and d = x -. y in ~-.e < d && d < e;;
let a = in_wartosc ( minus ( wartosc_od_do (-2.400000) (5.200000) ) ( wartosc_dokladna (0.000000) ) ) (-6.200000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-5.600000) (3.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (4.200000) (6.600000) ) ( wartosc_od_do (0.000000) (8.400000) ) ) (-0.800000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.600000) (9.000000) ) ( wartosc_od_do (-7.400000) (-7.400000) ) ) ;;
assert (a =. -1.05756756756756731);;
let a = in_wartosc ( razy ( wartosc_dokladna (-5.200000) ) ( wartosc_dokladnosc (-3.600000) (2.200000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (1.600000) ) ( wartosc_dokladnosc (-8.200000) (0.200000) ) ) ;;
assert (a =. 9.78359999999999808);;
let a = min_wartosc ( minus ( wartosc_od_do (5.200000) (9.400000) ) ( wartosc_dokladna (0.800000) ) ) ;;
assert (a =. 4.4);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (3.400000) ) ( wartosc_dokladnosc (-5.800000) (9.800000) ) ) ;;
assert (a =. -0.591891421766368331);;
let a = in_wartosc ( podzielic ( podzielic ( razy ( wartosc_od_do (-5.400000) (5.400000) ) ( wartosc_dokladnosc (-6.000000) (7.600000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) (0.200000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-3.600000) (8.400000) ) ( wartosc_dokladna (6.600000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (0.800000) ) ( wartosc_od_do (-7.400000) (2.000000) ) ) ;;
assert (a =. -2.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-0.600000) (7.400000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_od_do (-4.200000) (0.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.800000) ) ) (-9.600000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-6.000000) (3.200000) ) ) ;;
assert (a =. 0.192000000000000171);;
let a = min_wartosc ( minus ( wartosc_od_do (-5.200000) (0.000000) ) ( wartosc_dokladnosc (7.600000) (7.200000) ) ) ;;
assert (a =. -13.3472);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.800000) (3.000000) ) ( wartosc_dokladnosc (8.200000) (6.800000) ) ) ;;
assert (a =. 0.343749497677259597);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.800000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (5.800000) (3.400000) ) ( wartosc_dokladnosc (2.000000) (3.200000) ) ) ;;
assert (a =. 11.6126207999999984);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (-7.400000) (9.000000) ) ( wartosc_od_do (-5.000000) (-3.200000) ) ) ( wartosc_dokladnosc (-7.200000) (8.000000) ) ) ;;
assert (a =. 12.1);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (4.200000) (0.000000) ) ( wartosc_dokladna (1.800000) ) ) ;;
assert (a =. 7.5600000000000005);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (9.200000) ) ( wartosc_dokladnosc (1.800000) (1.000000) ) ) ( podzielic ( podzielic ( minus ( wartosc_dokladna (6.200000) ) ( wartosc_od_do (-6.400000) (3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (2.600000) (6.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_od_do (-1.200000) (0.000000) ) ( wartosc_od_do (-5.200000) (3.400000) ) ) ;;
assert (a =. 6.24);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.800000) (-0.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (2.400000) (6.200000) ) ) ;;
assert (a =. -4.3);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.400000) (0.000000) ) ( wartosc_dokladna (5.400000) ) ) (-6.600000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.200000) ) ( minus ( podzielic ( podzielic ( wartosc_dokladna (-9.400000) ) ( wartosc_dokladnosc (4.400000) (1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (7.600000) (9.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_od_do (3.400000) (9.000000) ) ( wartosc_od_do (-4.800000) (-3.200000) ) ) ;;
assert (a =. -10.88);;
let a = sr_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.600000) (-6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (8.000000) (9.600000) ) ( wartosc_dokladnosc (0.000000) (0.800000) ) ) ( plus ( wartosc_od_do (-1.600000) (7.800000) ) ( wartosc_dokladnosc (-10.000000) (9.200000) ) ) ) ( plus ( wartosc_dokladna (3.800000) ) ( wartosc_od_do (2.400000) (7.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (5.400000) (9.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 7.60000000000000053);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.400000) (9.400000) ) ( wartosc_dokladnosc (-0.200000) (0.000000) ) ) (-1.800000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.200000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_od_do (-7.600000) (7.400000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (5.800000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (9.600000) ) ( minus ( wartosc_dokladnosc (-0.400000) (0.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (3.400000) ) ) ) ) ( razy ( wartosc_dokladna (-0.600000) ) ( wartosc_dokladna (-4.200000) ) ) ) ;;
assert (a =. -9.52380952380952372);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( minus ( wartosc_dokladna (-4.600000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( plus ( wartosc_dokladnosc (3.000000) (8.400000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (8.600000) ) ( wartosc_od_do (-6.200000) (-2.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (8.000000) (7.800000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_od_do (-4.400000) (6.000000) ) ) (2.200000);;
assert (a = true);;
let a = min_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladna (0.400000) ) ( razy ( wartosc_dokladnosc (0.000000) (8.200000) ) ( wartosc_dokladna (9.200000) ) ) ) ( minus ( wartosc_od_do (-7.000000) (6.800000) ) ( plus ( wartosc_dokladnosc (0.000000) (3.800000) ) ( wartosc_od_do (-6.200000) (-5.000000) ) ) ) ) ( wartosc_od_do (-3.800000) (-2.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (9.400000) (3.600000) ) ( podzielic ( minus ( wartosc_od_do (-8.000000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.600000) ) ) ) ( wartosc_od_do (-8.800000) (0.800000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (-0.800000) (0.000000) ) ( razy ( wartosc_dokladna (-1.600000) ) ( wartosc_dokladna (-4.200000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (8.800000) (0.000000) ) ( wartosc_od_do (0.000000) (7.800000) ) ) ;;
assert (a =. 34.32);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-0.600000) (5.000000) ) ( wartosc_od_do (1.800000) (6.200000) ) ) ;;
assert (a =. 5.63);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (9.800000) ) ( wartosc_dokladnosc (3.000000) (1.800000) ) ) (2.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( minus ( wartosc_dokladnosc (-0.400000) (2.400000) ) ( wartosc_dokladna (-6.800000) ) ) ( wartosc_dokladna (8.600000) ) ) ;;
assert (a =. 15.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (4.800000) (1.200000) ) ( wartosc_dokladnosc (9.400000) (0.400000) ) ) ;;
assert (a =. 0.502500635754852931);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-3.200000) (8.800000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.600000) ) ( wartosc_od_do (0.000000) (3.800000) ) ) ;;
assert (a =. 2.26315789473684204);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-6.200000) (9.000000) ) ( wartosc_dokladna (9.800000) ) ) ;;
assert (a =. 3.0420000000000007);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.200000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.200000) ) ( wartosc_dokladna (-3.200000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( minus ( wartosc_od_do (-4.200000) (0.800000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) (1.800000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-4.200000) (9.400000) ) ( wartosc_dokladnosc (0.000000) (0.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.200000) (4.400000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 3.30000000000000027);;
let a = in_wartosc ( razy ( wartosc_od_do (-9.600000) (-8.200000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-6.000000) (5.200000) ) ) ) (-1.600000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-7.600000) (-5.200000) ) ( plus ( podzielic ( wartosc_dokladnosc (-8.400000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( wartosc_dokladna (-2.000000) ) ( plus ( wartosc_od_do (-2.600000) (-1.400000) ) ( wartosc_od_do (-8.200000) (2.400000) ) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( podzielic ( plus ( wartosc_dokladnosc (6.200000) (8.800000) ) ( wartosc_od_do (-7.400000) (-5.800000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (1.200000) (4.000000) ) ( minus ( wartosc_dokladna (-4.200000) ) ( wartosc_dokladna (-8.200000) ) ) ) ;;
assert (a =. 1.00000000000000022);;
let a = max_wartosc ( plus ( wartosc_dokladna (-9.600000) ) ( wartosc_od_do (8.600000) (9.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (-0.800000) ) ( plus ( podzielic ( wartosc_od_do (-8.200000) (3.200000) ) ( minus ( plus ( minus ( wartosc_dokladnosc (-0.800000) (1.200000) ) ( wartosc_dokladna (0.800000) ) ) ( wartosc_od_do (-0.600000) (1.400000) ) ) ( minus ( wartosc_dokladnosc (-0.600000) (0.800000) ) ( wartosc_od_do (-7.800000) (0.000000) ) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ) (-7.800000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (-7.600000) (0.200000) ) ( wartosc_dokladnosc (-5.600000) (3.000000) ) ) ;;
assert (a =. 1.9);;
let a = min_wartosc ( podzielic ( plus ( podzielic ( razy ( wartosc_dokladna (-10.000000) ) ( podzielic ( wartosc_od_do (-4.600000) (0.400000) ) ( wartosc_dokladnosc (5.200000) (0.000000) ) ) ) ( wartosc_dokladna (-9.600000) ) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (0.000000) (6.200000) ) ) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (1.400000) (1.200000) ) ( wartosc_od_do (3.800000) (8.000000) ) ) (-5.200000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-2.400000) (2.200000) ) ( wartosc_dokladna (5.400000) ) ) ;;
assert (a =. -0.454222222222222194);;
let a = max_wartosc ( minus ( wartosc_od_do (-0.200000) (7.600000) ) ( wartosc_od_do (-8.800000) (3.200000) ) ) ;;
assert (a =. 16.4);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-5.200000) ) ( wartosc_dokladnosc (2.600000) (2.200000) ) ) ;;
assert (a =. -2.04498977505112478);;
let a = sr_wartosc ( razy ( minus ( razy ( wartosc_od_do (0.000000) (4.400000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.600000) (8.400000) ) ) ( wartosc_od_do (0.200000) (6.600000) ) ) ;;
assert (a =. -118.36128);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-1.800000) ) ( wartosc_od_do (-3.600000) (0.000000) ) ) ( wartosc_dokladna (0.200000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.200000) (1.200000) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (4.200000) ) ( wartosc_od_do (1.800000) (4.200000) ) ) ( wartosc_od_do (-7.600000) (7.400000) ) ) ( podzielic ( wartosc_dokladna (-8.400000) ) ( wartosc_dokladnosc (8.000000) (4.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.400000) ) ( wartosc_od_do (7.400000) (8.400000) ) ) (5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-4.800000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-1.200000) ) ( minus ( wartosc_dokladnosc (0.800000) (0.000000) ) ( plus ( minus ( wartosc_od_do (-8.200000) (-3.000000) ) ( wartosc_od_do (0.000000) (5.800000) ) ) ( minus ( podzielic ( wartosc_dokladnosc (7.600000) (2.800000) ) ( wartosc_dokladna (7.400000) ) ) ( wartosc_od_do (-5.200000) (7.000000) ) ) ) ) ) ( wartosc_dokladnosc (-0.600000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_dokladna (9.600000) ) ( podzielic ( wartosc_dokladnosc (-2.200000) (6.800000) ) ( plus ( wartosc_od_do (0.000000) (2.400000) ) ( wartosc_od_do (-7.200000) (9.400000) ) ) ) ) (9.400000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladna (-8.400000) ) ( wartosc_dokladnosc (8.200000) (1.800000) ) ) ;;
assert (a =. -0.0524000000000004462);;
let a = sr_wartosc ( minus ( wartosc_od_do (6.800000) (6.800000) ) ( minus ( podzielic ( wartosc_dokladna (-1.800000) ) ( minus ( plus ( wartosc_od_do (-8.800000) (2.000000) ) ( wartosc_od_do (2.600000) (2.800000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (-2.600000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-8.000000) (5.600000) ) ( wartosc_od_do (-7.800000) (1.200000) ) ) ( wartosc_dokladnosc (-8.600000) (2.800000) ) ) (-2.400000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (4.200000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -0.42000000000000004);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-2.200000) (5.400000) ) ( podzielic ( wartosc_od_do (-5.000000) (5.400000) ) ( podzielic ( razy ( podzielic ( wartosc_od_do (0.000000) (7.400000) ) ( wartosc_dokladna (-7.600000) ) ) ( wartosc_od_do (0.000000) (9.800000) ) ) ( podzielic ( wartosc_od_do (0.000000) (1.800000) ) ( wartosc_dokladna (-8.200000) ) ) ) ) ) ( wartosc_dokladnosc (-1.400000) (9.600000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_od_do (-4.800000) (8.600000) ) ( wartosc_dokladnosc (5.600000) (7.400000) ) ) ;;
assert (a =. 0.385600000000000165);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladna (1.400000) ) ( wartosc_od_do (-0.200000) (0.000000) ) ) ( minus ( wartosc_od_do (-1.600000) (8.000000) ) ( razy ( wartosc_dokladna (5.600000) ) ( wartosc_od_do (0.000000) (2.600000) ) ) ) ) (-7.200000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (8.400000) ) ( wartosc_dokladna (-7.400000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (-0.600000) (9.800000) ) ( wartosc_dokladna (-3.000000) ) ) ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-2.800000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_dokladna (-3.400000) ) ( wartosc_od_do (-6.800000) (3.800000) ) ) ;;
assert (a =. -7.19999999999999929);;
let a = max_wartosc ( minus ( plus ( plus ( podzielic ( wartosc_od_do (-5.200000) (-4.600000) ) ( wartosc_dokladnosc (-2.400000) (4.200000) ) ) ( wartosc_od_do (5.200000) (8.600000) ) ) ( wartosc_dokladna (-3.600000) ) ) ( wartosc_od_do (-1.400000) (4.800000) ) ) ;;
assert (a =. 8.66165622825330672);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (6.600000) (3.200000) ) ( podzielic ( podzielic ( plus ( wartosc_dokladnosc (-7.800000) (5.200000) ) ( minus ( plus ( wartosc_dokladnosc (5.600000) (7.000000) ) ( wartosc_dokladna (4.200000) ) ) ( wartosc_dokladna (4.200000) ) ) ) ( wartosc_dokladnosc (2.400000) (3.600000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (9.600000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( plus ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (7.400000) ) ( wartosc_dokladnosc (-6.000000) (4.400000) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladnosc (6.200000) (4.600000) ) ) ) ) ;;
assert (a =. 14.19552);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-7.400000) (3.000000) ) ) ( wartosc_od_do (-8.600000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (9.600000) ) ( wartosc_od_do (5.800000) (6.200000) ) ) (-6.800000);;
assert (a = false);;
let a = min_wartosc ( minus ( plus ( wartosc_od_do (7.400000) (9.400000) ) ( razy ( wartosc_od_do (-8.400000) (2.400000) ) ( wartosc_dokladnosc (9.800000) (0.200000) ) ) ) ( wartosc_dokladna (2.200000) ) ) ;;
assert (a =. -77.2846400000000102);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (3.200000) (0.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.400000) (1.600000) ) ( wartosc_dokladna (-1.800000) ) ) ;;
assert (a =. -0.799999999999999933);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-8.400000) (0.800000) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.400000) (5.400000) ) ( wartosc_dokladnosc (3.000000) (0.200000) ) ) ;;
assert (a =. -0.755289421157684715);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.600000) ) ( razy ( wartosc_od_do (-1.200000) (7.400000) ) ( wartosc_dokladna (-7.200000) ) ) ) (5.400000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.600000) ) ( wartosc_dokladnosc (8.000000) (0.200000) ) ) (-5.800000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (7.800000) (7.800000) ) ( wartosc_od_do (-2.000000) (5.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (6.800000) ) ( wartosc_dokladna (8.400000) ) ) ;;
assert (a =. 15.2);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladna (-8.200000) ) ( wartosc_dokladnosc (-6.200000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (8.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.400000) (5.400000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.600000) ) ( podzielic ( wartosc_dokladna (-4.400000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ) ;;
assert (a =. 2.93181818181818166);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( plus ( wartosc_od_do (-8.400000) (8.800000) ) ( wartosc_dokladnosc (1.200000) (0.400000) ) ) ( wartosc_od_do (-4.600000) (0.000000) ) ) ;;
assert (a =. -7.20480000000000054);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (5.400000) ) ( wartosc_dokladna (4.600000) ) ) ( plus ( plus ( wartosc_dokladna (6.200000) ) ( wartosc_dokladna (5.600000) ) ) ( wartosc_dokladnosc (0.400000) (0.000000) ) ) ) (-7.800000);;
assert (a = false);;
let a = max_wartosc ( plus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-4.200000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 8.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-1.800000) (6.800000) ) ( wartosc_od_do (0.000000) (7.400000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( plus ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.600000) ) ) ( wartosc_dokladnosc (1.400000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (3.800000) (2.800000) ) ( wartosc_dokladna (-9.200000) ) ) ) ;;
assert (a =. 14.3999999999999986);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-4.400000) (6.000000) ) ( minus ( wartosc_od_do (0.000000) (7.400000) ) ( wartosc_dokladna (-6.800000) ) ) ) ;;
assert (a =. -0.488574979287489719);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) (4.800000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( plus ( razy ( wartosc_dokladnosc (-3.800000) (0.600000) ) ( wartosc_od_do (0.000000) (4.800000) ) ) ( minus ( wartosc_dokladna (-3.400000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ( minus ( wartosc_dokladna (2.600000) ) ( wartosc_dokladnosc (-7.600000) (0.000000) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-0.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 15.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.200000) (-0.400000) ) ( podzielic ( podzielic ( wartosc_od_do (4.800000) (7.400000) ) ( wartosc_od_do (-9.400000) (4.400000) ) ) ( wartosc_dokladna (-5.000000) ) ) ) ;;
assert (a =. 23.8333333333333357);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.800000) ) ( minus ( wartosc_od_do (-4.600000) (-1.200000) ) ( wartosc_dokladna (-4.800000) ) ) ) ;;
assert (a =. 10.);;
let a = min_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_od_do (-4.200000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-8.800000) (4.600000) ) ) ( wartosc_dokladnosc (4.200000) (6.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.800000) ) ( wartosc_dokladna (-1.800000) ) ) (-1.400000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.600000) (4.800000) ) ( wartosc_dokladnosc (-9.000000) (0.600000) ) ) ;;
assert (a =. -0.536552649228705603);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladnosc (5.400000) (7.800000) ) ( wartosc_dokladnosc (0.000000) (4.600000) ) ) ( wartosc_dokladnosc (-8.400000) (9.800000) ) ) ;;
assert (a =. 15.0444);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (0.800000) ) ( plus ( podzielic ( wartosc_dokladna (-0.800000) ) ( wartosc_dokladnosc (0.000000) (7.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (-1.400000) (0.000000) ) ( wartosc_od_do (-9.200000) (1.800000) ) ) ;;
assert (a =. -10.6);;
let a = sr_wartosc ( minus ( wartosc_od_do (-9.200000) (3.800000) ) ( wartosc_dokladnosc (-2.400000) (0.000000) ) ) ;;
assert (a =. -0.299999999999999822);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (9.400000) (0.800000) ) ( wartosc_od_do (2.800000) (9.600000) ) ) ;;
assert (a =. 19.0752000000000024);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (6.800000) (7.000000) ) ( wartosc_od_do (-9.000000) (-0.200000) ) ) ;;
assert (a =. -18.5413333333333306);;
let a = sr_wartosc ( minus ( wartosc_od_do (-5.600000) (-2.600000) ) ( wartosc_od_do (-9.200000) (-1.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.800000) (1.800000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (6.600000) ) ( wartosc_od_do (0.800000) (3.600000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-9.400000) (-6.400000) ) ( wartosc_od_do (-3.200000) (3.800000) ) ) (4.200000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.400000) (3.400000) ) ( wartosc_dokladnosc (0.000000) (0.600000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (4.000000) (8.400000) ) ( plus ( wartosc_dokladnosc (4.600000) (7.400000) ) ( wartosc_dokladnosc (-6.400000) (2.800000) ) ) ) ) ( plus ( wartosc_dokladna (6.800000) ) ( wartosc_od_do (0.000000) (5.800000) ) ) ) ;;
assert (a =. 0.55081598921208208);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (1.800000) (8.400000) ) ( wartosc_od_do (-7.600000) (1.800000) ) ) (-0.200000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (7.200000) ) ( wartosc_dokladnosc (-9.000000) (8.600000) ) ) ;;
assert (a =. -70.3728);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.200000) (0.000000) ) ( wartosc_dokladnosc (-4.800000) (2.800000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (-0.200000) ) ( wartosc_dokladnosc (6.400000) (6.800000) ) ) ( wartosc_dokladnosc (4.400000) (4.600000) ) ) ;;
assert (a =. -0.138570851617881075);;
let a = sr_wartosc ( podzielic ( plus ( podzielic ( wartosc_dokladna (-6.200000) ) ( wartosc_dokladnosc (-2.400000) (7.400000) ) ) ( wartosc_dokladna (7.200000) ) ) ( wartosc_dokladnosc (-6.600000) (0.000000) ) ) ;;
assert (a =. -1.48447841795815316);;
let a = max_wartosc ( razy ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladnosc (-2.200000) (1.000000) ) ) ;;
assert (a =. 14.2208);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (5.800000) (1.600000) ) ( wartosc_dokladnosc (8.400000) (3.800000) ) ) ;;
assert (a =. 14.612);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (2.400000) (3.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.400000) (0.600000) ) ( podzielic ( podzielic ( wartosc_dokladna (-9.200000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (7.400000) (5.800000) ) ) ) (7.400000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-3.600000) (1.800000) ) ) ( podzielic ( plus ( minus ( wartosc_dokladna (-3.600000) ) ( wartosc_dokladnosc (-5.200000) (0.000000) ) ) ( wartosc_dokladnosc (2.200000) (0.000000) ) ) ( wartosc_dokladna (8.800000) ) ) ) ;;
assert (a =. 0.431818181818181823);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladnosc (1.800000) (4.200000) ) ( wartosc_dokladnosc (1.400000) (8.000000) ) ) ( wartosc_od_do (0.000000) (2.200000) ) ) ;;
assert (a =. 1.6018322981366464);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-6.600000) ) ) (3.600000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-5.400000) ) ( wartosc_dokladna (-7.600000) ) ) ;;
assert (a =. 0.710526315789473673);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (5.200000) (6.600000) ) ( wartosc_od_do (-7.600000) (-2.600000) ) ) ;;
assert (a =. -42.12832);;
let a = in_wartosc ( plus ( minus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_od_do (-6.800000) (4.400000) ) ) ( wartosc_dokladnosc (6.000000) (3.200000) ) ) (-0.800000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-1.400000) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (9.800000) (4.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (4.200000) ) ( podzielic ( podzielic ( wartosc_od_do (-9.600000) (-9.200000) ) ( wartosc_od_do (-5.600000) (1.800000) ) ) ( wartosc_od_do (0.000000) (6.600000) ) ) ) ;;
assert (a =. -4.2608739130434774);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-1.400000) ) ( wartosc_dokladna (0.000000) ) ) (-4.800000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (7.400000) ) ( wartosc_dokladnosc (5.200000) (4.200000) ) ) ;;
assert (a =. 1.98160000000000025);;
let a = sr_wartosc ( plus ( wartosc_dokladna (7.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 7.8);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (1.600000) (8.200000) ) ) ( wartosc_od_do (-9.600000) (-2.600000) ) ) ;;
assert (a =. -25.2682926829268304);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladnosc (0.000000) (7.800000) ) ( wartosc_od_do (-1.800000) (5.400000) ) ) ( wartosc_dokladna (-0.800000) ) ) ;;
assert (a =. 2.6);;
let a = sr_wartosc ( razy ( wartosc_od_do (-3.400000) (3.200000) ) ( plus ( wartosc_od_do (-5.400000) (0.000000) ) ( wartosc_dokladna (-0.600000) ) ) ) ;;
assert (a =. 0.599999999999997868);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.200000) (-4.400000) ) ( plus ( wartosc_dokladnosc (-1.200000) (9.800000) ) ( wartosc_od_do (5.400000) (9.400000) ) ) ) ;;
assert (a =. -2.00862237899274909);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.400000) (4.600000) ) ( minus ( wartosc_od_do (-9.400000) (-6.200000) ) ( wartosc_dokladnosc (-0.800000) (2.200000) ) ) ) ;;
assert (a =. -0.854637336504161516);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.400000) ) ( minus ( wartosc_dokladnosc (2.400000) (1.400000) ) ( wartosc_dokladnosc (0.000000) (4.200000) ) ) ) ;;
assert (a =. 2.91740181075490801);;
let a = max_wartosc ( minus ( wartosc_od_do (-7.800000) (4.000000) ) ( minus ( wartosc_dokladna (7.800000) ) ( wartosc_od_do (-5.800000) (9.800000) ) ) ) ;;
assert (a =. 6.00000000000000089);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.600000) (3.600000) ) ( wartosc_dokladnosc (0.600000) (9.000000) ) ) ;;
assert (a =. -0.915750915750915162);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-2.200000) (3.400000) ) ( wartosc_dokladna (0.400000) ) ) ) ;;
assert (a =. 5.68700000000000117);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-1.600000) (1.800000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 0.4072);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (2.000000) (0.800000) ) ( wartosc_dokladna (4.600000) ) ) ;;
assert (a =. 6.584);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-8.400000) (6.800000) ) ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (7.400000) ) ) ) ( podzielic ( plus ( plus ( wartosc_dokladna (8.600000) ) ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (8.000000) ) ( wartosc_dokladnosc (5.200000) (0.400000) ) ) ) ) ( wartosc_dokladna (-2.400000) ) ) ( wartosc_dokladnosc (9.800000) (1.000000) ) ) ) (-9.800000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (2.600000) (4.600000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 12.7196);;
let a = in_wartosc ( razy ( wartosc_dokladna (-7.800000) ) ( plus ( minus ( wartosc_dokladnosc (0.000000) (5.400000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-5.400000) ) ) ) ( wartosc_dokladna (6.200000) ) ) ) (-0.600000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-5.800000) (6.000000) ) ( podzielic ( wartosc_od_do (1.400000) (7.800000) ) ( wartosc_dokladnosc (6.400000) (0.000000) ) ) ) (8.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (7.600000) ) ( wartosc_dokladnosc (0.200000) (1.600000) ) ) (5.400000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (5.400000) ) ( wartosc_dokladnosc (0.000000) (0.800000) ) ) (5.600000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladna (-7.400000) ) ( razy ( wartosc_od_do (0.000000) (5.400000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-0.800000) (5.400000) ) ) ) ) ( wartosc_dokladna (6.800000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.800000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (1.200000) ) ( razy ( minus ( wartosc_dokladnosc (7.000000) (4.800000) ) ( wartosc_od_do (1.400000) (9.800000) ) ) ( wartosc_dokladnosc (6.000000) (1.600000) ) ) ) (9.600000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (4.400000) (9.600000) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-3.200000) ) ( podzielic ( podzielic ( wartosc_dokladna (8.600000) ) ( wartosc_od_do (-6.200000) (-3.000000) ) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (1.600000) ) ( wartosc_od_do (-2.800000) (-0.200000) ) ) ;;
assert (a =. 1.40000000000000013);;
let a = in_wartosc ( minus ( plus ( podzielic ( wartosc_dokladnosc (-4.200000) (0.400000) ) ( wartosc_dokladnosc (-3.000000) (7.600000) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.200000) (-3.200000) ) ) ) ( wartosc_od_do (-2.600000) (5.200000) ) ) (-6.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.200000) (9.200000) ) ( wartosc_dokladna (-8.800000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.800000) (-4.000000) ) ) ;;
assert (a =. 4.4);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.400000) ) ( wartosc_dokladnosc (3.000000) (5.200000) ) ) ;;
assert (a =. 1.20000000000000018);;
let a = in_wartosc ( minus ( plus ( podzielic ( razy ( wartosc_od_do (-4.400000) (7.800000) ) ( wartosc_dokladnosc (-0.200000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (8.400000) (7.000000) ) ( plus ( wartosc_dokladna (-3.000000) ) ( razy ( wartosc_dokladna (8.200000) ) ( podzielic ( wartosc_dokladnosc (-2.400000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (2.400000) ) ) ) ) ) ) ( wartosc_od_do (3.000000) (7.000000) ) ) ( wartosc_dokladna (1.200000) ) ) (2.200000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( podzielic ( razy ( minus ( wartosc_od_do (6.000000) (9.600000) ) ( wartosc_dokladnosc (-8.200000) (8.200000) ) ) ( razy ( wartosc_dokladnosc (5.200000) (8.600000) ) ( wartosc_dokladna (8.200000) ) ) ) ( wartosc_od_do (-3.600000) (0.000000) ) ) ) ;;
assert (a =. 0.0136567812046205529);;
let a = in_wartosc ( razy ( plus ( wartosc_dokladna (-5.600000) ) ( wartosc_od_do (0.200000) (1.000000) ) ) ( wartosc_od_do (-5.200000) (3.200000) ) ) (-7.200000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.600000) ) ( wartosc_dokladnosc (1.400000) (7.200000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (0.000000) ) ( razy ( podzielic ( minus ( wartosc_od_do (0.000000) (1.800000) ) ( wartosc_dokladna (-5.400000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( wartosc_dokladnosc (0.600000) (0.000000) ) ) ) ( wartosc_od_do (1.400000) (7.000000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-3.800000) (1.200000) ) ( wartosc_dokladnosc (-2.800000) (8.600000) ) ) ;;
assert (a =. -4.1);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (7.200000) (0.000000) ) ) ;;
assert (a =. 0.55555555555555558);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (1.200000) ) ( wartosc_dokladnosc (6.400000) (8.200000) ) ) ;;
assert (a =. 0.204248366013071891);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.200000) ) ( wartosc_od_do (1.200000) (2.200000) ) ) ;;
assert (a =. 2.58333333333333348);;
let a = in_wartosc ( plus ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.800000) ) ) ( wartosc_dokladna (2.400000) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( minus ( wartosc_dokladna (8.600000) ) ( minus ( wartosc_dokladna (7.400000) ) ( wartosc_od_do (-1.600000) (9.000000) ) ) ) ( wartosc_dokladnosc (9.200000) (5.800000) ) ) ) ( razy ( podzielic ( wartosc_dokladnosc (4.400000) (5.600000) ) ( wartosc_dokladna (6.800000) ) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (0.000000) (5.600000) ) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-3.200000) ) ( wartosc_dokladnosc (-4.600000) (5.400000) ) ) ;;
assert (a =. 15.51488);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-2.200000) (9.400000) ) ( wartosc_dokladna (3.600000) ) ) ;;
assert (a =. -0.66855555555555557);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (8.600000) ) ( wartosc_od_do (-4.200000) (6.600000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( podzielic ( wartosc_od_do (4.400000) (7.000000) ) ( wartosc_od_do (-1.200000) (7.000000) ) ) ( wartosc_dokladna (6.600000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (8.600000) ) ( wartosc_dokladna (8.400000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.800000) ) ( plus ( wartosc_od_do (0.600000) (1.600000) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. -0.906976744186046457);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (3.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( razy ( razy ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( plus ( podzielic ( wartosc_od_do (-4.400000) (5.600000) ) ( wartosc_dokladna (-0.800000) ) ) ( wartosc_dokladnosc (6.400000) (0.000000) ) ) ) ( wartosc_dokladnosc (-8.800000) (0.000000) ) ) ( wartosc_od_do (0.000000) (1.400000) ) ) (-5.800000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.600000) ) ( wartosc_od_do (0.000000) (8.400000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (3.800000) (1.000000) ) ( wartosc_dokladna (-8.800000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (6.800000) ) ) (-5.800000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-7.800000) (3.000000) ) ( minus ( podzielic ( wartosc_od_do (2.400000) (9.200000) ) ( wartosc_od_do (-7.400000) (5.200000) ) ) ( wartosc_dokladna (5.000000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( minus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (-3.200000) (2.000000) ) ) (-1.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (5.400000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_dokladnosc (8.800000) (4.600000) ) ( wartosc_od_do (0.200000) (6.400000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.400000) (9.200000) ) ( wartosc_dokladna (-2.600000) ) ) (-4.600000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.800000) (3.000000) ) ( minus ( wartosc_dokladnosc (-4.800000) (0.000000) ) ( razy ( wartosc_dokladnosc (-7.200000) (2.200000) ) ( minus ( wartosc_dokladna (6.000000) ) ( minus ( minus ( wartosc_dokladnosc (8.800000) (3.200000) ) ( wartosc_od_do (0.000000) (2.800000) ) ) ( wartosc_od_do (4.000000) (9.000000) ) ) ) ) ) ) ;;
assert (a =. 1.79963419915414269);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) (5.400000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.800000) (1.800000) ) ( wartosc_od_do (0.000000) (2.800000) ) ) ;;
assert (a =. 5.04);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.800000) (0.600000) ) ( wartosc_dokladna (-7.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.800000) (1.400000) ) ( wartosc_dokladnosc (-6.800000) (8.400000) ) ) ;;
assert (a =. 1.31088560885608874);;
let a = min_wartosc ( razy ( podzielic ( minus ( wartosc_od_do (-2.400000) (5.800000) ) ( wartosc_dokladna (5.400000) ) ) ( wartosc_dokladna (3.200000) ) ) ( wartosc_dokladnosc (3.200000) (8.800000) ) ) ;;
assert (a =. -8.4864);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.200000) (0.000000) ) ( wartosc_od_do (1.200000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.400000) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( razy ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.200000) (4.600000) ) ) ( wartosc_dokladnosc (5.400000) (1.000000) ) ) ;;
assert (a =. -44.7228);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.400000) (1.800000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladnosc (-9.600000) (0.800000) ) ) ) ;;
assert (a =. -0.46758912);;
let a = in_wartosc ( plus ( wartosc_dokladna (3.200000) ) ( wartosc_dokladna (-3.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.400000) ) ( wartosc_dokladna (-1.400000) ) ) (7.200000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-8.800000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -8.8);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-0.200000) ) ( wartosc_dokladnosc (-9.400000) (8.200000) ) ) ;;
assert (a =. 0.0214206280476734109);;
let a = max_wartosc ( podzielic ( minus ( plus ( wartosc_od_do (-8.000000) (7.800000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_od_do (-5.600000) (0.000000) ) ( wartosc_dokladnosc (-7.400000) (1.400000) ) ) ) ( wartosc_od_do (-1.200000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( minus ( wartosc_od_do (-9.400000) (-6.000000) ) ( wartosc_dokladna (1.400000) ) ) ) ;;
assert (a =. 7.4);;
let a = in_wartosc ( minus ( wartosc_dokladna (-4.800000) ) ( wartosc_od_do (-3.200000) (-3.200000) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-7.600000) (6.000000) ) ( wartosc_dokladnosc (-9.400000) (1.200000) ) ) ;;
assert (a =. 2.36880000000000024);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.600000) (-4.200000) ) ) (-2.200000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-7.600000) (6.600000) ) ( wartosc_dokladnosc (-0.200000) (9.600000) ) ) ;;
assert (a =. 1.52963072);;
let a = in_wartosc ( plus ( wartosc_dokladna (-3.200000) ) ( wartosc_dokladna (-1.400000) ) ) (-8.400000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.600000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-8.400000) (3.600000) ) ( minus ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladnosc (-1.600000) (6.200000) ) ) ) ( wartosc_od_do (0.000000) (5.600000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (2.600000) (4.800000) ) ( wartosc_od_do (7.000000) (9.400000) ) ) ;;
assert (a =. 0.2633191489361702);;
let a = in_wartosc ( plus ( podzielic ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (9.200000) ) ) ( wartosc_dokladnosc (9.000000) (4.600000) ) ) ( wartosc_dokladnosc (-0.800000) (9.200000) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_dokladna (-7.200000) ) ) ) ) (2.400000);;
assert (a = false);;
let a = min_wartosc ( plus ( plus ( wartosc_dokladnosc (-10.000000) (1.800000) ) ( wartosc_dokladna (-9.800000) ) ) ( plus ( wartosc_od_do (0.000000) (5.800000) ) ( wartosc_dokladnosc (-9.600000) (0.000000) ) ) ) ;;
assert (a =. -29.58);;
let a = sr_wartosc ( podzielic ( podzielic ( razy ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ( wartosc_od_do (-4.000000) (-1.000000) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_od_do (-6.600000) (5.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (-1.800000) (0.000000) ) ( wartosc_od_do (7.200000) (8.200000) ) ) ;;
assert (a =. 6.8);;
let a = sr_wartosc ( plus ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.600000) ) ) ( wartosc_od_do (-3.600000) (6.000000) ) ) ;;
assert (a =. 2.2);;
let a = in_wartosc ( razy ( razy ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.800000) ) ) ( wartosc_dokladna (-2.200000) ) ) ( minus ( wartosc_dokladna (-2.200000) ) ( razy ( wartosc_dokladna (-6.200000) ) ( wartosc_dokladnosc (0.800000) (6.400000) ) ) ) ) ( podzielic ( wartosc_dokladnosc (2.600000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (7.200000) ) ) ) (7.600000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (-9.800000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -4.9);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-9.800000) (2.000000) ) ( wartosc_dokladna (3.400000) ) ) ;;
assert (a =. -33.3200000000000074);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (4.400000) ) ( podzielic ( podzielic ( wartosc_od_do (-7.200000) (4.400000) ) ( minus ( plus ( razy ( wartosc_od_do (-0.800000) (0.000000) ) ( wartosc_dokladna (0.800000) ) ) ( wartosc_dokladna (-7.800000) ) ) ( wartosc_od_do (-10.000000) (-7.200000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (7.200000) ) ( wartosc_dokladna (-2.600000) ) ) ;;
assert (a =. -2.6);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-0.200000) ) ( wartosc_od_do (-9.600000) (8.000000) ) ) ( wartosc_od_do (-6.600000) (0.000000) ) ) (2.200000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladna (-7.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( wartosc_dokladna (-2.800000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.400000) (5.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-7.000000) (8.800000) ) ( wartosc_dokladnosc (-6.800000) (7.400000) ) ) ;;
assert (a =. 0.919199999999999129);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.600000) (-3.800000) ) ( wartosc_dokladna (-5.400000) ) ) ;;
assert (a =. 0.703703703703703609);;
let a = min_wartosc ( plus ( wartosc_od_do (-5.800000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (2.000000) ) ) ;;
assert (a =. -8.86);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (4.600000) (9.400000) ) ( wartosc_dokladnosc (0.200000) (3.000000) ) ) ( wartosc_od_do (-1.600000) (-1.600000) ) ) (-7.200000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (1.400000) (9.400000) ) ( razy ( plus ( wartosc_dokladnosc (-6.800000) (6.800000) ) ( podzielic ( minus ( wartosc_dokladna (-5.400000) ) ( wartosc_dokladna (-4.800000) ) ) ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (0.000000) (6.800000) ) ) ) ) ( wartosc_dokladnosc (4.400000) (1.800000) ) ) ) (9.400000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (-2.000000) (7.000000) ) ( podzielic ( wartosc_dokladna (-1.800000) ) ( wartosc_dokladnosc (-2.000000) (4.800000) ) ) ) ;;
assert (a =. 2.36344537815126055);;
let a = sr_wartosc ( razy ( wartosc_dokladna (2.800000) ) ( plus ( wartosc_dokladna (7.600000) ) ( wartosc_dokladnosc (2.400000) (6.800000) ) ) ) ;;
assert (a =. 28.);;
let a = min_wartosc ( minus ( wartosc_od_do (-8.200000) (-2.600000) ) ( wartosc_dokladna (-6.400000) ) ) ;;
assert (a =. -1.79999999999999893);;
let a = min_wartosc ( razy ( wartosc_od_do (-2.600000) (2.200000) ) ( wartosc_od_do (-2.600000) (0.000000) ) ) ;;
assert (a =. -5.72000000000000064);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (7.400000) ) ( wartosc_dokladnosc (-4.600000) (4.600000) ) ) (-2.600000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-9.400000) ) ( razy ( wartosc_dokladna (0.800000) ) ( razy ( wartosc_od_do (-7.600000) (6.000000) ) ( wartosc_dokladna (-2.800000) ) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.800000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-3.200000) (0.600000) ) ( wartosc_od_do (-3.400000) (-2.400000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (2.200000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (8.800000) (0.000000) ) ( wartosc_od_do (-6.200000) (9.600000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (-8.400000) ) ( minus ( wartosc_dokladnosc (-5.000000) (7.200000) ) ( wartosc_dokladna (4.600000) ) ) ) ( wartosc_dokladnosc (-0.600000) (0.000000) ) ) ;;
assert (a =. 78.2159999999999798);;
let a = in_wartosc ( podzielic ( wartosc_od_do (5.000000) (9.600000) ) ( wartosc_dokladnosc (5.400000) (6.400000) ) ) (-10.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (7.200000) ) ( plus ( wartosc_od_do (-2.000000) (3.600000) ) ( wartosc_dokladnosc (0.000000) (3.400000) ) ) ) ;;
assert (a =. -1.71520000000000028);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.400000) (0.000000) ) ( wartosc_od_do (-2.600000) (7.800000) ) ) (7.200000);;
assert (a = true);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.400000) (3.400000) ) ( wartosc_od_do (-3.800000) (9.200000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (4.400000) (7.200000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-5.200000) (0.000000) ) ( wartosc_dokladna (-0.600000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (-0.800000) (5.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (9.800000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (9.800000) ) ) ( podzielic ( wartosc_dokladna (2.600000) ) ( wartosc_od_do (0.000000) (7.400000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( minus ( podzielic ( minus ( wartosc_dokladna (-9.800000) ) ( wartosc_od_do (-2.200000) (3.800000) ) ) ( minus ( wartosc_dokladna (-2.600000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (0.000000) (4.400000) ) ) ;;
assert (a =. 5.23076923076923084);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (1.200000) (5.800000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (3.200000) ) ( wartosc_dokladnosc (-2.000000) (7.800000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (-6.200000) ) ( wartosc_dokladnosc (-3.400000) (2.000000) ) ) ;;
assert (a =. -9.668);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.600000) (2.600000) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (8.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( plus ( wartosc_od_do (2.200000) (6.200000) ) ( minus ( wartosc_od_do (-8.000000) (-3.200000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (6.400000) ) ( wartosc_dokladnosc (-4.400000) (0.000000) ) ) ) ) ( wartosc_dokladnosc (-5.200000) (0.400000) ) ) ;;
assert (a =. 3.80000000000000027);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (4.800000) (8.600000) ) ( razy ( wartosc_od_do (-3.800000) (-2.800000) ) ( wartosc_dokladna (-7.400000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (7.800000) ) ( wartosc_dokladnosc (-1.800000) (4.400000) ) ) ;;
assert (a =. -5.63807531380753169);;
let a = sr_wartosc ( minus ( wartosc_dokladna (1.600000) ) ( wartosc_od_do (-6.200000) (9.000000) ) ) ;;
assert (a =. 0.200000000000000178);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.800000) ) ( wartosc_dokladnosc (-2.000000) (4.000000) ) ) ;;
assert (a =. 1.34615384615384603);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.200000) ) ( wartosc_dokladna (0.600000) ) ) ;;
assert (a =. -0.6);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( plus ( wartosc_dokladna (-8.800000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ;;
assert (a =. -0.795454545454545414);;
let a = min_wartosc ( podzielic ( minus ( minus ( wartosc_od_do (-4.600000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (7.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-8.400000) ) ( plus ( wartosc_dokladnosc (-6.600000) (8.400000) ) ( wartosc_dokladnosc (-0.400000) (9.800000) ) ) ) ;;
assert (a =. -15.4);;
let a = in_wartosc ( razy ( minus ( razy ( wartosc_dokladnosc (9.200000) (2.200000) ) ( podzielic ( wartosc_dokladnosc (5.800000) (0.000000) ) ( wartosc_od_do (-8.400000) (-1.200000) ) ) ) ( wartosc_od_do (4.600000) (8.400000) ) ) ( wartosc_od_do (0.000000) (9.200000) ) ) (3.600000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladnosc (0.400000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (6.800000) ) ) ( minus ( podzielic ( wartosc_od_do (0.800000) (9.400000) ) ( wartosc_dokladnosc (-0.800000) (0.000000) ) ) ( wartosc_dokladnosc (-1.800000) (4.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( minus ( plus ( wartosc_dokladnosc (0.000000) (4.800000) ) ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (-9.800000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladna (0.800000) ) ( podzielic ( plus ( minus ( wartosc_dokladnosc (-2.200000) (7.200000) ) ( wartosc_dokladnosc (0.000000) (0.600000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (8.800000) (6.200000) ) ( wartosc_od_do (0.000000) (9.800000) ) ) ) ) ( podzielic ( wartosc_od_do (-4.200000) (2.200000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ( wartosc_dokladna (3.600000) ) ) ) ( wartosc_dokladnosc (-9.400000) (3.400000) ) ) ( wartosc_od_do (-4.800000) (5.800000) ) ) (-4.200000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.400000) ) ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (-4.800000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladna (-9.800000) ) ) ;;
assert (a =. 0.79591836734693866);;
let a = in_wartosc ( podzielic ( wartosc_od_do (5.400000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (9.800000) (1.800000) ) ( wartosc_dokladna (-8.800000) ) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (8.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( plus ( wartosc_od_do (-6.600000) (0.000000) ) ( wartosc_dokladna (6.800000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (7.200000) (0.000000) ) ( minus ( wartosc_dokladnosc (9.400000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.600000) ) ) ) ;;
assert (a =. -2.2);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-3.200000) (6.800000) ) ( wartosc_od_do (-1.600000) (0.800000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.200000) (3.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. -1.1155);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (5.600000) ) ( wartosc_dokladnosc (4.400000) (4.200000) ) ) ;;
assert (a =. 12.83744);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (8.200000) (3.400000) ) ( wartosc_od_do (-1.800000) (0.000000) ) ) (-6.600000);;
assert (a = true);;
let a = in_wartosc ( razy ( razy ( podzielic ( podzielic ( wartosc_od_do (7.600000) (8.400000) ) ( wartosc_od_do (-10.000000) (7.600000) ) ) ( wartosc_dokladna (-2.800000) ) ) ( wartosc_od_do (0.000000) (2.200000) ) ) ( wartosc_dokladna (6.800000) ) ) (-1.600000);;
assert (a = true);;
let a = in_wartosc ( razy ( minus ( wartosc_od_do (-8.000000) (-6.800000) ) ( wartosc_dokladnosc (3.000000) (6.400000) ) ) ( wartosc_dokladnosc (9.400000) (2.000000) ) ) (3.800000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (1.800000) ) ( wartosc_dokladna (-6.800000) ) ) ;;
assert (a =. -12.24);;
let a = in_wartosc ( razy ( wartosc_dokladna (6.600000) ) ( wartosc_od_do (-4.200000) (0.200000) ) ) (-2.800000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (-9.200000) (-0.200000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (2.600000) ) ( wartosc_od_do (4.600000) (6.200000) ) ) ) ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( podzielic ( plus ( minus ( wartosc_od_do (-7.200000) (-3.200000) ) ( podzielic ( wartosc_dokladnosc (2.800000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( razy ( wartosc_dokladna (-4.400000) ) ( wartosc_od_do (-8.400000) (4.000000) ) ) ) ( wartosc_od_do (-9.200000) (-5.800000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (-2.200000) ) ( wartosc_od_do (0.800000) (9.600000) ) ) ;;
assert (a =. -11.8);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-9.800000) (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-2.600000) (9.800000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (4.800000) (1.800000) ) ( wartosc_dokladnosc (1.600000) (1.000000) ) ) ;;
assert (a =. 3.08484848484848451);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-0.600000) (0.400000) ) ( wartosc_od_do (-9.000000) (4.800000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (5.200000) ) ( wartosc_dokladnosc (2.200000) (5.000000) ) ) ;;
assert (a =. 6.006);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (4.000000) (7.800000) ) ( podzielic ( wartosc_od_do (-8.600000) (0.400000) ) ( wartosc_dokladna (-1.600000) ) ) ) ;;
assert (a =. 6.56250000000000089);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (6.200000) (9.400000) ) ( wartosc_dokladna (3.400000) ) ) (-8.600000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.600000) (1.600000) ) ) ;;
assert (a =. 7.6);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( wartosc_dokladna (7.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (3.400000) ) ( wartosc_dokladnosc (-5.600000) (6.200000) ) ) ;;
assert (a =. -3.89999999999999947);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (-1.200000) (0.000000) ) ( minus ( wartosc_dokladnosc (3.400000) (1.400000) ) ( razy ( wartosc_od_do (-7.200000) (0.400000) ) ( wartosc_dokladnosc (-0.800000) (1.200000) ) ) ) ) ( wartosc_dokladnosc (-4.600000) (5.600000) ) ) (8.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( podzielic ( podzielic ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-0.400000) (5.200000) ) ) ( wartosc_od_do (-8.400000) (-3.400000) ) ) ( podzielic ( wartosc_od_do (-4.600000) (-3.800000) ) ( wartosc_dokladnosc (7.000000) (1.200000) ) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. -1.31591331269349876);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladna (8.400000) ) ( wartosc_od_do (-1.000000) (2.200000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ;;
assert (a =. 9.4);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-8.200000) (1.200000) ) ( wartosc_dokladnosc (4.600000) (3.200000) ) ) ( wartosc_dokladnosc (-5.400000) (4.200000) ) ) ;;
assert (a =. 0.360248272565600214);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_od_do (8.000000) (9.600000) ) ( wartosc_dokladna (-5.800000) ) ) ( wartosc_od_do (-5.800000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.200000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( plus ( wartosc_dokladna (3.600000) ) ( wartosc_od_do (1.600000) (9.400000) ) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (0.800000) (9.200000) ) ( wartosc_dokladnosc (-2.400000) (8.600000) ) ) ) (-4.200000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (9.800000) ) ( razy ( wartosc_dokladna (-5.800000) ) ( wartosc_od_do (2.200000) (7.200000) ) ) ) ;;
assert (a =. 0.376774207593173149);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_od_do (0.000000) (6.200000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (5.800000) ) ) ) ) ( wartosc_od_do (-1.600000) (0.600000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-1.800000) (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (-0.400000) (5.000000) ) ( wartosc_od_do (-3.200000) (0.000000) ) ) (8.600000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-6.600000) (0.000000) ) ( plus ( wartosc_dokladna (-2.000000) ) ( minus ( wartosc_od_do (-4.400000) (-4.400000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. -0.199999999999999289);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( razy ( minus ( plus ( wartosc_dokladnosc (-7.600000) (0.000000) ) ( minus ( wartosc_dokladna (-7.200000) ) ( plus ( wartosc_dokladnosc (8.000000) (1.600000) ) ( podzielic ( wartosc_dokladna (8.800000) ) ( wartosc_dokladna (-10.000000) ) ) ) ) ) ( wartosc_dokladnosc (1.200000) (0.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ) ;;
assert (a =. 83.48);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (0.600000) (8.800000) ) ( razy ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) ( podzielic ( wartosc_dokladna (-1.400000) ) ( wartosc_od_do (1.200000) (3.000000) ) ) ) ;;
assert (a =. -7.47154285714285749);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-9.400000) (6.800000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( podzielic ( podzielic ( razy ( wartosc_dokladnosc (3.600000) (8.400000) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ( plus ( plus ( wartosc_dokladnosc (7.000000) (9.800000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladnosc (5.600000) (7.600000) ) ) ) ;;
assert (a =. -15.63496);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (7.200000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-6.400000) ) ) ;;
assert (a =. 1.09375);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (3.800000) (6.000000) ) ) ;;
assert (a =. 3.572);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( minus ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (1.000000) (7.200000) ) ) ( wartosc_dokladna (4.200000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (6.800000) ) ( plus ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladnosc (-5.400000) (2.000000) ) ) ) ( wartosc_dokladnosc (6.600000) (0.000000) ) ) (-7.800000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-1.800000) (2.600000) ) ( wartosc_od_do (-7.400000) (-2.200000) ) ) ;;
assert (a =. 0.818181818181818121);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (4.600000) ) ( wartosc_dokladna (0.000000) ) ) (7.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-9.600000) (5.200000) ) ( wartosc_dokladna (2.400000) ) ) (-9.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-4.400000) ) ( wartosc_od_do (-6.200000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( minus ( wartosc_od_do (-8.400000) (0.000000) ) ( wartosc_dokladnosc (-8.800000) (5.600000) ) ) ;;
assert (a =. 4.60000000000000053);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (8.200000) (3.000000) ) ( plus ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladna (0.000000) ) ) ) (0.800000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (8.600000) ) ( wartosc_dokladna (9.400000) ) ) ;;
assert (a =. 18.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (3.400000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladnosc (-2.000000) (5.600000) ) ( wartosc_dokladnosc (-4.400000) (0.000000) ) ) ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (9.200000) (1.400000) ) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.200000) (4.200000) ) ( wartosc_dokladna (1.200000) ) ) (-3.200000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (7.400000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert (a =. -7.4);;
let a = max_wartosc ( razy ( razy ( razy ( wartosc_od_do (-4.600000) (7.800000) ) ( wartosc_dokladnosc (0.000000) (9.800000) ) ) ( podzielic ( wartosc_dokladna (-8.800000) ) ( podzielic ( wartosc_dokladna (-1.800000) ) ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( wartosc_dokladna (8.200000) ) ) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-9.800000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (9.400000) ) ( wartosc_od_do (-1.400000) (8.200000) ) ) ( wartosc_od_do (-4.400000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( plus ( razy ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.200000) (5.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-3.600000) (0.000000) ) ) ( wartosc_od_do (-3.600000) (0.400000) ) ) ( wartosc_dokladnosc (-10.000000) (7.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-0.400000) (5.200000) ) ( wartosc_od_do (0.000000) (5.400000) ) ) ( wartosc_dokladnosc (-8.800000) (0.000000) ) ) ;;
assert (a =. -0.590909090909090939);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (5.200000) ) ( wartosc_dokladnosc (-8.400000) (3.400000) ) ) (4.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-2.800000) (8.800000) ) ( wartosc_od_do (0.000000) (6.800000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (-3.200000) (5.600000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.600000) (7.600000) ) ( wartosc_dokladna (5.400000) ) ) ;;
assert (a =. 0.277777777777777735);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-4.600000) ) ( razy ( wartosc_od_do (1.000000) (4.000000) ) ( podzielic ( wartosc_dokladna (-1.600000) ) ( wartosc_od_do (-7.400000) (4.200000) ) ) ) ) (3.200000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-0.200000) (0.000000) ) ( wartosc_od_do (-8.200000) (-3.200000) ) ) (8.200000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (-6.200000) ) ( wartosc_dokladnosc (8.800000) (2.600000) ) ) ( wartosc_dokladna (0.400000) ) ) (-2.400000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.400000) (0.600000) ) ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (8.400000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( minus ( wartosc_dokladna (-7.400000) ) ( wartosc_dokladna (4.800000) ) ) ;;
assert (a =. -12.2);;
let a = max_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_od_do (-2.000000) (3.200000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-3.400000) (8.800000) ) ( razy ( wartosc_od_do (-8.200000) (-3.400000) ) ( podzielic ( wartosc_dokladnosc (-6.400000) (0.000000) ) ( wartosc_dokladnosc (0.400000) (3.600000) ) ) ) ) ;;
assert (a =. 48.8104525096525066);;
let a = min_wartosc ( minus ( wartosc_od_do (1.600000) (5.800000) ) ( wartosc_dokladnosc (0.400000) (0.000000) ) ) ;;
assert (a =. 1.20000000000000018);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-2.600000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-9.600000) (5.400000) ) ( wartosc_dokladnosc (-2.800000) (3.800000) ) ) ) ;;
assert (a =. -0.832082452431289532);;
let a = min_wartosc ( razy ( wartosc_od_do (-1.200000) (0.000000) ) ( wartosc_dokladna (-1.600000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-3.800000) ) ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-9.600000) ) ) ( wartosc_od_do (0.000000) (5.600000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_od_do (2.800000) (5.200000) ) ( wartosc_od_do (-8.600000) (0.000000) ) ) ;;
assert (a =. -5.8);;
let a = max_wartosc ( podzielic ( wartosc_od_do (1.600000) (9.200000) ) ( podzielic ( wartosc_od_do (1.200000) (4.000000) ) ( wartosc_od_do (-5.400000) (8.800000) ) ) ) ;;
assert (a =. 67.4666666666666686);;
let a = in_wartosc ( plus ( wartosc_od_do (2.000000) (5.600000) ) ( wartosc_od_do (-2.400000) (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( razy ( wartosc_dokladna (-8.200000) ) ( wartosc_dokladnosc (-9.200000) (3.200000) ) ) ( wartosc_dokladnosc (2.600000) (4.600000) ) ) ( wartosc_od_do (-2.200000) (9.200000) ) ) ;;
assert (a =. 171.93349196799997);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (1.400000) (5.600000) ) ( wartosc_dokladna (9.400000) ) ) ;;
assert (a =. 0.14893617021276595);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (4.200000) (4.000000) ) ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 4.032);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.000000) (-5.000000) ) ( wartosc_dokladna (2.400000) ) ) ;;
assert (a =. -14.3999999999999986);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (9.600000) (7.800000) ) ( wartosc_od_do (-9.200000) (1.400000) ) ) ( wartosc_dokladnosc (-4.600000) (0.000000) ) ) (0.400000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.800000) (0.600000) ) ( wartosc_dokladna (-7.400000) ) ) ;;
assert (a =. -5.92000000000000082);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (7.800000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-3.800000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( minus ( razy ( wartosc_dokladna (-8.200000) ) ( podzielic ( wartosc_dokladna (-7.400000) ) ( wartosc_dokladnosc (-6.000000) (1.400000) ) ) ) ( plus ( wartosc_od_do (-9.000000) (-0.400000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.200000) ) ) ) ) ( wartosc_dokladnosc (3.000000) (4.600000) ) ) ;;
assert (a =. -2.03570151216305);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.400000) (2.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.800000) ) ( wartosc_dokladna (3.400000) ) ) ;;
assert (a =. 4.2);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-7.400000) (7.400000) ) ( wartosc_dokladnosc (-8.600000) (1.400000) ) ) ;;
assert (a =. 1.19999999999999929);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (9.600000) ) ( wartosc_od_do (0.000000) (9.800000) ) ) ( podzielic ( wartosc_od_do (-8.600000) (-5.200000) ) ( plus ( wartosc_od_do (0.000000) (1.400000) ) ( wartosc_dokladna (4.800000) ) ) ) ) ;;
assert (a =. 1.81830151415404861);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-4.400000) (2.000000) ) ) ( wartosc_dokladna (-3.800000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladna (2.600000) ) ( wartosc_dokladnosc (4.400000) (6.000000) ) ) ;;
assert (a =. 6.73600000000000065);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.600000) ) ( plus ( wartosc_dokladnosc (-0.600000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (3.400000) (4.000000) ) ( wartosc_dokladnosc (-7.800000) (4.800000) ) ) ;;
assert (a =. -0.538677009265244533);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladnosc (0.000000) (0.600000) ) ) ) ;;
assert (a =. 6.4);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (1.800000) (8.200000) ) ( minus ( wartosc_dokladnosc (2.800000) (0.000000) ) ( wartosc_od_do (-6.200000) (0.000000) ) ) ) ;;
assert (a =. 11.07756);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-8.800000) ) ( wartosc_dokladnosc (-2.000000) (0.800000) ) ) ;;
assert (a =. 17.6);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_od_do (-8.800000) (1.600000) ) ) ;;
assert (a =. 7.60000000000000053);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (3.600000) ) ) (-1.800000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-6.600000) ) ( wartosc_dokladna (-0.800000) ) ) ;;
assert (a =. 11.25);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-5.600000) (7.400000) ) ( razy ( wartosc_od_do (-8.600000) (6.400000) ) ( wartosc_dokladnosc (-3.400000) (6.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-5.400000) (4.600000) ) ( wartosc_od_do (-6.600000) (7.800000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (6.200000) ) ( plus ( wartosc_dokladnosc (5.400000) (8.000000) ) ( wartosc_od_do (-8.400000) (0.000000) ) ) ) ;;
assert (a =. -3.80000000000000027);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. -6.24);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (5.800000) ) ( wartosc_od_do (5.000000) (5.600000) ) ) ;;
assert (a =. -47.8566);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (7.000000) (9.400000) ) ( wartosc_dokladna (0.800000) ) ) ( podzielic ( wartosc_od_do (-4.200000) (0.000000) ) ( wartosc_dokladnosc (-6.800000) (0.600000) ) ) ) ;;
assert (a =. 7.08931234465617166);;
let a = sr_wartosc ( podzielic ( minus ( minus ( wartosc_od_do (-3.600000) (-2.600000) ) ( wartosc_dokladnosc (9.400000) (0.000000) ) ) ( wartosc_od_do (-3.600000) (4.800000) ) ) ( wartosc_dokladnosc (4.000000) (3.400000) ) ) ;;
assert (a =. -3.3187865172138995);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (-4.800000) ) ( wartosc_od_do (-9.200000) (2.600000) ) ) ( wartosc_od_do (-4.400000) (0.000000) ) ) (6.200000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_od_do (-2.800000) (7.200000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (8.400000) ) ( wartosc_od_do (3.000000) (7.200000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (8.600000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -1.70000000000000018);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (8.200000) ) ( wartosc_od_do (0.000000) (8.600000) ) ) ;;
assert (a =. -8.6);;
let a = max_wartosc ( razy ( wartosc_od_do (4.400000) (6.600000) ) ( podzielic ( wartosc_od_do (-8.000000) (0.200000) ) ( minus ( podzielic ( wartosc_dokladna (-3.800000) ) ( wartosc_dokladna (-2.800000) ) ) ( podzielic ( wartosc_dokladna (-5.400000) ) ( minus ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (5.200000) ) ) ( wartosc_dokladnosc (-7.000000) (7.000000) ) ) ( wartosc_od_do (-1.800000) (-0.200000) ) ) ) ) ) ) ;;
assert (a =. 0.680969418111142);;
let a = in_wartosc ( minus ( wartosc_od_do (-7.400000) (-2.200000) ) ( wartosc_od_do (-5.600000) (-2.800000) ) ) (-7.800000);;
assert (a = false);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-6.200000) (1.800000) ) ) ( wartosc_od_do (-2.200000) (0.000000) ) ) ;;
assert (a =. -12.8884);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.600000) ) ( podzielic ( wartosc_od_do (-8.800000) (-4.800000) ) ( wartosc_dokladna (-7.200000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-1.400000) ) ) ) ;;
assert (a =. -1.4);;
let a = in_wartosc ( razy ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladnosc (-10.000000) (0.800000) ) ) (8.200000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.000000) (8.800000) ) ( wartosc_dokladna (8.200000) ) ) ;;
assert (a =. -12.2);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladnosc (9.000000) (9.400000) ) ( wartosc_dokladnosc (4.200000) (1.800000) ) ) ( wartosc_dokladnosc (2.800000) (0.000000) ) ) (-2.800000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-2.400000) (4.000000) ) ( wartosc_dokladnosc (0.200000) (6.600000) ) ) ;;
assert (a =. -2.3092);;
let a = max_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (2.200000) ) ( razy ( wartosc_dokladnosc (9.600000) (5.600000) ) ( wartosc_od_do (5.400000) (7.000000) ) ) ) ( wartosc_dokladnosc (7.600000) (5.600000) ) ) ( podzielic ( wartosc_od_do (1.200000) (8.200000) ) ( wartosc_dokladna (9.200000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_od_do (-2.600000) (0.000000) ) ( wartosc_od_do (-7.000000) (-3.800000) ) ) ;;
assert (a =. -9.6);;
let a = in_wartosc ( plus ( minus ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.400000) (-1.200000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-5.400000) (1.400000) ) ) ( wartosc_od_do (-10.000000) (5.800000) ) ) (9.600000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-5.800000) (9.200000) ) ( wartosc_od_do (1.400000) (5.400000) ) ) (4.200000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (8.400000) ) ( wartosc_dokladna (-1.200000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_od_do (-2.800000) (0.000000) ) ( plus ( wartosc_dokladna (4.200000) ) ( wartosc_od_do (0.000000) (3.200000) ) ) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) (2.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.400000) (0.000000) ) ( wartosc_dokladnosc (0.200000) (9.400000) ) ) ;;
assert (a =. 0.0800000000000000155);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.800000) (0.000000) ) ( wartosc_od_do (-1.400000) (5.200000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.600000) (-1.000000) ) ) ( podzielic ( wartosc_dokladna (1.200000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( razy ( podzielic ( wartosc_dokladnosc (-3.400000) (0.000000) ) ( wartosc_od_do (0.200000) (1.400000) ) ) ( razy ( podzielic ( wartosc_od_do (-9.400000) (-7.000000) ) ( wartosc_od_do (1.800000) (7.800000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-0.800000) ) ) ) (-1.200000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (-1.800000) ) ) ;;
assert (a =. -2.8);;
let a = min_wartosc ( razy ( wartosc_dokladna (4.800000) ) ( wartosc_dokladnosc (0.000000) (0.200000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (4.600000) ) ( wartosc_dokladnosc (1.800000) (0.000000) ) ) (2.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.200000) (0.000000) ) ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( razy ( wartosc_od_do (-9.800000) (4.200000) ) ( wartosc_od_do (-5.800000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.600000) (0.000000) ) ( wartosc_od_do (0.600000) (0.800000) ) ) ;;
assert (a =. -6.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.400000) ) ( wartosc_dokladna (-8.800000) ) ) ;;
assert (a =. -0.159090909090909088);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-4.200000) ) ( wartosc_dokladna (7.200000) ) ) ;;
assert (a =. -11.4);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (0.400000) ) ( wartosc_dokladnosc (3.600000) (3.400000) ) ) ( podzielic ( podzielic ( wartosc_dokladna (9.600000) ) ( wartosc_od_do (-2.000000) (5.600000) ) ) ( wartosc_od_do (-3.600000) (5.400000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.200000) (0.000000) ) ( wartosc_od_do (-3.600000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-8.800000) (8.400000) ) ( wartosc_od_do (-3.600000) (0.000000) ) ) ( wartosc_dokladna (1.200000) ) ) ;;
assert (a =. 1.86592592592592621);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-5.200000) (0.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (5.000000) ) ( wartosc_dokladna (8.800000) ) ) ) (-8.600000);;
assert (a = false);;
let a = sr_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (-7.200000) (7.800000) ) ( wartosc_od_do (-6.600000) (8.800000) ) ) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.800000) ) ( podzielic ( podzielic ( podzielic ( plus ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (0.000000) (6.200000) ) ) ( wartosc_dokladna (-6.200000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladna (-1.200000) ) ) ( wartosc_dokladnosc (-9.600000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-1.200000) (6.400000) ) ( wartosc_od_do (-4.400000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (8.400000) (0.000000) ) ( razy ( wartosc_od_do (-9.400000) (6.200000) ) ( podzielic ( plus ( wartosc_od_do (-9.200000) (-7.400000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-8.000000) (0.600000) ) ) ) ) (-1.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-1.800000) ) ( wartosc_dokladnosc (-6.000000) (8.200000) ) ) (2.600000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (6.600000) (9.400000) ) ( wartosc_dokladnosc (-0.800000) (0.400000) ) ) ;;
assert (a =. 7.3968);;
let a = min_wartosc ( plus ( wartosc_od_do (-1.200000) (6.200000) ) ( wartosc_dokladnosc (-6.400000) (8.200000) ) ) ;;
assert (a =. -8.1248);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (8.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( razy ( minus ( wartosc_dokladna (-0.800000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (3.200000) (8.400000) ) ) ( wartosc_od_do (0.600000) (4.800000) ) ) ;;
assert (a =. -3.16000000000000059);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (-9.600000) (-5.800000) ) ) ;;
assert (a =. -0.689655172413793149);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (2.200000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -2.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-9.800000) (0.600000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (6.400000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.600000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (7.600000) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (4.800000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.200000) ) ( wartosc_dokladna (-1.200000) ) ) ;;
assert (a =. 1.2);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.200000) (3.800000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-4.200000) ) ( wartosc_od_do (-5.200000) (-5.200000) ) ) ;;
assert (a =. 21.8400000000000034);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.600000) (-7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-7.200000) ) ( podzielic ( wartosc_dokladnosc (0.400000) (0.000000) ) ( wartosc_dokladnosc (5.600000) (1.000000) ) ) ) ;;
assert (a =. -99.7919999999999874);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (3.200000) (0.000000) ) ( minus ( razy ( wartosc_od_do (-0.400000) (5.800000) ) ( wartosc_dokladnosc (-4.800000) (6.600000) ) ) ( wartosc_dokladnosc (6.000000) (6.400000) ) ) ) ) ;;
assert (a =. -0.492638400864771564);;
let a = min_wartosc ( minus ( wartosc_dokladna (-5.200000) ) ( podzielic ( wartosc_dokladnosc (5.400000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ;;
assert (a =. -4.525);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (9.200000) (4.600000) ) ( wartosc_dokladna (-9.400000) ) ) ;;
assert (a =. -90.45808);;
let a = min_wartosc ( podzielic ( wartosc_od_do (6.400000) (8.400000) ) ( wartosc_od_do (-4.200000) (0.400000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladna (3.400000) ) ( wartosc_dokladnosc (5.600000) (0.200000) ) ) ( minus ( plus ( wartosc_od_do (-2.600000) (4.200000) ) ( minus ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (8.800000) (6.800000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (-1.600000) ) ) ) (-2.400000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (-2.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -2.8);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (4.400000) ) ( podzielic ( podzielic ( wartosc_dokladna (-9.800000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( minus ( wartosc_dokladna (-0.800000) ) ( wartosc_dokladna (8.000000) ) ) ) ) ;;
assert (a =. -7.90204081632653);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (6.600000) ) ( wartosc_dokladnosc (-1.000000) (3.400000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.800000) (-0.600000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 0.425);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (2.800000) (0.000000) ) ( wartosc_dokladna (5.200000) ) ) ;;
assert (a =. -2.40000000000000036);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-6.600000) (1.000000) ) ( wartosc_od_do (-5.800000) (4.800000) ) ) ( wartosc_od_do (-3.400000) (6.800000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (9.600000) ) ( wartosc_dokladnosc (0.000000) (8.600000) ) ) (-4.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-6.400000) (6.000000) ) ( podzielic ( wartosc_od_do (0.000000) (9.200000) ) ( podzielic ( podzielic ( wartosc_od_do (-4.000000) (9.600000) ) ( minus ( wartosc_dokladna (5.200000) ) ( wartosc_dokladnosc (4.800000) (9.200000) ) ) ) ( wartosc_od_do (-3.800000) (1.400000) ) ) ) ) ( minus ( wartosc_dokladnosc (0.000000) (6.800000) ) ( wartosc_dokladnosc (0.000000) (9.600000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.600000) (8.400000) ) ( wartosc_od_do (-9.800000) (-5.600000) ) ) ;;
assert (a =. -1.37779591836734694);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.200000) (6.800000) ) ( minus ( razy ( wartosc_dokladnosc (-4.600000) (8.200000) ) ( wartosc_dokladna (8.400000) ) ) ( wartosc_od_do (-9.800000) (7.200000) ) ) ) (-2.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( razy ( wartosc_od_do (0.000000) (8.600000) ) ( podzielic ( podzielic ( minus ( wartosc_dokladna (-9.600000) ) ( wartosc_dokladna (-9.400000) ) ) ( wartosc_dokladna (0.800000) ) ) ( wartosc_dokladnosc (3.800000) (8.200000) ) ) ) ( wartosc_dokladna (4.800000) ) ) ( wartosc_od_do (-9.200000) (8.200000) ) ) ;;
assert (a =. -9.32840175056377241);;
let a = max_wartosc ( minus ( wartosc_od_do (-0.400000) (0.000000) ) ( minus ( razy ( wartosc_dokladna (8.400000) ) ( wartosc_dokladnosc (0.000000) (6.400000) ) ) ( wartosc_dokladnosc (-8.800000) (4.200000) ) ) ) ;;
assert (a =. -8.4304);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.400000) ) ( wartosc_dokladnosc (-8.800000) (7.800000) ) ) ;;
assert (a =. -0.0864000000000011426);;
let a = max_wartosc ( minus ( wartosc_dokladna (-6.800000) ) ( minus ( wartosc_dokladna (5.800000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ) ;;
assert (a =. -12.6);;
let a = sr_wartosc ( plus ( plus ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-8.200000) (2.000000) ) ( razy ( podzielic ( wartosc_od_do (6.400000) (6.800000) ) ( wartosc_dokladna (3.800000) ) ) ( wartosc_od_do (-2.000000) (5.800000) ) ) ) ( wartosc_dokladna (0.600000) ) ) ) ( minus ( wartosc_dokladna (-7.400000) ) ( wartosc_od_do (-4.600000) (0.000000) ) ) ) ( wartosc_dokladna (1.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-5.000000) (0.600000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( podzielic ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.200000) (7.200000) ) ) ( wartosc_od_do (-1.600000) (3.200000) ) ) ( wartosc_od_do (0.000000) (9.400000) ) ) ( plus ( minus ( wartosc_dokladnosc (2.000000) (9.400000) ) ( wartosc_dokladna (9.000000) ) ) ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (1.600000) ) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (2.200000) ) ( minus ( razy ( wartosc_dokladnosc (-3.000000) (3.200000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( podzielic ( wartosc_od_do (1.000000) (1.200000) ) ( wartosc_dokladna (0.000000) ) ) ) ) (-5.200000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-0.600000) (-0.400000) ) ) ( wartosc_dokladna (-6.600000) ) ) ;;
assert (a =. -6.6);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (5.200000) (5.600000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_od_do (-1.400000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (2.400000) (1.800000) ) ( wartosc_dokladna (-4.000000) ) ) (-8.400000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (7.600000) (4.200000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 7.6);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladnosc (0.400000) (9.600000) ) ( wartosc_dokladnosc (-8.600000) (9.400000) ) ) ( wartosc_od_do (-5.800000) (3.200000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( minus ( wartosc_dokladna (-2.600000) ) ( wartosc_od_do (0.000000) (8.400000) ) ) ;;
assert (a =. -11.);;
let a = in_wartosc ( plus ( wartosc_od_do (-7.800000) (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (0.400000) ) ( wartosc_dokladna (3.200000) ) ) ( wartosc_dokladnosc (1.800000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_dokladna (-5.800000) ) ( wartosc_od_do (4.600000) (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-5.400000) (4.400000) ) ( wartosc_dokladnosc (-5.600000) (0.000000) ) ) ;;
assert (a =. 0.921857142857142819);;
let a = min_wartosc ( razy ( wartosc_od_do (-8.400000) (7.800000) ) ( minus ( wartosc_dokladnosc (7.400000) (3.400000) ) ( wartosc_od_do (-0.400000) (6.800000) ) ) ) ;;
assert (a =. -67.6334400000000073);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-4.800000) (9.800000) ) ( plus ( podzielic ( razy ( wartosc_od_do (-8.600000) (1.200000) ) ( wartosc_dokladna (1.600000) ) ) ( wartosc_dokladna (2.000000) ) ) ( razy ( razy ( wartosc_od_do (-2.600000) (0.600000) ) ( wartosc_dokladnosc (0.000000) (2.200000) ) ) ( podzielic ( wartosc_dokladnosc (-8.600000) (0.000000) ) ( minus ( wartosc_od_do (-9.600000) (0.800000) ) ( wartosc_dokladna (2.600000) ) ) ) ) ) ) ;;
assert (a =. -7.76);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.200000) (0.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (-9.400000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_od_do (-7.600000) (0.000000) ) ) ) ;;
assert (a =. -5.96315789473684177);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-7.200000) (3.200000) ) ( wartosc_dokladnosc (0.000000) (8.400000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-5.400000) (7.800000) ) ) (-8.400000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_od_do (-0.800000) (0.000000) ) ) ( wartosc_dokladnosc (7.400000) (3.200000) ) ) ) ;;
assert (a =. 0.390886754523118107);;
let a = in_wartosc ( podzielic ( plus ( plus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (-1.400000) (2.200000) ) ) ( wartosc_dokladna (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-7.000000) (3.800000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-0.600000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -0.199999999999999983);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (6.200000) (0.000000) ) ( wartosc_dokladnosc (2.800000) (2.800000) ) ) ( podzielic ( razy ( wartosc_dokladnosc (-5.800000) (7.800000) ) ( wartosc_dokladnosc (-1.000000) (4.400000) ) ) ( wartosc_dokladna (-5.600000) ) ) ) ;;
assert (a =. 1.36516000823045269);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-0.200000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (2.200000) (1.600000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (4.600000) ) ( wartosc_od_do (-8.400000) (2.400000) ) ) ;;
assert (a =. 13.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (2.600000) (6.400000) ) ( wartosc_dokladnosc (-4.600000) (3.400000) ) ) ;;
assert (a =. -0.993452779238887196);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (9.200000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-5.400000) (0.800000) ) ( wartosc_dokladnosc (9.400000) (0.000000) ) ) ;;
assert (a =. -14.8432);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-4.400000) (0.600000) ) ( plus ( wartosc_od_do (0.000000) (8.800000) ) ( podzielic ( wartosc_dokladna (3.400000) ) ( wartosc_dokladnosc (-5.400000) (0.400000) ) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (6.800000) ) ( wartosc_dokladna (9.800000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-5.400000) (2.200000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (8.200000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (6.600000) (0.400000) ) ( wartosc_dokladna (1.600000) ) ) ;;
assert (a =. 8.2);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-5.800000) (2.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 1.31599999999999984);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (6.600000) ) ) (7.600000);;
assert (a = false);;
let a = max_wartosc ( plus ( razy ( podzielic ( wartosc_dokladna (-6.600000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (6.600000) (4.000000) ) ) ( podzielic ( wartosc_od_do (3.000000) (4.400000) ) ( razy ( wartosc_od_do (-9.200000) (3.200000) ) ( wartosc_od_do (-9.600000) (2.800000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (3.600000) (7.600000) ) ( wartosc_dokladna (4.200000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.800000) ) ) ) (6.200000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.800000) ) ( wartosc_dokladnosc (-7.400000) (5.000000) ) ) ;;
assert (a =. 0.360360360360360343);;
let a = min_wartosc ( podzielic ( minus ( minus ( podzielic ( wartosc_dokladnosc (7.800000) (3.400000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( wartosc_dokladna (6.600000) ) ( wartosc_dokladna (-3.000000) ) ) ) ( podzielic ( minus ( wartosc_od_do (1.800000) (5.400000) ) ( wartosc_dokladnosc (-9.600000) (0.000000) ) ) ( wartosc_od_do (-5.800000) (-3.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-7.400000) (-1.000000) ) ( wartosc_dokladna (0.400000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (-6.400000) (2.200000) ) ( wartosc_dokladna (1.600000) ) ) ( wartosc_dokladnosc (-8.600000) (7.000000) ) ) ;;
assert (a =. 4.89999999999999947);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (6.400000) ) ( plus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (-9.600000) ) ( wartosc_dokladnosc (0.000000) (6.600000) ) ) ) ) (3.600000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.400000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 2.59999999999999964);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (3.600000) ) ( podzielic ( wartosc_dokladna (6.800000) ) ( wartosc_dokladna (-4.400000) ) ) ) ( plus ( wartosc_od_do (-2.000000) (5.600000) ) ( wartosc_dokladna (0.000000) ) ) ) (-4.600000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (9.400000) ) ( plus ( wartosc_od_do (-5.800000) (0.000000) ) ( wartosc_dokladna (-5.800000) ) ) ) (3.400000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladnosc (2.200000) (3.800000) ) ( wartosc_od_do (-9.200000) (-3.400000) ) ) ( wartosc_dokladnosc (-6.200000) (3.200000) ) ) ;;
assert (a =. 1.12461865466366584);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (8.200000) (9.200000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -80.5895999999999901);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.800000) (-0.200000) ) ( plus ( razy ( podzielic ( wartosc_dokladnosc (-1.800000) (7.000000) ) ( razy ( wartosc_od_do (-5.600000) (0.000000) ) ( plus ( wartosc_dokladnosc (1.600000) (0.400000) ) ( razy ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (8.400000) ) ( wartosc_od_do (-6.400000) (0.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (8.400000) ) ) ) ) ) ( wartosc_dokladnosc (4.200000) (0.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.400000) ) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-9.400000) ) ( wartosc_dokladnosc (-1.600000) (9.200000) ) ) (-7.200000);;
assert (a = false);;
let a = max_wartosc ( minus ( plus ( razy ( wartosc_dokladnosc (-9.600000) (3.800000) ) ( razy ( wartosc_dokladnosc (5.000000) (4.800000) ) ( wartosc_od_do (0.000000) (7.400000) ) ) ) ( wartosc_dokladna (6.800000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 6.8);;
let a = max_wartosc ( razy ( wartosc_dokladna (-3.400000) ) ( wartosc_dokladna (-7.200000) ) ) ;;
assert (a =. 24.48);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladna (5.800000) ) ( wartosc_od_do (3.400000) (8.000000) ) ) ( podzielic ( minus ( wartosc_dokladnosc (-2.600000) (9.200000) ) ( wartosc_dokladna (7.400000) ) ) ( wartosc_od_do (-1.600000) (4.600000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.200000) (3.200000) ) ( wartosc_od_do (-7.200000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (1.200000) ) ) ;;
assert (a =. 8.4);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (8.600000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (0.800000) (8.200000) ) ) ;;
assert (a =. -41.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (8.800000) ) ( wartosc_od_do (-2.800000) (7.000000) ) ) ;;
assert (a =. 7.);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (-5.800000) (-0.400000) ) ( wartosc_dokladnosc (0.000000) (2.800000) ) ) ( razy ( wartosc_dokladnosc (0.600000) (0.800000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.400000) (7.400000) ) ( wartosc_dokladna (3.200000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (2.400000) ) ( wartosc_dokladnosc (0.800000) (6.200000) ) ) (4.400000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-9.200000) (-4.000000) ) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. -1.5);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.200000) (9.200000) ) ( podzielic ( minus ( wartosc_od_do (-1.400000) (-1.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (8.200000) ) ) ) ( minus ( wartosc_dokladnosc (-5.400000) (9.200000) ) ( wartosc_od_do (-7.800000) (-3.000000) ) ) ) ) (3.600000);;
assert (a = true);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (4.400000) (6.000000) ) ( wartosc_od_do (1.400000) (3.000000) ) ) ( wartosc_od_do (0.400000) (7.000000) ) ) ;;
assert (a =. -1.34495238095238068);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (7.200000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (6.200000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (5.800000) (0.000000) ) ( wartosc_od_do (-5.200000) (0.000000) ) ) ;;
assert (a =. 8.4);;
let a = min_wartosc ( podzielic ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (2.000000) (2.600000) ) ) ( podzielic ( plus ( wartosc_dokladnosc (-6.400000) (9.400000) ) ( wartosc_dokladnosc (3.000000) (7.200000) ) ) ( wartosc_od_do (-2.000000) (5.000000) ) ) ) ;;
assert (a =. -5.03407682775712573);;
let a = in_wartosc ( razy ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-7.600000) (5.600000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.400000) ) ( wartosc_dokladna (1.400000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.600000) (3.600000) ) ( podzielic ( wartosc_dokladna (-3.200000) ) ( podzielic ( wartosc_od_do (-1.600000) (3.000000) ) ( podzielic ( wartosc_od_do (-5.200000) (-2.600000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) (0.800000);;
assert (a = false);;
let a = max_wartosc ( plus ( podzielic ( podzielic ( wartosc_dokladnosc (-2.800000) (1.600000) ) ( wartosc_dokladnosc (-2.800000) (6.800000) ) ) ( wartosc_od_do (-7.600000) (7.600000) ) ) ( razy ( wartosc_dokladnosc (5.600000) (0.000000) ) ( wartosc_od_do (-6.800000) (2.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-4.200000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. -0.466666666666666674);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (0.200000) ) ( wartosc_dokladna (-0.200000) ) ) ( wartosc_od_do (-1.800000) (3.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (8.800000) ) ( podzielic ( wartosc_dokladnosc (3.000000) (8.400000) ) ( wartosc_od_do (-6.800000) (-2.800000) ) ) ) (-4.200000);;
assert (a = false);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladnosc (-0.600000) (3.200000) ) ( wartosc_dokladnosc (-1.000000) (9.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -1.49080000000000013);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (9.600000) ) ) ( minus ( wartosc_dokladnosc (4.200000) (4.600000) ) ( wartosc_od_do (1.600000) (8.400000) ) ) ) ;;
assert (a =. 72.9271200000000164);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-4.200000) (0.000000) ) ( wartosc_dokladnosc (-4.800000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.200000) ) ( wartosc_dokladnosc (0.000000) (5.800000) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( razy ( minus ( wartosc_dokladnosc (6.400000) (6.800000) ) ( minus ( wartosc_dokladnosc (-1.400000) (9.000000) ) ( wartosc_od_do (-2.200000) (5.400000) ) ) ) ( wartosc_dokladna (-7.600000) ) ) ( wartosc_od_do (-8.800000) (4.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( razy ( razy ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( razy ( wartosc_dokladna (6.200000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-9.000000) (8.400000) ) ) ) ( wartosc_dokladnosc (4.800000) (8.400000) ) ) ( podzielic ( podzielic ( wartosc_od_do (-9.800000) (2.400000) ) ( wartosc_od_do (-0.400000) (0.000000) ) ) ( razy ( podzielic ( wartosc_dokladnosc (-9.200000) (3.000000) ) ( wartosc_od_do (0.000000) (3.200000) ) ) ( wartosc_dokladna (4.600000) ) ) ) ) ( wartosc_dokladnosc (6.600000) (2.600000) ) ) ;;
assert (a =. 6.4284);;
let a = in_wartosc ( plus ( wartosc_od_do (-6.200000) (5.800000) ) ( wartosc_od_do (-5.000000) (6.400000) ) ) (-2.200000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (4.400000) ) ( wartosc_dokladna (-6.600000) ) ) ( wartosc_dokladnosc (-2.200000) (8.000000) ) ) ;;
assert (a =. 1.08695652173913);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (5.400000) ) ( wartosc_dokladnosc (2.200000) (3.400000) ) ) (8.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (2.200000) ) ) ( wartosc_dokladna (3.400000) ) ) (1.400000);;
assert (a = false);;
let a = sr_wartosc ( minus ( podzielic ( podzielic ( wartosc_dokladnosc (-3.000000) (7.400000) ) ( wartosc_dokladnosc (4.600000) (7.600000) ) ) ( plus ( wartosc_od_do (-9.800000) (9.600000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-7.000000) (2.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (5.000000) (8.000000) ) ( plus ( podzielic ( plus ( wartosc_dokladnosc (-3.000000) (5.800000) ) ( wartosc_dokladnosc (0.000000) (3.200000) ) ) ( wartosc_od_do (0.400000) (9.000000) ) ) ( wartosc_od_do (1.800000) (9.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-0.800000) ) ) (-6.600000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (9.600000) ) ( podzielic ( wartosc_od_do (0.000000) (6.600000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-5.400000) (5.000000) ) ( razy ( minus ( wartosc_dokladnosc (-3.800000) (8.200000) ) ( wartosc_dokladnosc (-6.400000) (5.200000) ) ) ( wartosc_dokladnosc (-3.200000) (1.600000) ) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_od_do (-1.800000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (2.600000) ) ) ;;
assert (a =. 3.078);;
let a = min_wartosc ( razy ( wartosc_dokladna (-0.800000) ) ( wartosc_dokladnosc (5.000000) (6.000000) ) ) ;;
assert (a =. -4.24);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.600000) ) ( wartosc_dokladnosc (3.800000) (0.200000) ) ) ;;
assert (a =. -2.52632589477726377);;
let a = min_wartosc ( minus ( wartosc_od_do (4.200000) (6.600000) ) ( wartosc_dokladnosc (0.000000) (1.200000) ) ) ;;
assert (a =. 4.2);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.400000) (6.200000) ) ( wartosc_dokladnosc (0.800000) (0.000000) ) ) ;;
assert (a =. -11.75);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.800000) (0.000000) ) ( wartosc_dokladnosc (-2.400000) (4.400000) ) ) (2.200000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-9.400000) (3.000000) ) ) (-2.600000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_dokladna (-0.400000) ) ( minus ( wartosc_dokladna (-1.200000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ) (5.200000);;
assert (a = false);;
let a = sr_wartosc ( plus ( podzielic ( plus ( wartosc_dokladna (-5.600000) ) ( wartosc_od_do (5.600000) (7.200000) ) ) ( wartosc_od_do (-6.800000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-7.200000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_dokladna (-0.400000) ) ( wartosc_od_do (-7.600000) (8.800000) ) ) ;;
assert (a =. 8.4);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-5.400000) (8.600000) ) ( podzielic ( wartosc_dokladnosc (4.200000) (1.000000) ) ( wartosc_od_do (-4.200000) (0.000000) ) ) ) ( wartosc_dokladna (7.200000) ) ) ;;
assert (a =. 0.822727272727272863);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.800000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (8.400000) ) ( razy ( wartosc_dokladnosc (0.000000) (4.600000) ) ( wartosc_od_do (-4.800000) (-3.200000) ) ) ) (7.800000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.600000) (0.000000) ) ( wartosc_dokladnosc (-7.400000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-4.200000) (-1.000000) ) ( wartosc_dokladnosc (-3.200000) (0.000000) ) ) ;;
assert (a =. 0.600000000000000089);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (-1.600000) ) ) (-2.400000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (1.800000) ) ( wartosc_od_do (-0.800000) (2.600000) ) ) ( wartosc_dokladnosc (0.000000) (7.400000) ) ) (-9.800000);;
assert (a = false);;
let a = sr_wartosc ( plus ( razy ( wartosc_dokladna (-6.600000) ) ( plus ( wartosc_od_do (0.000000) (8.200000) ) ( plus ( wartosc_dokladnosc (0.000000) (4.200000) ) ( wartosc_dokladnosc (-3.400000) (9.400000) ) ) ) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) ;;
assert (a =. -4.61999999999999922);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (3.400000) ) ( wartosc_od_do (-6.200000) (7.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( podzielic ( plus ( wartosc_od_do (-9.600000) (-6.600000) ) ( wartosc_dokladnosc (0.000000) (2.400000) ) ) ( razy ( wartosc_dokladnosc (-2.000000) (9.200000) ) ( wartosc_dokladnosc (0.400000) (8.200000) ) ) ) ( wartosc_dokladnosc (-3.000000) (7.200000) ) ) ;;
assert (a =. -5.1711065373708);;
let a = min_wartosc ( plus ( wartosc_od_do (-9.000000) (3.200000) ) ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (0.000000) (3.800000) ) ) ) ;;
assert (a =. -3.);;
let a = min_wartosc ( razy ( wartosc_dokladna (6.800000) ) ( wartosc_dokladnosc (5.000000) (6.200000) ) ) ;;
assert (a =. 31.892000000000003);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-6.400000) (0.000000) ) ( minus ( wartosc_dokladna (-8.200000) ) ( wartosc_od_do (-7.200000) (6.400000) ) ) ) ;;
assert (a =. 6.40000000000000568);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (5.200000) ) ( wartosc_od_do (-3.600000) (0.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (2.200000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (-6.200000) (0.000000) ) ( wartosc_od_do (1.400000) (5.800000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (-0.800000) (6.600000) ) ( wartosc_dokladnosc (0.000000) (4.400000) ) ) ;;
assert (a =. 6.6);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (4.600000) (6.800000) ) ( plus ( podzielic ( podzielic ( wartosc_od_do (-9.200000) (0.000000) ) ( wartosc_od_do (-8.600000) (-2.400000) ) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_od_do (-8.600000) (0.000000) ) ) ) ( razy ( wartosc_dokladnosc (0.000000) (4.200000) ) ( razy ( wartosc_dokladnosc (-8.800000) (4.600000) ) ( wartosc_dokladna (-8.800000) ) ) ) ) (8.600000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 2.5);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.400000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.54);;
let a = max_wartosc ( plus ( plus ( wartosc_od_do (-4.600000) (0.000000) ) ( minus ( wartosc_dokladna (3.800000) ) ( wartosc_od_do (0.000000) (1.400000) ) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (6.400000) ) ( wartosc_dokladnosc (-1.200000) (0.000000) ) ) ) ) ;;
assert (a =. 3.8);;
let a = max_wartosc ( minus ( wartosc_dokladna (-0.800000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -6.8);;
let a = min_wartosc ( plus ( minus ( wartosc_od_do (-9.400000) (8.800000) ) ( wartosc_dokladnosc (-0.200000) (6.400000) ) ) ( razy ( wartosc_od_do (0.000000) (1.800000) ) ( razy ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (4.200000) ) ) ) ) ;;
assert (a =. -9.2128);;
let a = in_wartosc ( minus ( razy ( wartosc_od_do (-9.800000) (0.000000) ) ( wartosc_od_do (-8.400000) (0.000000) ) ) ( wartosc_od_do (-5.400000) (5.400000) ) ) (8.800000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (7.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 7.6);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) (-9.200000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (3.200000) ) ( wartosc_dokladna (2.800000) ) ) ;;
assert (a =. -5.77919999999999945);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.400000) ) ( wartosc_dokladnosc (9.000000) (0.400000) ) ) ;;
assert (a =. 0.301204819277108404);;
let a = max_wartosc ( razy ( wartosc_dokladna (-9.800000) ) ( wartosc_dokladna (4.400000) ) ) ;;
assert (a =. -43.1200000000000045);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (8.400000) (4.200000) ) ( wartosc_od_do (-9.800000) (-7.200000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-3.200000) ) ( podzielic ( wartosc_od_do (-6.800000) (0.000000) ) ( wartosc_od_do (-7.600000) (-3.400000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (2.600000) (2.600000) ) ( wartosc_od_do (5.400000) (6.600000) ) ) ;;
assert (a =. 0.383696969696969703);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (5.800000) (2.200000) ) ( wartosc_od_do (-7.600000) (-7.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (4.400000) (5.200000) ) ( minus ( wartosc_od_do (1.200000) (5.600000) ) ( wartosc_dokladnosc (2.600000) (8.800000) ) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.600000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.800000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 9.8);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-9.600000) (9.400000) ) ( wartosc_od_do (5.000000) (7.800000) ) ) ;;
assert (a =. -3.19999999999999973);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (-7.200000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-10.000000) (-8.800000) ) ) ;;
assert (a =. 5.80000000000000071);;
let a = in_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( podzielic ( wartosc_od_do (-4.200000) (0.000000) ) ( wartosc_dokladna (7.200000) ) ) ) (-8.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-0.400000) (0.000000) ) ( wartosc_od_do (-9.000000) (-5.800000) ) ) (9.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-2.400000) (4.800000) ) ( wartosc_od_do (-1.800000) (0.000000) ) ) ;;
assert (a =. -2.28479999999999972);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.400000) ) ( wartosc_od_do (-5.400000) (-1.800000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (2.600000) (5.000000) ) ( wartosc_dokladnosc (-3.800000) (0.600000) ) ) ;;
assert (a =. -10.436244);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-6.600000) ) ) ;;
assert (a =. -6.6);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladnosc (-0.400000) (8.800000) ) ) ;;
assert (a =. -0.3648);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( podzielic ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-3.400000) ) ) ( wartosc_dokladnosc (-3.200000) (0.000000) ) ) ( wartosc_dokladnosc (9.200000) (3.400000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-3.600000) (6.400000) ) ( wartosc_dokladnosc (-1.200000) (7.400000) ) ) ;;
assert (a =. 3.030804686463072);;
let a = min_wartosc ( plus ( wartosc_dokladna (-3.400000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.600000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (1.600000) (7.000000) ) ( wartosc_dokladna (-0.600000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (1.800000) ) ( wartosc_dokladnosc (-9.600000) (0.000000) ) ) ;;
assert (a =. -0.1875);;
let a = in_wartosc ( razy ( wartosc_dokladna (-8.800000) ) ( wartosc_dokladnosc (-2.800000) (8.400000) ) ) (-6.200000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (1.800000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (8.200000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (-5.800000) (8.800000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 1.50000000000000044);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladnosc (-8.600000) (6.800000) ) ( wartosc_dokladna (-6.600000) ) ) ( wartosc_dokladnosc (6.400000) (9.400000) ) ) (5.600000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-5.800000) (5.200000) ) ( wartosc_dokladna (7.600000) ) ) ;;
assert (a =. -0.802842105263157801);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (4.000000) (3.000000) ) ( wartosc_od_do (-2.800000) (0.000000) ) ) ;;
assert (a =. 2.6);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.600000) ) ( podzielic ( wartosc_od_do (-8.600000) (9.400000) ) ( wartosc_dokladnosc (5.600000) (0.000000) ) ) ) (-4.200000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (2.200000) ) ) ;;
assert (a =. -0.45454545454545453);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-6.200000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-0.800000) (5.800000) ) ( wartosc_dokladnosc (-0.200000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (8.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.400000) (0.000000) ) ( wartosc_od_do (-7.200000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (6.200000) (7.200000) ) ( razy ( wartosc_dokladna (6.400000) ) ( minus ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (3.600000) (5.200000) ) ) ( plus ( wartosc_dokladna (-7.600000) ) ( wartosc_dokladnosc (7.600000) (3.200000) ) ) ) ) ) ;;
assert (a =. 0.431851607523761893);;
let a = max_wartosc ( plus ( razy ( wartosc_dokladnosc (6.600000) (9.600000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (-8.600000) ) ) ;;
assert (a =. 27.5679999999999907);;
let a = min_wartosc ( razy ( plus ( wartosc_dokladna (1.400000) ) ( wartosc_od_do (-4.400000) (2.800000) ) ) ( wartosc_od_do (-4.600000) (-0.200000) ) ) ;;
assert (a =. -19.3199999999999967);;
let a = max_wartosc ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-5.400000) ) ) ;;
assert (a =. -14.4);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.200000) (9.400000) ) ( wartosc_dokladna (7.800000) ) ) ;;
assert (a =. -1.05128205128205132);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (1.600000) ) ( wartosc_od_do (-3.800000) (9.400000) ) ) ;;
assert (a =. -11.432);;
let a = max_wartosc ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-0.200000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( minus ( wartosc_od_do (-8.200000) (-7.400000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 1.80000000000000071);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (6.400000) (9.400000) ) ( plus ( wartosc_od_do (-8.000000) (4.200000) ) ( wartosc_dokladnosc (4.800000) (0.000000) ) ) ) ( wartosc_dokladnosc (5.800000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( podzielic ( podzielic ( minus ( wartosc_dokladna (9.600000) ) ( wartosc_od_do (-4.800000) (2.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (4.800000) (3.600000) ) ) ( wartosc_dokladna (0.000000) ) ) (-9.600000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (1.600000) ) ( wartosc_dokladnosc (2.400000) (2.400000) ) ) ;;
assert (a =. 1.96607999999999983);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-5.400000) (3.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( razy ( podzielic ( podzielic ( wartosc_od_do (-7.200000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (3.400000) (6.400000) ) ) ( minus ( wartosc_od_do (-3.400000) (4.000000) ) ( podzielic ( wartosc_od_do (-0.400000) (5.600000) ) ( wartosc_od_do (-8.800000) (0.000000) ) ) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( plus ( wartosc_od_do (-9.000000) (6.800000) ) ( wartosc_dokladnosc (-1.800000) (1.200000) ) ) ( wartosc_dokladna (-3.400000) ) ) ;;
assert (a =. 0.5);;
let a = sr_wartosc ( razy ( wartosc_od_do (-3.600000) (-0.400000) ) ( razy ( podzielic ( wartosc_dokladnosc (5.800000) (0.000000) ) ( minus ( wartosc_dokladnosc (-4.400000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (4.600000) (0.600000) ) ( wartosc_dokladna (-5.800000) ) ) ) ) ( wartosc_dokladna (-9.400000) ) ) ) ;;
assert (a =. -31.5221561297549258);;
let a = in_wartosc ( minus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-6.800000) (6.800000) ) ( wartosc_dokladna (8.200000) ) ) ;;
assert (a =. 55.7599999999999909);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-6.200000) (1.200000) ) ( wartosc_od_do (1.400000) (4.000000) ) ) ;;
assert (a =. -4.48171428571428621);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-0.600000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (9.800000) ) ( wartosc_dokladnosc (-0.600000) (3.800000) ) ) ;;
assert (a =. -15.7353885677585108);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) (4.200000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.200000) (0.000000) ) ( minus ( wartosc_dokladnosc (8.600000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (7.800000) ) ( minus ( wartosc_od_do (-6.600000) (6.600000) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ) (0.800000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_od_do (-6.600000) (3.000000) ) ( wartosc_dokladna (-2.400000) ) ) ;;
assert (a =. 5.4);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.400000) (8.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (8.800000) (7.800000) ) ( wartosc_od_do (-2.600000) (-0.800000) ) ) ;;
assert (a =. 10.5);;
let a = max_wartosc ( minus ( wartosc_od_do (4.200000) (9.600000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 16.6);;
let a = min_wartosc ( razy ( razy ( wartosc_od_do (-3.200000) (2.800000) ) ( wartosc_dokladna (-7.600000) ) ) ( wartosc_dokladna (-8.200000) ) ) ;;
assert (a =. -199.423999999999978);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (0.400000) ) ( wartosc_dokladnosc (5.400000) (7.200000) ) ) ;;
assert (a =. -5.2);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (8.800000) ) ( wartosc_dokladna (-3.200000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-0.600000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (4.400000) ) ) ;;
assert (a =. -0.6);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( plus ( wartosc_od_do (0.000000) (7.200000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-3.400000) (4.400000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (0.200000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.400000) (2.200000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-7.600000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.263157894736842091);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-5.800000) (8.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.600000) (-1.200000) ) ( wartosc_od_do (-4.600000) (0.800000) ) ) ;;
assert (a =. -5.39999999999999947);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-3.800000) ) ( minus ( wartosc_od_do (-7.800000) (8.400000) ) ( wartosc_od_do (-2.200000) (5.800000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (6.600000) ) ) ;;
assert (a =. 3.3);;
let a = max_wartosc ( podzielic ( wartosc_od_do (9.800000) (9.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (-4.800000) ) ) ;;
assert (a =. 10.8);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-0.200000) (8.400000) ) ( minus ( wartosc_od_do (-7.800000) (3.800000) ) ( wartosc_od_do (1.200000) (7.200000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.200000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (7.800000) (8.000000) ) ( wartosc_od_do (5.400000) (8.600000) ) ) ;;
assert (a =. 1.19720930232558143);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.400000) ) ( wartosc_dokladna (-1.400000) ) ) (-9.200000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (0.800000) (5.400000) ) ( minus ( plus ( wartosc_od_do (1.000000) (4.200000) ) ( wartosc_od_do (0.000000) (5.400000) ) ) ( wartosc_dokladnosc (-8.200000) (0.000000) ) ) ) ( podzielic ( wartosc_od_do (-4.000000) (3.600000) ) ( wartosc_dokladna (5.200000) ) ) ) ( wartosc_od_do (-9.600000) (4.600000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-8.600000) (5.600000) ) ( wartosc_dokladna (-1.200000) ) ) ;;
assert (a =. -9.79999999999999893);;
let a = max_wartosc ( minus ( wartosc_dokladna (-7.600000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -7.6);;
let a = in_wartosc ( razy ( wartosc_dokladna (-2.000000) ) ( plus ( wartosc_dokladnosc (0.800000) (9.800000) ) ( minus ( wartosc_dokladna (0.200000) ) ( wartosc_dokladnosc (0.000000) (7.800000) ) ) ) ) (-4.600000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-1.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-1.400000) ) ( podzielic ( wartosc_dokladnosc (-4.600000) (5.200000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (-5.600000) (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-9.800000) (-2.600000) ) ) (-9.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-3.600000) ) ( wartosc_dokladnosc (4.200000) (5.600000) ) ) ;;
assert (a =. -2.52219531880548775);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.400000) ) ( wartosc_dokladnosc (0.000000) (5.600000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (-1.600000) (2.400000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -0.880000000000000115);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (5.600000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 10.);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.200000) ) ) ;;
assert (a =. -2.2);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (3.800000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 3.8);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-8.800000) (0.600000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.200000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (-8.600000) (1.200000) ) ) ( wartosc_dokladnosc (-1.600000) (4.000000) ) ) ;;
assert (a =. -5.69999999999999929);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (2.400000) (8.600000) ) ( wartosc_dokladnosc (6.400000) (0.000000) ) ) ;;
assert (a =. 8.8);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (7.200000) (6.000000) ) ( wartosc_od_do (-3.600000) (2.800000) ) ) ;;
assert (a =. 11.2320000000000011);;
let a = in_wartosc ( podzielic ( razy ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( podzielic ( wartosc_dokladna (6.600000) ) ( wartosc_dokladnosc (0.000000) (6.800000) ) ) ) ( wartosc_dokladna (-7.400000) ) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) (-0.600000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (9.600000) (0.000000) ) ) (1.800000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.800000) (5.600000) ) ( podzielic ( razy ( wartosc_dokladnosc (6.000000) (0.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (8.400000) (3.600000) ) ( wartosc_dokladna (-4.400000) ) ) ( wartosc_dokladna (-0.200000) ) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (8.600000) ) ( podzielic ( wartosc_dokladna (-6.200000) ) ( razy ( wartosc_dokladna (0.800000) ) ( wartosc_od_do (-6.000000) (-1.200000) ) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( podzielic ( wartosc_od_do (-8.800000) (9.200000) ) ( wartosc_dokladna (0.400000) ) ) ( wartosc_dokladna (-1.600000) ) ) ;;
assert (a =. 24.6);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.200000) (8.200000) ) ( razy ( wartosc_od_do (0.000000) (7.200000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.800000) ) ) ) ) ;;
assert (a =. -7.2);;
let a = min_wartosc ( minus ( minus ( wartosc_od_do (0.000000) (5.400000) ) ( minus ( wartosc_od_do (-5.400000) (0.200000) ) ( minus ( wartosc_od_do (0.000000) (1.200000) ) ( minus ( podzielic ( wartosc_od_do (0.000000) (6.800000) ) ( wartosc_dokladna (3.400000) ) ) ( wartosc_dokladna (-2.400000) ) ) ) ) ) ( minus ( wartosc_dokladna (8.000000) ) ( plus ( wartosc_od_do (-8.800000) (0.600000) ) ( wartosc_dokladnosc (0.000000) (4.800000) ) ) ) ) ;;
assert (a =. -21.4000000000000021);;
let a = max_wartosc ( minus ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (1.800000) (8.800000) ) ) ( wartosc_od_do (-9.400000) (-3.400000) ) ) ;;
assert (a =. 9.4);;
let a = max_wartosc ( minus ( wartosc_dokladna (-4.600000) ) ( wartosc_od_do (-2.200000) (2.400000) ) ) ;;
assert (a =. -2.39999999999999947);;
let a = max_wartosc ( minus ( plus ( minus ( wartosc_dokladna (-2.400000) ) ( minus ( wartosc_dokladnosc (0.000000) (8.800000) ) ( minus ( wartosc_dokladna (7.000000) ) ( minus ( podzielic ( minus ( wartosc_dokladnosc (-6.400000) (3.800000) ) ( podzielic ( wartosc_dokladna (-9.800000) ) ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-6.200000) ) ) ) ) ( wartosc_od_do (-9.600000) (-6.200000) ) ) ( plus ( wartosc_od_do (0.000000) (2.600000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (7.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladna (-2.600000) ) ( wartosc_dokladna (4.800000) ) ) ;;
assert (a =. -12.48);;
let a = sr_wartosc ( plus ( wartosc_od_do (-6.800000) (8.000000) ) ( minus ( wartosc_dokladna (-4.800000) ) ( wartosc_dokladnosc (0.000000) (2.400000) ) ) ) ;;
assert (a =. -4.19999999999999929);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-6.600000) ) ( wartosc_dokladnosc (-8.000000) (1.200000) ) ) ;;
assert (a =. -14.6);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-6.200000) (8.200000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -6.2);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-4.200000) (3.800000) ) ( minus ( razy ( wartosc_od_do (-10.000000) (7.400000) ) ( wartosc_dokladnosc (-6.000000) (5.000000) ) ) ( wartosc_dokladna (1.600000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-4.200000) (6.400000) ) ( wartosc_dokladnosc (5.200000) (1.000000) ) ) (-0.400000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-4.200000) ) ( wartosc_dokladnosc (-7.200000) (8.400000) ) ) (6.600000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-7.800000) (2.800000) ) ) ;;
assert (a =. -8.0184);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (7.600000) (8.600000) ) ) ;;
assert (a =. 8.1);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.400000) (1.000000) ) ( wartosc_dokladna (8.600000) ) ) (-3.800000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-4.000000) (3.400000) ) ) ;;
assert (a =. -4.);;
let a = max_wartosc ( razy ( razy ( plus ( wartosc_dokladna (1.600000) ) ( wartosc_od_do (-2.600000) (8.000000) ) ) ( plus ( wartosc_dokladna (2.600000) ) ( wartosc_dokladna (-4.200000) ) ) ) ( wartosc_od_do (-4.200000) (-2.000000) ) ) ;;
assert (a =. 64.512);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.800000) (2.400000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( plus ( plus ( podzielic ( wartosc_dokladnosc (7.200000) (0.800000) ) ( wartosc_od_do (-5.600000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( podzielic ( wartosc_od_do (-4.400000) (0.000000) ) ( wartosc_dokladna (-7.800000) ) ) ) ) ( wartosc_dokladnosc (-5.600000) (1.400000) ) ) ) ) ) ) (-3.800000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.400000) (0.000000) ) ( wartosc_dokladnosc (-0.600000) (0.400000) ) ) ;;
assert (a =. 6.19143239625167308);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.800000) ) ( wartosc_dokladnosc (4.600000) (0.000000) ) ) ;;
assert (a =. 0.173913043478260892);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-8.800000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (1.600000) ) ( wartosc_od_do (1.600000) (4.400000) ) ) (-2.600000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (-9.600000) ) ( wartosc_od_do (-7.600000) (-3.800000) ) ) ;;
assert (a =. -5.8);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (0.200000) (0.000000) ) ( wartosc_dokladnosc (6.400000) (9.200000) ) ) ( wartosc_dokladnosc (-5.400000) (1.000000) ) ) ;;
assert (a =. -1.10216354968830221);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.400000) (1.200000) ) ( wartosc_dokladnosc (2.400000) (6.400000) ) ) ;;
assert (a =. 2.8);;
let a = min_wartosc ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.600000) (5.800000) ) ) ;;
assert (a =. -10.6348);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-2.600000) (9.800000) ) ( razy ( wartosc_dokladnosc (-6.000000) (7.800000) ) ( wartosc_dokladnosc (7.600000) (0.600000) ) ) ) (-6.800000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-8.800000) ) ( wartosc_od_do (-9.000000) (2.600000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-5.600000) (0.000000) ) ( wartosc_dokladna (-6.200000) ) ) ;;
assert (a =. -11.8);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (6.600000) (4.200000) ) ( wartosc_od_do (0.000000) (6.800000) ) ) ;;
assert (a =. 10.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (2.800000) ) ( wartosc_od_do (7.800000) (8.600000) ) ) ;;
assert (a =. 8.2);;
let a = max_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (-0.200000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (-8.200000) (0.000000) ) ( minus ( razy ( wartosc_dokladna (8.800000) ) ( wartosc_dokladnosc (5.400000) (7.600000) ) ) ( razy ( wartosc_od_do (0.000000) (9.800000) ) ( razy ( podzielic ( wartosc_od_do (-3.200000) (4.000000) ) ( wartosc_dokladna (6.800000) ) ) ( wartosc_dokladna (0.200000) ) ) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-8.600000) (0.400000) ) ( podzielic ( minus ( plus ( wartosc_dokladnosc (0.200000) (0.000000) ) ( razy ( wartosc_dokladna (5.600000) ) ( wartosc_od_do (-1.200000) (2.600000) ) ) ) ( podzielic ( minus ( minus ( wartosc_dokladnosc (-4.800000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.200000) ) ) ( wartosc_dokladna (2.800000) ) ) ( wartosc_od_do (-2.400000) (3.000000) ) ) ) ( wartosc_od_do (-3.800000) (-1.800000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.800000) (1.200000) ) ( wartosc_od_do (5.400000) (5.800000) ) ) ;;
assert (a =. 0.136275862068965525);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (2.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (8.400000) ) ) ) ( wartosc_dokladna (5.200000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (-4.400000) ) ( podzielic ( wartosc_dokladnosc (9.600000) (8.800000) ) ( wartosc_dokladna (8.600000) ) ) ) (6.600000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.200000) (7.200000) ) ( wartosc_dokladnosc (-4.400000) (0.000000) ) ) ) (1.200000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.400000) (4.600000) ) ( wartosc_dokladnosc (2.400000) (2.400000) ) ) ;;
assert (a =. 4.89999999999999947);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.200000) (4.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-1.600000) ) ( wartosc_dokladna (-5.400000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (6.800000) ) ( podzielic ( wartosc_dokladnosc (-5.200000) (5.600000) ) ( plus ( wartosc_od_do (-0.400000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ;;
assert (a =. 10.2509778357236);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.800000) ) ( wartosc_dokladna (5.400000) ) ) (2.200000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (5.400000) ) ( wartosc_dokladnosc (-1.600000) (3.800000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.200000) ) ) ) ;;
assert (a =. 2.2);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-6.400000) (1.600000) ) ( wartosc_dokladnosc (6.200000) (9.800000) ) ) ( wartosc_dokladnosc (-6.200000) (6.400000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-9.600000) (-3.800000) ) ( wartosc_dokladna (-8.400000) ) ) ( wartosc_dokladnosc (7.600000) (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.200000) (0.000000) ) ( wartosc_od_do (2.400000) (5.800000) ) ) ;;
assert (a =. 0.0344827586206896616);;
let a = max_wartosc ( minus ( wartosc_od_do (-7.000000) (-4.200000) ) ( wartosc_od_do (-3.600000) (5.600000) ) ) ;;
assert (a =. -0.600000000000000089);;
let a = min_wartosc ( minus ( plus ( podzielic ( minus ( wartosc_dokladnosc (4.200000) (2.000000) ) ( wartosc_dokladnosc (8.600000) (1.400000) ) ) ( podzielic ( wartosc_od_do (-8.200000) (-3.000000) ) ( razy ( wartosc_dokladna (4.600000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (5.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (-3.400000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -3.4);;
let a = min_wartosc ( minus ( wartosc_dokladna (-6.600000) ) ( podzielic ( razy ( wartosc_od_do (0.200000) (2.400000) ) ( wartosc_od_do (-4.800000) (3.000000) ) ) ( plus ( razy ( wartosc_dokladna (-4.400000) ) ( wartosc_dokladna (-9.600000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. -6.7704545454545455);;
let a = sr_wartosc ( minus ( wartosc_od_do (-5.200000) (2.200000) ) ( wartosc_dokladna (2.200000) ) ) ;;
assert (a =. -3.7);;
let a = min_wartosc ( plus ( wartosc_dokladna (-1.200000) ) ( wartosc_dokladna (8.800000) ) ) ;;
assert (a =. 7.60000000000000053);;
let a = max_wartosc ( minus ( wartosc_od_do (-2.400000) (9.400000) ) ( wartosc_od_do (3.000000) (6.400000) ) ) ;;
assert (a =. 6.4);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.600000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (1.400000) ) ( wartosc_dokladnosc (1.400000) (1.400000) ) ) ;;
assert (a =. 1.01419878296146049);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (5.600000) ) ( minus ( wartosc_dokladnosc (7.200000) (9.800000) ) ( podzielic ( wartosc_od_do (2.600000) (8.000000) ) ( wartosc_od_do (-3.200000) (-1.000000) ) ) ) ) ;;
assert (a =. 7.30690000000000062);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.200000) ) ( wartosc_od_do (1.000000) (3.200000) ) ) (-6.600000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (9.800000) ) ( wartosc_od_do (0.000000) (3.200000) ) ) ;;
assert (a =. -2.536875);;
let a = min_wartosc ( plus ( wartosc_od_do (-8.200000) (5.200000) ) ( wartosc_dokladna (-7.200000) ) ) ;;
assert (a =. -15.3999999999999986);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (0.000000) (7.200000) ) ) ;;
assert (a =. 8.2);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_od_do (2.400000) (7.600000) ) ( razy ( wartosc_dokladnosc (-0.400000) (1.000000) ) ( wartosc_od_do (-6.000000) (7.200000) ) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-0.800000) (3.000000) ) ( wartosc_dokladnosc (9.400000) (1.600000) ) ) (0.200000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (4.600000) ) ( wartosc_dokladna (-9.800000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.400000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-5.000000) (4.200000) ) ( wartosc_od_do (-3.600000) (9.000000) ) ) ( razy ( wartosc_dokladna (-6.600000) ) ( wartosc_od_do (-9.600000) (-7.400000) ) ) ) (-5.600000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladna (2.400000) ) ( wartosc_dokladna (-9.800000) ) ) ;;
assert (a =. -23.52);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-3.200000) (3.200000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladna (-0.800000) ) ) ;;
assert (a =. 9.75);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-4.600000) (2.800000) ) ( razy ( wartosc_dokladnosc (8.400000) (0.000000) ) ( wartosc_od_do (-5.200000) (0.000000) ) ) ) (-1.200000);;
assert (a = false);;
let a = in_wartosc ( minus ( podzielic ( podzielic ( wartosc_dokladna (-4.000000) ) ( razy ( wartosc_dokladna (2.800000) ) ( minus ( wartosc_dokladnosc (-2.600000) (0.800000) ) ( wartosc_dokladna (7.800000) ) ) ) ) ( wartosc_od_do (-9.000000) (-5.200000) ) ) ( wartosc_dokladnosc (5.800000) (6.200000) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (-6.200000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -3.1);;
let a = max_wartosc ( plus ( wartosc_od_do (2.400000) (8.000000) ) ( razy ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (4.600000) ) ) ( razy ( podzielic ( wartosc_dokladna (8.600000) ) ( podzielic ( wartosc_od_do (-5.200000) (-0.600000) ) ( wartosc_od_do (-4.200000) (1.600000) ) ) ) ( podzielic ( wartosc_od_do (-9.600000) (0.000000) ) ( wartosc_dokladna (-9.800000) ) ) ) ) ) ;;
assert (a =. 133.805714285714231);;
let a = min_wartosc ( minus ( wartosc_od_do (-3.600000) (4.800000) ) ( wartosc_dokladnosc (-2.000000) (2.200000) ) ) ;;
assert (a =. -1.64400000000000013);;
let a = min_wartosc ( razy ( wartosc_od_do (-8.000000) (-1.800000) ) ( wartosc_od_do (-4.000000) (-1.400000) ) ) ;;
assert (a =. 2.52);;
let a = sr_wartosc ( razy ( minus ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (6.200000) (7.400000) ) ) ( wartosc_dokladnosc (5.800000) (9.400000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (-8.200000) (1.400000) ) ( wartosc_dokladna (-8.800000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-3.400000) (8.800000) ) ( wartosc_dokladnosc (8.600000) (6.600000) ) ) ;;
assert (a =. -12.8668);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (5.600000) (0.200000) ) ( wartosc_dokladnosc (-8.200000) (0.200000) ) ) ;;
assert (a =. -2.6276);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (4.000000) (2.400000) ) ( wartosc_dokladna (-1.200000) ) ) ;;
assert (a =. 5.2);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.200000) (4.800000) ) ( wartosc_dokladnosc (-1.800000) (0.000000) ) ) ;;
assert (a =. 0.666666666666666741);;
let a = in_wartosc ( razy ( wartosc_dokladna (-1.600000) ) ( wartosc_dokladna (1.800000) ) ) (-7.800000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (8.800000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.400000) (9.800000) ) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (1.800000) (0.000000) ) ( wartosc_dokladnosc (7.600000) (5.400000) ) ) ( podzielic ( wartosc_od_do (1.000000) (9.800000) ) ( wartosc_od_do (-2.400000) (4.400000) ) ) ) ;;
assert (a =. 0.250361633470568667);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.400000) (7.200000) ) ( wartosc_od_do (0.000000) (4.600000) ) ) ;;
assert (a =. 2.69999999999999973);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (5.000000) (6.000000) ) ( wartosc_dokladnosc (-10.000000) (1.800000) ) ) ;;
assert (a =. 15.);;
let a = max_wartosc ( minus ( wartosc_dokladna (-3.200000) ) ( wartosc_dokladnosc (8.600000) (2.200000) ) ) ;;
assert (a =. -11.6108000000000011);;
let a = min_wartosc ( plus ( podzielic ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (-8.600000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-1.600000) ) ( podzielic ( wartosc_dokladnosc (3.600000) (6.000000) ) ( minus ( wartosc_od_do (8.400000) (9.800000) ) ( wartosc_dokladna (-0.600000) ) ) ) ) ;;
assert (a =. -3.77358490566037785);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (4.400000) (4.200000) ) ( podzielic ( wartosc_dokladna (-0.200000) ) ( wartosc_od_do (-5.600000) (4.400000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (1.000000) ) ( wartosc_od_do (0.800000) (3.800000) ) ) ;;
assert (a =. 6.85361842105263186);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.200000) ) ( wartosc_od_do (-8.800000) (-7.200000) ) ) ;;
assert (a =. -0.222222222222222238);;
let a = max_wartosc ( podzielic ( plus ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-4.800000) (0.000000) ) ) ( wartosc_od_do (-7.000000) (9.800000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.200000) (-0.400000) ) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-8.200000) (3.800000) ) ) ) ;;
assert (a =. 0.887378936159424);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-0.400000) (6.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( plus ( plus ( wartosc_dokladna (2.200000) ) ( wartosc_od_do (-3.200000) (8.200000) ) ) ( wartosc_od_do (-7.800000) (-1.200000) ) ) ;;
assert (a =. 0.199999999999999289);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.200000) ) ( podzielic ( wartosc_od_do (-3.200000) (-0.200000) ) ( razy ( wartosc_od_do (0.800000) (9.800000) ) ( wartosc_dokladna (2.600000) ) ) ) ) ;;
assert (a =. -789.880000000000109);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.800000) (7.400000) ) ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (2.000000) (5.200000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( wartosc_od_do (-0.200000) (9.800000) ) ) ( wartosc_dokladnosc (0.000000) (4.800000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (-9.400000) (0.000000) ) ( wartosc_od_do (-7.600000) (5.000000) ) ) ( podzielic ( wartosc_dokladnosc (-5.600000) (1.200000) ) ( wartosc_dokladna (-2.600000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (0.000000) (3.600000) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.400000) (4.400000) ) ( wartosc_od_do (-7.000000) (-6.200000) ) ) (-2.600000);;
assert (a = true);;
let a = in_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-3.800000) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (0.400000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-0.400000) (2.400000) ) ( wartosc_od_do (0.000000) (9.200000) ) ) ( wartosc_dokladnosc (-6.400000) (6.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (8.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (-5.200000) ) ( razy ( minus ( wartosc_dokladna (1.200000) ) ( plus ( wartosc_dokladnosc (-3.400000) (6.200000) ) ( wartosc_od_do (0.600000) (1.400000) ) ) ) ( wartosc_od_do (4.400000) (7.200000) ) ) ) ;;
assert (a =. -18.3524800000000035);;
let a = sr_wartosc ( minus ( wartosc_dokladna (6.400000) ) ( wartosc_od_do (-1.800000) (2.800000) ) ) ;;
assert (a =. 5.9);;
let a = in_wartosc ( podzielic ( minus ( minus ( wartosc_dokladna (-6.200000) ) ( wartosc_dokladnosc (0.000000) (2.600000) ) ) ( razy ( wartosc_dokladnosc (1.400000) (4.400000) ) ( podzielic ( wartosc_od_do (0.000000) (5.200000) ) ( razy ( wartosc_dokladnosc (1.000000) (9.200000) ) ( plus ( wartosc_od_do (0.000000) (0.200000) ) ( plus ( wartosc_dokladnosc (1.600000) (4.200000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ) ) ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (-4.600000) (5.600000) ) ( wartosc_dokladna (5.200000) ) ) ) ( wartosc_od_do (2.600000) (8.000000) ) ) ) (2.200000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (2.000000) (6.400000) ) ( wartosc_od_do (-1.400000) (3.800000) ) ) ;;
assert (a =. 3.00000000000000044);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (5.800000) ) ( wartosc_od_do (0.000000) (9.200000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (7.200000) ) ( plus ( wartosc_dokladna (-1.200000) ) ( wartosc_od_do (3.200000) (4.400000) ) ) ) (7.200000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-2.400000) (-1.200000) ) ( wartosc_od_do (-8.200000) (2.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.400000) ) ( wartosc_od_do (-0.400000) (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-2.600000) (3.600000) ) ( minus ( wartosc_dokladna (-2.800000) ) ( razy ( minus ( wartosc_dokladna (3.600000) ) ( plus ( wartosc_dokladna (8.800000) ) ( wartosc_od_do (-5.400000) (0.000000) ) ) ) ( wartosc_od_do (-8.800000) (-3.800000) ) ) ) ) (-3.600000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-4.200000) (-0.600000) ) ( razy ( razy ( wartosc_dokladna (1.600000) ) ( wartosc_od_do (-8.600000) (8.800000) ) ) ( podzielic ( wartosc_dokladnosc (9.400000) (0.800000) ) ( wartosc_dokladna (4.000000) ) ) ) ) ;;
assert (a =. 136.897689600000035);;
let a = in_wartosc ( razy ( wartosc_dokladna (1.600000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-2.600000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.600000) ) ) (7.400000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (0.600000) (5.400000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (3.600000) (4.400000) ) ( wartosc_od_do (0.000000) (0.800000) ) ) ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (-2.800000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (8.600000) ) ) ;;
assert (a =. 11.1);;
let a = sr_wartosc ( plus ( minus ( wartosc_dokladna (9.200000) ) ( wartosc_dokladnosc (-6.800000) (0.600000) ) ) ( wartosc_od_do (-5.800000) (-3.200000) ) ) ;;
assert (a =. 11.4999999999999982);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.800000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (3.600000) (9.200000) ) ( wartosc_dokladna (-2.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.800000) ) ( wartosc_od_do (-9.800000) (-2.600000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-0.800000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (4.200000) ) ( podzielic ( wartosc_dokladnosc (-2.200000) (1.000000) ) ( wartosc_dokladnosc (-2.200000) (7.800000) ) ) ) ( wartosc_od_do (-2.000000) (2.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( razy ( wartosc_dokladnosc (6.000000) (7.200000) ) ( podzielic ( wartosc_dokladnosc (-9.800000) (3.600000) ) ( plus ( wartosc_od_do (-9.400000) (-2.000000) ) ( wartosc_dokladnosc (-8.600000) (7.400000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (4.400000) (0.000000) ) ( wartosc_dokladnosc (-3.800000) (0.000000) ) ) ;;
assert (a =. -1.15789473684210531);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (4.200000) (0.000000) ) ( wartosc_dokladnosc (-1.800000) (0.000000) ) ) ;;
assert (a =. 2.40000000000000036);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.200000) (1.800000) ) ( wartosc_od_do (-6.800000) (6.800000) ) ) (1.400000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (8.800000) ) ( wartosc_od_do (-2.800000) (6.800000) ) ) ;;
assert (a =. 11.6000000000000014);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (2.600000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (0.800000) ) ) ;;
assert (a =. -2.64717741935483852);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-7.600000) (0.000000) ) ) ( wartosc_od_do (-5.600000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( podzielic ( wartosc_dokladnosc (8.200000) (1.200000) ) ( wartosc_od_do (-3.000000) (6.200000) ) ) ) (-0.200000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.800000) (0.000000) ) ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-9.600000) ) ) ) ;;
assert (a =. 0.8);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (9.200000) ) ( wartosc_od_do (7.200000) (9.600000) ) ) ( podzielic ( wartosc_dokladna (8.800000) ) ( wartosc_od_do (-9.400000) (0.200000) ) ) ) ;;
assert (a =. 0.427272727272727193);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( plus ( razy ( wartosc_dokladna (6.400000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( podzielic ( wartosc_dokladna (-2.600000) ) ( plus ( wartosc_dokladna (-0.800000) ) ( wartosc_od_do (-3.000000) (2.800000) ) ) ) ) ) ( wartosc_od_do (0.000000) (8.800000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (5.200000) (5.200000) ) ) ;;
assert (a =. 0.384615384615384581);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.800000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.200000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-4.800000) ) ( wartosc_od_do (-4.400000) (-4.000000) ) ) ( wartosc_dokladnosc (-8.800000) (2.400000) ) ) ;;
assert (a =. -0.12106146694214874);;
let a = sr_wartosc ( minus ( wartosc_dokladna (4.600000) ) ( wartosc_dokladna (-9.200000) ) ) ;;
assert (a =. 13.7999999999999989);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.600000) ) ( podzielic ( wartosc_dokladnosc (4.600000) (7.600000) ) ( wartosc_dokladnosc (-3.600000) (0.600000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-1.000000) (9.600000) ) ( plus ( wartosc_dokladna (0.400000) ) ( podzielic ( wartosc_dokladna (8.200000) ) ( wartosc_dokladnosc (1.800000) (0.200000) ) ) ) ) ( minus ( wartosc_dokladna (3.200000) ) ( wartosc_od_do (-1.400000) (0.000000) ) ) ) ;;
assert (a =. -4.82157248157248119);;
let a = max_wartosc ( plus ( wartosc_od_do (-3.000000) (8.800000) ) ( wartosc_dokladna (6.600000) ) ) ;;
assert (a =. 15.4);;
let a = sr_wartosc ( podzielic ( podzielic ( plus ( minus ( wartosc_dokladna (-0.400000) ) ( wartosc_od_do (-6.200000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) ( razy ( wartosc_od_do (-8.600000) (5.200000) ) ( wartosc_dokladnosc (9.200000) (0.000000) ) ) ) ( wartosc_dokladna (-0.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (7.800000) ) ( wartosc_dokladnosc (-3.200000) (5.400000) ) ) ;;
assert (a =. 10.8272);;
let a = in_wartosc ( plus ( wartosc_od_do (-6.200000) (3.400000) ) ( wartosc_dokladna (0.000000) ) ) (3.800000);;
assert (a = false);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (-1.400000) (6.400000) ) ( wartosc_dokladna (5.600000) ) ) ( wartosc_od_do (-7.800000) (1.000000) ) ) ;;
assert (a =. -2.95357142857142874);;
let a = min_wartosc ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.800000) (-3.200000) ) ) ( wartosc_dokladnosc (5.200000) (0.600000) ) ) ;;
assert (a =. 16.54016);;
let a = sr_wartosc ( razy ( minus ( wartosc_od_do (-6.200000) (-0.800000) ) ( minus ( minus ( wartosc_dokladnosc (-1.600000) (0.000000) ) ( wartosc_dokladnosc (3.800000) (3.600000) ) ) ( wartosc_od_do (1.200000) (7.600000) ) ) ) ( wartosc_dokladnosc (-9.800000) (1.600000) ) ) ;;
assert (a =. -62.6865702399999947);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-6.400000) (3.600000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -6.4);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-9.200000) ) ) ;;
assert (a =. -0.217391304347826109);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (0.200000) (2.200000) ) ) ;;
assert (a =. 1.8396);;
let a = min_wartosc ( minus ( wartosc_dokladna (3.400000) ) ( wartosc_od_do (-0.200000) (4.000000) ) ) ;;
assert (a =. -0.600000000000000089);;
let a = in_wartosc ( plus ( wartosc_od_do (-7.600000) (4.000000) ) ( wartosc_od_do (-4.600000) (3.200000) ) ) (5.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (5.600000) (7.400000) ) ( razy ( wartosc_od_do (-9.000000) (2.200000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-6.600000) (5.200000) ) ( wartosc_od_do (-2.000000) (-0.800000) ) ) ;;
assert (a =. -8.94320000000000093);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.200000) (8.000000) ) ( wartosc_dokladnosc (-3.400000) (1.800000) ) ) ;;
assert (a =. 1.5574457889061939);;
let a = in_wartosc ( plus ( wartosc_dokladna (6.600000) ) ( minus ( wartosc_dokladnosc (-9.600000) (4.600000) ) ( wartosc_od_do (-10.000000) (3.400000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_od_do (-4.400000) (5.800000) ) ( wartosc_od_do (-7.400000) (5.800000) ) ) (-2.600000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.800000) ) ( wartosc_dokladnosc (0.800000) (6.400000) ) ) (-4.400000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (2.600000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (3.400000) ) ( wartosc_od_do (0.000000) (0.600000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladna (7.400000) ) ) ;;
assert (a =. -57.72);;
let a = in_wartosc ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (4.000000) ) ) (9.200000);;
assert (a = false);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladnosc (6.200000) (0.000000) ) ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-5.400000) (2.400000) ) ) ) ( wartosc_dokladnosc (7.800000) (6.800000) ) ) ;;
assert (a =. -4.7896);;
let a = max_wartosc ( minus ( wartosc_dokladna (-0.800000) ) ( podzielic ( podzielic ( plus ( wartosc_dokladna (4.400000) ) ( wartosc_dokladnosc (5.200000) (2.200000) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( plus ( wartosc_dokladnosc (0.400000) (9.400000) ) ( wartosc_od_do (-2.400000) (-1.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-0.200000) (0.000000) ) ( wartosc_od_do (-1.200000) (9.400000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_dokladna (-5.600000) ) ( razy ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladnosc (0.800000) (1.600000) ) ) ) ;;
assert (a =. -10.63808);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (3.800000) (7.800000) ) ( wartosc_dokladna (-9.800000) ) ) ;;
assert (a =. -0.387755102040816313);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.800000) (7.000000) ) ( wartosc_od_do (-6.600000) (2.000000) ) ) ;;
assert (a =. -46.1999999999999957);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladna (1.200000) ) ( wartosc_dokladnosc (-1.000000) (0.800000) ) ) ( wartosc_od_do (-5.200000) (5.000000) ) ) ;;
assert (a =. -2.808);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.400000) (3.000000) ) ( wartosc_dokladnosc (-1.200000) (8.400000) ) ) ;;
assert (a =. -1.31186317321688506);;
let a = max_wartosc ( minus ( wartosc_dokladna (4.800000) ) ( wartosc_dokladnosc (3.200000) (0.200000) ) ) ;;
assert (a =. 1.60639999999999983);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (7.000000) ) ( podzielic ( wartosc_dokladna (2.600000) ) ( wartosc_dokladnosc (-6.400000) (2.200000) ) ) ) ( wartosc_dokladnosc (-9.400000) (5.800000) ) ) ;;
assert (a =. 1.84159466619193068);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (2.600000) ) ) ( wartosc_od_do (-8.000000) (-5.800000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladnosc (4.800000) (2.000000) ) ( wartosc_dokladnosc (8.400000) (6.600000) ) ) ( wartosc_od_do (0.000000) (2.200000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( plus ( wartosc_od_do (-2.600000) (0.000000) ) ( razy ( wartosc_od_do (0.000000) (6.600000) ) ( wartosc_od_do (-6.400000) (-5.400000) ) ) ) ;;
assert (a =. -22.42);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (3.400000) (4.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 14.144);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.400000) (7.600000) ) ( wartosc_dokladnosc (-8.000000) (2.200000) ) ) ;;
assert (a =. -0.0501078522004650279);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (9.800000) ) ) (1.600000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-0.600000) (0.000000) ) ( plus ( podzielic ( podzielic ( plus ( wartosc_dokladna (-3.400000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (0.400000) (5.600000) ) ) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ( minus ( minus ( wartosc_od_do (1.200000) (6.800000) ) ( wartosc_dokladnosc (-1.400000) (6.200000) ) ) ( wartosc_dokladnosc (-7.400000) (0.800000) ) ) ) ( minus ( wartosc_od_do (0.000000) (5.400000) ) ( wartosc_dokladnosc (-1.200000) (5.000000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.600000) ) ( wartosc_od_do (-4.200000) (0.000000) ) ) (4.200000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (0.400000) ) ( podzielic ( wartosc_dokladnosc (-6.600000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( razy ( wartosc_dokladnosc (0.000000) (2.200000) ) ( wartosc_dokladnosc (9.400000) (9.200000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (2.800000) ) ( wartosc_dokladnosc (-4.000000) (9.200000) ) ) ( minus ( wartosc_dokladna (6.200000) ) ( wartosc_dokladna (-6.200000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.800000) (5.400000) ) ( wartosc_od_do (-0.200000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_od_do (-7.600000) (1.400000) ) ( wartosc_dokladna (-3.400000) ) ) ;;
assert (a =. 4.8);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.800000) ) ) ( wartosc_dokladnosc (5.400000) (0.200000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-9.800000) ) ) ( wartosc_dokladnosc (-6.200000) (0.000000) ) ) ;;
assert (a =. -0.148123765635286342);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (7.600000) (5.800000) ) ( wartosc_od_do (3.000000) (5.400000) ) ) (6.400000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-8.200000) ) ( wartosc_od_do (0.000000) (2.400000) ) ) ;;
assert (a =. -6.99999999999999911);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (3.200000) (7.200000) ) ( wartosc_od_do (-9.200000) (0.000000) ) ) ( wartosc_od_do (-2.200000) (6.400000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( podzielic ( podzielic ( wartosc_od_do (-5.800000) (5.400000) ) ( wartosc_dokladna (-4.400000) ) ) ( podzielic ( wartosc_dokladnosc (-8.200000) (0.800000) ) ( wartosc_dokladnosc (7.200000) (0.000000) ) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-0.800000) (0.000000) ) ( wartosc_dokladna (-4.200000) ) ) ) ) ;;
assert (a =. -1.3572382246654473);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-0.200000) (8.400000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.200000) ) ( podzielic ( podzielic ( minus ( plus ( podzielic ( podzielic ( wartosc_dokladnosc (-9.800000) (3.200000) ) ( wartosc_od_do (-3.200000) (-2.200000) ) ) ( podzielic ( wartosc_dokladna (8.600000) ) ( wartosc_od_do (0.000000) (3.600000) ) ) ) ( podzielic ( plus ( wartosc_dokladnosc (-1.800000) (2.600000) ) ( podzielic ( wartosc_dokladna (-2.400000) ) ( wartosc_dokladna (-6.800000) ) ) ) ( wartosc_dokladnosc (5.000000) (1.600000) ) ) ) ( minus ( wartosc_dokladnosc (-5.200000) (5.200000) ) ( wartosc_od_do (-3.200000) (1.200000) ) ) ) ( wartosc_dokladnosc (0.800000) (0.200000) ) ) ( wartosc_dokladna (-2.800000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( razy ( podzielic ( wartosc_od_do (-8.000000) (-5.000000) ) ( wartosc_dokladnosc (-5.400000) (7.200000) ) ) ( wartosc_od_do (-4.800000) (2.800000) ) ) ( plus ( wartosc_od_do (-1.200000) (5.000000) ) ( wartosc_dokladnosc (4.200000) (3.400000) ) ) ) ;;
assert (a =. 13.8127872286079167);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (3.000000) ) ( wartosc_od_do (2.000000) (5.000000) ) ) (1.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) (7.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (2.800000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) (-1.400000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (2.200000) (0.800000) ) ( wartosc_dokladna (3.600000) ) ) ;;
assert (a =. -1.41759999999999975);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (-8.400000) ) ( minus ( wartosc_od_do (-4.400000) (0.000000) ) ( wartosc_od_do (-1.800000) (-0.600000) ) ) ) ( wartosc_dokladnosc (-6.600000) (6.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-5.400000) (7.200000) ) ( plus ( plus ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (-6.400000) ) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (3.200000) ) ) ( plus ( wartosc_dokladnosc (2.800000) (0.000000) ) ( wartosc_od_do (-7.600000) (4.600000) ) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( minus ( wartosc_dokladna (4.600000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) (-7.200000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.200000) ) ( wartosc_dokladnosc (-10.000000) (9.200000) ) ) ;;
assert (a =. 0.201465201465201471);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_dokladnosc (2.200000) (9.200000) ) ( wartosc_od_do (-5.200000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (1.800000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.400000) ) ( wartosc_od_do (0.000000) (6.600000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-4.200000) (1.200000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (-6.400000) (1.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (1.000000) ) ( podzielic ( wartosc_dokladnosc (-4.000000) (0.800000) ) ( wartosc_od_do (0.000000) (4.600000) ) ) ) ( wartosc_dokladna (-5.400000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (5.200000) ) ( wartosc_od_do (-8.400000) (8.200000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (1.800000) ) ( podzielic ( wartosc_od_do (-4.600000) (7.600000) ) ( wartosc_dokladna (0.000000) ) ) ) (-4.800000);;
assert (a = false);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (1.600000) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( podzielic ( wartosc_dokladnosc (0.800000) (9.800000) ) ( wartosc_dokladna (8.800000) ) ) ) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-6.200000) ) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-2.400000) (1.600000) ) ) ) ;;
assert (a =. 8.5616);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_dokladna (-2.000000) ) ) (4.200000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.800000) (5.200000) ) ( wartosc_od_do (-0.200000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladna (-0.600000) ) ( wartosc_dokladna (-4.800000) ) ) ( wartosc_dokladna (-4.800000) ) ) ;;
assert (a =. -20.16);;
let a = sr_wartosc ( minus ( wartosc_dokladna (9.400000) ) ( minus ( wartosc_dokladna (-0.600000) ) ( wartosc_dokladnosc (-0.800000) (5.600000) ) ) ) ;;
assert (a =. 9.2);;
let a = min_wartosc ( razy ( wartosc_dokladna (-9.200000) ) ( wartosc_od_do (-7.600000) (2.400000) ) ) ;;
assert (a =. -22.08);;
let a = in_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (5.200000) ) ( plus ( wartosc_dokladnosc (0.600000) (1.000000) ) ( podzielic ( wartosc_od_do (-9.200000) (0.000000) ) ( razy ( razy ( wartosc_dokladnosc (9.600000) (2.000000) ) ( wartosc_dokladna (9.200000) ) ) ( wartosc_dokladna (-4.400000) ) ) ) ) ) ( wartosc_od_do (3.200000) (3.200000) ) ) (-3.800000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.600000) (8.200000) ) ( wartosc_od_do (0.000000) (4.200000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.800000) (6.400000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (1.400000) ) ( wartosc_dokladna (4.800000) ) ) ;;
assert (a =. -4.07400000000000073);;
let a = max_wartosc ( minus ( wartosc_od_do (8.200000) (8.400000) ) ( minus ( wartosc_dokladna (-4.800000) ) ( podzielic ( minus ( podzielic ( wartosc_dokladnosc (9.200000) (0.000000) ) ( razy ( minus ( wartosc_dokladnosc (0.000000) (8.800000) ) ( wartosc_od_do (-6.200000) (0.800000) ) ) ( wartosc_dokladna (-3.800000) ) ) ) ( wartosc_dokladnosc (8.400000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (7.200000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-0.200000) (7.800000) ) ( wartosc_od_do (5.800000) (7.400000) ) ) ;;
assert (a =. -0.0310456663560111853);;
let a = max_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (3.600000) ) ) ;;
assert (a =. 7.6);;
let a = in_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( plus ( wartosc_od_do (0.000000) (6.200000) ) ( wartosc_dokladnosc (-2.600000) (4.000000) ) ) ) (2.400000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-9.400000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -1.56666666666666665);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (8.400000) ) ( wartosc_dokladna (9.600000) ) ) (8.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.800000) ) ( wartosc_od_do (6.000000) (7.200000) ) ) ;;
assert (a =. -1.49722222222222223);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.200000) (0.000000) ) ) ( minus ( plus ( podzielic ( wartosc_od_do (-9.600000) (8.600000) ) ( wartosc_od_do (-2.200000) (0.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (1.600000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-0.600000) ) ( razy ( podzielic ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-4.400000) (-2.400000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-4.800000) (6.600000) ) ( wartosc_dokladna (-2.600000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-8.600000) (2.600000) ) ( wartosc_od_do (-3.800000) (9.400000) ) ) ;;
assert (a =. -5.8);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.200000) ) ( plus ( wartosc_od_do (-1.000000) (5.200000) ) ( wartosc_dokladna (0.000000) ) ) ) (-5.600000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladna (-4.400000) ) ( plus ( wartosc_dokladnosc (-9.600000) (7.600000) ) ( wartosc_dokladna (5.600000) ) ) ) (-4.800000);;
assert (a = false);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladnosc (2.800000) (2.800000) ) ( wartosc_od_do (0.000000) (3.400000) ) ) ( plus ( wartosc_dokladna (-5.200000) ) ( wartosc_dokladna (5.000000) ) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-5.400000) (0.200000) ) ( wartosc_dokladna (5.800000) ) ) ( wartosc_od_do (7.200000) (8.600000) ) ) ;;
assert (a =. -0.129310344827586216);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (-1.400000) (4.600000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( plus ( wartosc_od_do (-6.400000) (9.800000) ) ( podzielic ( wartosc_dokladna (7.800000) ) ( wartosc_dokladna (9.000000) ) ) ) ) (3.200000);;
assert (a = false);;
let a = max_wartosc ( razy ( minus ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (9.000000) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (3.200000) ) ) ) ;;
assert (a =. -3.2);;
let a = max_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-9.000000) (8.000000) ) ) ;;
assert (a =. 38.88);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladnosc (5.200000) (6.200000) ) ( wartosc_dokladna (3.400000) ) ) ( wartosc_dokladnosc (-2.400000) (4.000000) ) ) (-2.400000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.400000) ) ( wartosc_od_do (-8.600000) (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.600000) (6.400000) ) ( wartosc_dokladnosc (-8.000000) (5.600000) ) ) (-5.200000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_od_do (-9.200000) (2.200000) ) ( wartosc_dokladna (8.200000) ) ) ;;
assert (a =. -5.99999999999999911);;
let a = sr_wartosc ( razy ( podzielic ( podzielic ( wartosc_od_do (0.000000) (6.400000) ) ( wartosc_dokladnosc (9.000000) (3.000000) ) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (2.200000) ) ( wartosc_od_do (0.000000) (6.400000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_od_do (-5.800000) (7.200000) ) ( wartosc_dokladna (-0.400000) ) ) ( podzielic ( wartosc_dokladna (1.200000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-1.200000) (0.000000) ) ( podzielic ( razy ( razy ( wartosc_od_do (0.000000) (3.600000) ) ( podzielic ( wartosc_dokladnosc (-6.400000) (6.200000) ) ( wartosc_dokladnosc (-3.200000) (6.800000) ) ) ) ( plus ( wartosc_dokladnosc (-9.800000) (6.400000) ) ( wartosc_od_do (5.400000) (9.000000) ) ) ) ( wartosc_dokladna (-2.400000) ) ) ) ;;
assert (a =. -10.3111539914163099);;
let a = in_wartosc ( podzielic ( plus ( podzielic ( plus ( wartosc_od_do (4.000000) (9.200000) ) ( wartosc_dokladnosc (0.000000) (7.200000) ) ) ( wartosc_dokladnosc (0.000000) (1.800000) ) ) ( podzielic ( wartosc_dokladna (7.800000) ) ( wartosc_dokladnosc (-2.800000) (0.000000) ) ) ) ( wartosc_dokladnosc (-2.000000) (5.600000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (4.400000) ) ( razy ( wartosc_od_do (-7.800000) (0.000000) ) ( wartosc_dokladnosc (-7.400000) (0.000000) ) ) ) ;;
assert (a =. 0.0165627165627165625);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-7.000000) (8.800000) ) ( razy ( wartosc_od_do (-6.200000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (7.400000) ) ( wartosc_dokladnosc (-7.400000) (4.000000) ) ) ) ) ;;
assert (a =. -13.2399864864864867);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.800000) ) ( wartosc_dokladnosc (9.000000) (1.800000) ) ) (-3.200000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (7.600000) ) ( wartosc_od_do (4.600000) (5.600000) ) ) ;;
assert (a =. 13.2);;
let a = min_wartosc ( plus ( podzielic ( minus ( wartosc_od_do (-7.800000) (-7.200000) ) ( wartosc_dokladna (-1.600000) ) ) ( wartosc_od_do (-4.800000) (-3.400000) ) ) ( wartosc_dokladna (7.600000) ) ) ;;
assert (a =. 8.76666666666666572);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-8.800000) (2.000000) ) ) ;;
assert (a =. -4.6);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.600000) (8.200000) ) ( wartosc_dokladnosc (7.200000) (1.600000) ) ) ;;
assert (a =. 1.33542453534771566);;
let a = min_wartosc ( plus ( wartosc_od_do (3.600000) (7.000000) ) ( plus ( razy ( razy ( wartosc_od_do (-9.600000) (9.400000) ) ( wartosc_dokladna (-3.400000) ) ) ( wartosc_dokladnosc (-9.200000) (6.400000) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) ;;
assert (a =. -315.906431999999938);;
let a = min_wartosc ( plus ( minus ( wartosc_dokladnosc (-4.600000) (9.400000) ) ( podzielic ( plus ( wartosc_dokladnosc (5.800000) (9.200000) ) ( wartosc_dokladnosc (-4.600000) (9.000000) ) ) ( podzielic ( wartosc_dokladna (-8.200000) ) ( wartosc_dokladna (-8.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -7.12761951219512202);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (-0.400000) ) ( wartosc_dokladnosc (4.400000) (8.800000) ) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) ( plus ( wartosc_od_do (-6.200000) (-2.800000) ) ( wartosc_dokladna (0.600000) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.800000) (-6.400000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 6.4);;
let a = min_wartosc ( razy ( plus ( wartosc_dokladna (9.400000) ) ( wartosc_dokladna (-0.800000) ) ) ( wartosc_od_do (-3.600000) (-3.000000) ) ) ;;
assert (a =. -30.96);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-0.200000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-8.600000) ) ) ) (-3.600000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-1.000000) (8.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-5.200000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. -5.2);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (2.800000) ) ( wartosc_od_do (1.600000) (9.200000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-8.600000) (0.000000) ) ( wartosc_dokladna (-9.400000) ) ) ;;
assert (a =. 80.84);;
let a = min_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (0.600000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-3.200000) (4.800000) ) ) ) ( wartosc_od_do (0.000000) (6.200000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.600000) (0.000000) ) ) ;;
assert (a =. 0.8);;
let a = min_wartosc ( minus ( wartosc_dokladna (1.600000) ) ( wartosc_dokladnosc (5.600000) (6.800000) ) ) ;;
assert (a =. -4.38079999999999892);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-5.400000) (0.200000) ) ( razy ( wartosc_dokladna (3.200000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -5.4);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-1.600000) (8.800000) ) ( wartosc_dokladnosc (-0.800000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( minus ( wartosc_dokladna (5.200000) ) ( wartosc_dokladnosc (5.400000) (0.000000) ) ) ;;
assert (a =. -0.200000000000000178);;
let a = in_wartosc ( minus ( wartosc_od_do (-4.200000) (5.600000) ) ( razy ( wartosc_dokladna (-6.400000) ) ( wartosc_od_do (-8.800000) (0.000000) ) ) ) (-9.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladnosc (2.200000) (6.600000) ) ( plus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (-6.000000) (7.800000) ) ) ) ( plus ( wartosc_dokladna (-3.400000) ) ( wartosc_dokladnosc (4.400000) (1.800000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( minus ( wartosc_od_do (-3.600000) (2.400000) ) ( wartosc_od_do (-4.200000) (-2.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 52.8);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.600000) ) ( wartosc_dokladnosc (-1.200000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (6.200000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-9.800000) (2.400000) ) ( wartosc_dokladnosc (-9.800000) (0.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.600000) (7.600000) ) ( wartosc_od_do (4.600000) (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.200000) (5.600000) ) ( wartosc_dokladna (6.400000) ) ) ;;
assert (a =. 1.062);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.600000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (4.200000) ) ( wartosc_dokladna (4.000000) ) ) (7.800000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-2.600000) ) ( plus ( wartosc_dokladnosc (-1.200000) (0.000000) ) ( wartosc_dokladna (6.600000) ) ) ) ;;
assert (a =. 2.79999999999999938);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (6.800000) (3.400000) ) ( wartosc_od_do (-4.800000) (8.800000) ) ) ;;
assert (a =. 4.79999999999999893);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (2.400000) ) ( podzielic ( plus ( podzielic ( wartosc_dokladna (-6.600000) ) ( minus ( razy ( wartosc_od_do (0.000000) (8.800000) ) ( wartosc_dokladnosc (-1.600000) (3.600000) ) ) ( razy ( minus ( wartosc_dokladna (-2.800000) ) ( wartosc_od_do (2.000000) (4.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ) ( wartosc_dokladna (-0.600000) ) ) ( wartosc_dokladnosc (0.000000) (9.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (5.800000) ) ) ;;
assert (a =. 29.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (2.200000) ) ( wartosc_od_do (-0.400000) (7.200000) ) ) ( wartosc_dokladnosc (0.000000) (5.800000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (3.400000) (6.200000) ) ( plus ( wartosc_od_do (-9.200000) (7.600000) ) ( minus ( wartosc_od_do (-4.800000) (0.000000) ) ( wartosc_dokladna (3.600000) ) ) ) ) ;;
assert (a =. -0.810799999999999521);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (8.200000) ) ) (5.400000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-6.200000) ) ( wartosc_dokladnosc (0.000000) (1.800000) ) ) ;;
assert (a =. -6.2);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-0.600000) (7.800000) ) ( podzielic ( wartosc_dokladnosc (6.400000) (0.000000) ) ( wartosc_dokladnosc (2.600000) (0.000000) ) ) ) (-2.400000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladna (5.200000) ) ) ;;
assert (a =. -1.49999999999999978);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.400000) (1.800000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-8.600000) (-7.600000) ) ) ;;
assert (a =. 7.6);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.600000) (5.400000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( podzielic ( wartosc_od_do (-8.200000) (5.000000) ) ( wartosc_dokladna (-3.600000) ) ) ( wartosc_dokladna (-6.800000) ) ) ;;
assert (a =. -8.18888888888888822);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-5.600000) (0.000000) ) ( wartosc_od_do (2.400000) (8.400000) ) ) ( wartosc_od_do (-6.400000) (0.000000) ) ) ;;
assert (a =. 0.375);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (7.400000) ) ( wartosc_dokladnosc (-5.000000) (8.600000) ) ) (-9.600000);;
assert (a = false);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladna (-0.400000) ) ( wartosc_od_do (-4.200000) (-0.800000) ) ) ( plus ( wartosc_dokladna (4.200000) ) ( wartosc_dokladnosc (-8.200000) (2.000000) ) ) ) ;;
assert (a =. -3.84399999999999853);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-0.200000) ) ( podzielic ( wartosc_dokladnosc (7.600000) (6.200000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-6.000000) (2.000000) ) ( wartosc_dokladna (4.200000) ) ) ;;
assert (a =. -1.67999999999999972);;
let a = in_wartosc ( razy ( wartosc_od_do (-5.800000) (0.000000) ) ( wartosc_dokladnosc (-1.600000) (3.200000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_od_do (-3.000000) (0.400000) ) ( wartosc_dokladna (-7.400000) ) ) ;;
assert (a =. -2.96000000000000041);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.400000) ) ( wartosc_od_do (0.000000) (3.600000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladna (-1.200000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-4.600000) (-3.400000) ) ) ;;
assert (a =. 4.8);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-4.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.400000) (0.000000) ) ( wartosc_dokladna (5.400000) ) ) (-9.200000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.600000) ) ( wartosc_dokladnosc (4.200000) (2.000000) ) ) ;;
assert (a =. -0.631681243926141778);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-2.800000) (0.600000) ) ) ( wartosc_dokladnosc (-8.200000) (0.200000) ) ) ;;
assert (a =. 11.8164);;
let a = sr_wartosc ( razy ( wartosc_od_do (-4.200000) (1.400000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ;;
assert (a =. 5.60000000000000053);;
let a = min_wartosc ( minus ( wartosc_od_do (-6.200000) (-2.400000) ) ( wartosc_od_do (6.400000) (7.800000) ) ) ;;
assert (a =. -14.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-5.400000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (-4.800000) (5.800000) ) ) ) ;;
assert (a =. -2.7);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (6.800000) (8.400000) ) ( wartosc_dokladna (-2.600000) ) ) (-1.600000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-4.400000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.400000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( razy ( wartosc_dokladna (-5.600000) ) ( wartosc_dokladna (-3.800000) ) ) ) ( wartosc_dokladnosc (9.800000) (7.600000) ) ) ;;
assert (a =. 10.7351999999999972);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.400000) ) ( wartosc_od_do (-3.000000) (8.800000) ) ) (-7.600000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-7.200000) (0.000000) ) ( wartosc_od_do (-3.600000) (0.000000) ) ) ;;
assert (a =. 12.96);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.200000) ) ( minus ( wartosc_od_do (0.000000) (4.400000) ) ( wartosc_dokladna (8.200000) ) ) ) (-4.400000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (8.400000) (4.600000) ) ( wartosc_od_do (-8.600000) (-1.000000) ) ) (-9.200000);;
assert (a = false);;
let a = in_wartosc ( razy ( razy ( wartosc_dokladna (-1.400000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-10.000000) (7.800000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-8.200000) (-6.600000) ) ( wartosc_dokladnosc (-9.000000) (9.200000) ) ) ( wartosc_dokladna (0.400000) ) ) ;;
assert (a =. 0.271550671550671474);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-3.200000) ) ) ;;
assert (a =. -3.2);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-0.400000) ) ( wartosc_od_do (5.600000) (9.200000) ) ) ;;
assert (a =. -0.0434782608695652231);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (0.000000) (5.600000) ) ( podzielic ( wartosc_dokladna (1.400000) ) ( wartosc_dokladnosc (-9.400000) (0.000000) ) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-9.200000) (3.600000) ) ( wartosc_dokladnosc (-6.800000) (0.000000) ) ) ( minus ( razy ( wartosc_dokladnosc (-4.400000) (8.600000) ) ( wartosc_od_do (-1.000000) (-0.600000) ) ) ( podzielic ( wartosc_od_do (-6.800000) (-1.800000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( plus ( wartosc_od_do (-8.000000) (7.200000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( podzielic ( wartosc_od_do (2.600000) (7.200000) ) ( wartosc_dokladnosc (0.000000) (0.600000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.200000) ) ( wartosc_od_do (-7.200000) (7.800000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (2.600000) ) ) ;;
assert (a =. 2.30769230769230749);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (8.200000) (6.000000) ) ( wartosc_od_do (0.000000) (4.800000) ) ) ;;
assert (a =. 10.5999999999999979);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.800000) (7.400000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -1.9);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-0.800000) (1.400000) ) ( wartosc_dokladnosc (-9.200000) (9.800000) ) ) ;;
assert (a =. 0.0780866397402391887);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (2.400000) ) ( wartosc_dokladnosc (6.000000) (4.400000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.400000) (-4.400000) ) ( wartosc_dokladnosc (-5.400000) (6.200000) ) ) ;;
assert (a =. 1.01538461996061);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (-9.600000) ) ( wartosc_od_do (0.600000) (4.200000) ) ) ( wartosc_od_do (-2.800000) (0.200000) ) ) ;;
assert (a =. 44.8);;
let a = in_wartosc ( plus ( wartosc_dokladna (9.600000) ) ( wartosc_od_do (0.000000) (5.800000) ) ) (-2.400000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-6.400000) (8.400000) ) ( wartosc_dokladnosc (0.600000) (0.000000) ) ) ;;
assert (a =. -9.77066666666666706);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-3.000000) (0.400000) ) ( wartosc_dokladnosc (6.800000) (9.600000) ) ) ;;
assert (a =. -9.8);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-0.800000) ) ( minus ( wartosc_dokladnosc (-0.400000) (8.400000) ) ( podzielic ( minus ( plus ( wartosc_dokladna (9.200000) ) ( wartosc_od_do (6.000000) (8.000000) ) ) ( wartosc_dokladnosc (7.000000) (2.600000) ) ) ( wartosc_od_do (-9.200000) (0.000000) ) ) ) ) ;;
assert (a =. -0.913405214352376094);;
let a = max_wartosc ( plus ( wartosc_od_do (-4.200000) (1.400000) ) ( plus ( wartosc_od_do (-3.800000) (8.600000) ) ( wartosc_od_do (-2.200000) (0.000000) ) ) ) ;;
assert (a =. 10.);;
let a = max_wartosc ( minus ( wartosc_od_do (-6.200000) (0.000000) ) ( wartosc_dokladnosc (-8.800000) (8.600000) ) ) ;;
assert (a =. 9.5568);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.600000) (7.600000) ) ( wartosc_dokladna (0.000000) ) ) (-4.400000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (9.000000) (2.400000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_od_do (5.600000) (6.200000) ) ( wartosc_dokladna (3.600000) ) ) ;;
assert (a =. 2.6);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-5.400000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-4.600000) (1.400000) ) ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-9.800000) (6.400000) ) ) ) (-9.200000);;
assert (a = false);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladna (7.400000) ) ( wartosc_od_do (0.000000) (0.600000) ) ) ( wartosc_dokladna (2.600000) ) ) ;;
assert (a =. 18.46);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (1.400000) (0.000000) ) ( plus ( wartosc_dokladnosc (-9.400000) (8.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. -1.61280000000000134);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-4.800000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-4.400000);;
assert (a = false);;
let a = max_wartosc ( minus ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (-5.400000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (-5.400000) ) ) ( razy ( wartosc_od_do (-8.800000) (-2.200000) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a =. 34.2);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.200000) (3.000000) ) ( wartosc_od_do (-6.600000) (0.000000) ) ) ;;
assert (a =. 1.35212121212121206);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-3.800000) (8.800000) ) ( wartosc_od_do (-7.600000) (1.800000) ) ) (4.800000);;
assert (a = false);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladna (-1.200000) ) ( podzielic ( wartosc_od_do (-4.200000) (-2.600000) ) ( minus ( minus ( podzielic ( wartosc_dokladna (-3.800000) ) ( wartosc_dokladna (4.600000) ) ) ( podzielic ( wartosc_od_do (-6.400000) (-3.000000) ) ( wartosc_dokladnosc (-5.200000) (5.600000) ) ) ) ( wartosc_od_do (-0.600000) (0.800000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.200000) (0.000000) ) ) ;;
assert (a =. -6.2);;
let a = max_wartosc ( minus ( wartosc_od_do (9.800000) (9.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 9.8);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (3.800000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (-2.600000) (8.200000) ) ( wartosc_dokladnosc (-6.600000) (4.600000) ) ) ( wartosc_dokladnosc (-4.000000) (9.400000) ) ) ;;
assert (a =. -3.21106562480147417);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-0.400000) (8.200000) ) ( wartosc_dokladna (3.600000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-2.400000) (0.800000) ) ) ;;
assert (a =. -3.33354668032087398);;
let a = min_wartosc ( razy ( minus ( razy ( wartosc_od_do (0.000000) (7.200000) ) ( minus ( minus ( razy ( wartosc_dokladnosc (6.200000) (8.800000) ) ( wartosc_dokladnosc (-3.400000) (7.400000) ) ) ( podzielic ( wartosc_dokladnosc (-1.800000) (2.800000) ) ( minus ( wartosc_dokladnosc (5.600000) (3.400000) ) ( wartosc_dokladna (9.600000) ) ) ) ) ( wartosc_dokladna (-3.200000) ) ) ) ( wartosc_dokladnosc (4.600000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.400000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.600000) (-3.200000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (7.200000) ) ( podzielic ( wartosc_od_do (0.000000) (9.200000) ) ( wartosc_dokladna (5.600000) ) ) ) ( plus ( wartosc_dokladna (-7.400000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.400000) (4.600000) ) ) ) ) ) (6.800000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-9.200000) ) ( podzielic ( wartosc_dokladnosc (-5.800000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (7.600000) ) ( wartosc_od_do (-8.000000) (5.600000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (3.600000) (3.600000) ) ( razy ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladnosc (8.200000) (0.000000) ) ( wartosc_dokladnosc (0.800000) (6.800000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-0.400000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-8.800000) (8.600000) ) ) (4.400000);;
assert (a = false);;
let a = max_wartosc ( plus ( razy ( wartosc_dokladnosc (-3.600000) (9.000000) ) ( wartosc_dokladnosc (-5.400000) (6.000000) ) ) ( wartosc_dokladnosc (3.200000) (0.000000) ) ) ;;
assert (a =. 25.660975999999998);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (8.000000) (3.000000) ) ( plus ( wartosc_dokladna (-3.200000) ) ( wartosc_dokladnosc (7.000000) (3.000000) ) ) ) ( wartosc_dokladna (-3.400000) ) ) ;;
assert (a =. -6.57955112219451355);;
let a = in_wartosc ( podzielic ( podzielic ( razy ( wartosc_dokladnosc (-1.200000) (3.400000) ) ( podzielic ( wartosc_od_do (0.000000) (4.400000) ) ( wartosc_od_do (-5.800000) (5.000000) ) ) ) ( wartosc_od_do (1.400000) (3.800000) ) ) ( wartosc_dokladnosc (-8.600000) (9.800000) ) ) (-4.200000);;
assert (a = true);;
let a = sr_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_dokladnosc (5.600000) (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (3.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (1.400000) (6.200000) ) ( wartosc_dokladna (6.600000) ) ) (4.800000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (5.400000) ) ( podzielic ( wartosc_od_do (-1.400000) (4.200000) ) ( plus ( razy ( wartosc_dokladnosc (6.400000) (8.200000) ) ( wartosc_dokladnosc (3.400000) (0.400000) ) ) ( wartosc_od_do (-1.000000) (6.200000) ) ) ) ) ;;
assert (a =. 5.17772811682928591);;
let a = in_wartosc ( razy ( wartosc_dokladna (-1.600000) ) ( wartosc_od_do (-5.000000) (4.800000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (8.400000) ) ) ( wartosc_od_do (-6.400000) (4.200000) ) ) ;;
assert (a =. 8.4);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.400000) ) ( wartosc_dokladnosc (-7.800000) (2.200000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (1.800000) (0.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (2.600000) (6.800000) ) ( wartosc_dokladna (0.800000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (2.000000) (4.600000) ) ( wartosc_dokladnosc (-9.600000) (3.400000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. 3.65124266985969115);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (4.400000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladnosc (-4.400000) (9.000000) ) ( minus ( wartosc_od_do (-3.000000) (-2.000000) ) ( wartosc_dokladnosc (0.000000) (3.600000) ) ) ) ) ( wartosc_dokladna (-9.000000) ) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( plus ( wartosc_od_do (-1.000000) (0.200000) ) ( wartosc_dokladnosc (0.600000) (4.800000) ) ) ( wartosc_od_do (-3.800000) (-3.400000) ) ) (2.400000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (3.000000) (9.600000) ) ( razy ( wartosc_od_do (-2.400000) (8.200000) ) ( wartosc_dokladna (3.200000) ) ) ) ;;
assert (a =. 15.5799999999999983);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (7.600000) (9.600000) ) ( wartosc_od_do (0.000000) (7.600000) ) ) (-5.800000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (-0.200000) ) ( wartosc_dokladna (4.200000) ) ) ;;
assert (a =. -0.84000000000000008);;
let a = sr_wartosc ( podzielic ( razy ( plus ( podzielic ( podzielic ( wartosc_od_do (-9.200000) (-2.400000) ) ( podzielic ( wartosc_dokladnosc (8.800000) (9.000000) ) ( wartosc_dokladnosc (9.400000) (5.000000) ) ) ) ( wartosc_dokladna (-8.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_od_do (3.800000) (4.000000) ) ( plus ( wartosc_od_do (-1.800000) (2.200000) ) ( podzielic ( wartosc_dokladnosc (-9.800000) (9.600000) ) ( wartosc_dokladnosc (2.800000) (4.600000) ) ) ) ) ) ( wartosc_od_do (0.000000) (5.200000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (4.200000) (5.600000) ) ( wartosc_dokladnosc (0.000000) (9.600000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. -4.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (-5.600000) (2.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (2.000000) (0.200000) ) ( wartosc_od_do (-8.400000) (-6.800000) ) ) ( wartosc_dokladnosc (1.200000) (4.200000) ) ) ;;
assert (a =. -1.46616246498599434);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-9.800000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (9.600000) ) ( wartosc_dokladnosc (-3.600000) (0.000000) ) ) ;;
assert (a =. -0.0833333333333332593);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-1.600000) (4.200000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (9.800000) (8.200000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (3.400000) (2.800000) ) ) ) ( plus ( wartosc_od_do (-1.200000) (0.000000) ) ( wartosc_dokladna (9.800000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-1.600000) (8.800000) ) ( wartosc_dokladnosc (-9.200000) (7.800000) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-9.800000) (0.000000) ) ) ;;
assert (a =. -39.2);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (7.600000) ) ( wartosc_dokladnosc (-2.600000) (0.000000) ) ) ;;
assert (a =. -2.92307692307692246);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (5.400000) ) ( wartosc_od_do (-9.200000) (-4.200000) ) ) ;;
assert (a =. -0.586956521739130488);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( razy ( minus ( wartosc_dokladnosc (-5.800000) (7.200000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.800000) (0.200000) ) ( wartosc_dokladna (-3.400000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (1.000000) (0.200000) ) ( wartosc_dokladnosc (-2.200000) (7.600000) ) ) ;;
assert (a =. -1.03080000000000038);;
let a = in_wartosc ( minus ( wartosc_od_do (-6.400000) (-1.600000) ) ( wartosc_od_do (-9.400000) (0.000000) ) ) (-6.800000);;
assert (a = false);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladnosc (4.800000) (8.200000) ) ) ) ( wartosc_dokladnosc (0.000000) (8.400000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-6.200000) (1.400000) ) ( wartosc_dokladna (-7.600000) ) ) ( wartosc_dokladnosc (4.600000) (0.000000) ) ) ) (7.200000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.600000) ) ( wartosc_dokladnosc (-0.800000) (0.000000) ) ) ;;
assert (a =. -3.67999999999999972);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-8.200000) (0.200000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (3.400000) ) ( wartosc_dokladna (-4.200000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladnosc (2.000000) (9.000000) ) ( wartosc_dokladnosc (8.200000) (1.000000) ) ) ( wartosc_dokladnosc (3.800000) (6.400000) ) ) ;;
assert (a =. -1.81680161943319818);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (-2.800000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.200000) ) ) ( wartosc_dokladna (1.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( podzielic ( plus ( razy ( wartosc_dokladna (-0.200000) ) ( wartosc_dokladnosc (-3.800000) (3.600000) ) ) ( wartosc_dokladnosc (-5.400000) (7.000000) ) ) ( wartosc_dokladnosc (9.600000) (1.600000) ) ) ( wartosc_od_do (-4.200000) (3.200000) ) ) ;;
assert (a =. 2.243236788617887);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.800000) (-3.200000) ) ( podzielic ( wartosc_od_do (-8.200000) (7.600000) ) ( wartosc_od_do (-4.200000) (-3.200000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (2.200000) (6.600000) ) ( wartosc_dokladna (4.400000) ) ) ;;
assert (a =. 0.999999999999999889);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.400000) (2.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (2.200000) ) ( minus ( wartosc_dokladnosc (-9.800000) (8.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (4.200000) ) ( wartosc_dokladna (-5.200000) ) ) ;;
assert (a =. -0.807692307692307709);;
let a = sr_wartosc ( plus ( wartosc_od_do (-8.600000) (9.400000) ) ( minus ( wartosc_dokladnosc (3.400000) (0.000000) ) ( wartosc_od_do (0.000000) (6.400000) ) ) ) ;;
assert (a =. 0.600000000000000533);;
let a = sr_wartosc ( razy ( wartosc_od_do (8.000000) (8.400000) ) ( plus ( wartosc_dokladna (-3.000000) ) ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-3.000000) (4.600000) ) ) ) ) ;;
assert (a =. -30.0844050009820805);;
let a = sr_wartosc ( razy ( wartosc_dokladna (1.400000) ) ( wartosc_od_do (-2.200000) (0.000000) ) ) ;;
assert (a =. -1.54);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-1.200000) ) ) ( wartosc_dokladna (-8.200000) ) ) ;;
assert (a =. -0.609756097560975707);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (-2.400000) ) ( wartosc_dokladna (3.400000) ) ) ( wartosc_dokladna (-1.800000) ) ) ;;
assert (a =. 1.2705882352941178);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-5.200000) (5.400000) ) ( podzielic ( wartosc_dokladnosc (2.800000) (1.800000) ) ( wartosc_od_do (-4.600000) (1.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (3.800000) (0.000000) ) ( wartosc_dokladna (7.200000) ) ) ;;
assert (a =. -3.40000000000000036);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-3.800000) (3.400000) ) ( minus ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (3.400000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-1.400000) (3.200000) ) ) ) ( wartosc_dokladna (4.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-5.000000) (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.200000) (0.000000) ) ( podzielic ( podzielic ( minus ( wartosc_dokladna (-9.600000) ) ( wartosc_dokladnosc (3.800000) (2.600000) ) ) ( wartosc_dokladnosc (-4.600000) (0.200000) ) ) ( wartosc_od_do (-8.400000) (-6.600000) ) ) ) ;;
assert (a =. 7.56810874206838502);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (5.000000) ) ( plus ( razy ( wartosc_od_do (-5.000000) (9.600000) ) ( razy ( wartosc_dokladnosc (-2.000000) (4.200000) ) ( wartosc_od_do (-3.800000) (3.000000) ) ) ) ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.600000) ) ) ( plus ( razy ( wartosc_dokladnosc (-10.000000) (8.600000) ) ( wartosc_dokladnosc (-0.800000) (0.000000) ) ) ( wartosc_dokladna (-2.400000) ) ) ) ) ) (-4.800000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (7.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -11.7199999999999989);;
let a = sr_wartosc ( podzielic ( minus ( minus ( wartosc_od_do (-9.800000) (-6.200000) ) ( podzielic ( plus ( wartosc_dokladnosc (-2.800000) (0.000000) ) ( razy ( wartosc_dokladnosc (-1.800000) (8.400000) ) ( wartosc_dokladnosc (-5.800000) (0.000000) ) ) ) ( wartosc_dokladnosc (3.200000) (9.000000) ) ) ) ( wartosc_dokladna (1.600000) ) ) ( wartosc_dokladnosc (2.800000) (0.000000) ) ) ;;
assert (a =. -4.29709378105511774);;
let a = in_wartosc ( plus ( razy ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladnosc (-8.800000) (1.600000) ) ( wartosc_od_do (-6.800000) (0.000000) ) ) ) ( wartosc_od_do (-7.200000) (3.000000) ) ) (-4.800000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (0.600000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (4.600000) ) ( wartosc_dokladna (7.600000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_od_do (-2.000000) (7.800000) ) ( razy ( wartosc_dokladna (7.800000) ) ( wartosc_od_do (-4.200000) (2.600000) ) ) ) ;;
assert (a =. -34.76);;
let a = max_wartosc ( razy ( wartosc_od_do (-2.400000) (0.000000) ) ( razy ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (4.800000) (3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( minus ( wartosc_od_do (8.600000) (9.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_od_do (0.000000) (0.200000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (3.200000) (7.200000) ) ( wartosc_od_do (0.000000) (0.400000) ) ) (9.400000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-6.600000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-8.200000) (8.200000) ) ( wartosc_dokladna (-5.600000) ) ) (3.200000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-0.800000) (0.000000) ) ( podzielic ( wartosc_dokladna (1.200000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.400000) (0.800000) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ;;
assert (a =. -0.472457142857142798);;
let a = max_wartosc ( plus ( wartosc_od_do (5.000000) (6.600000) ) ( wartosc_od_do (-10.000000) (-9.400000) ) ) ;;
assert (a =. -2.80000000000000071);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.200000) ) ) ( wartosc_od_do (-9.000000) (-3.800000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-2.600000) (3.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (-7.400000) (0.000000) ) ( wartosc_od_do (-0.800000) (7.400000) ) ) ;;
assert (a =. 7.4);;
let a = max_wartosc ( minus ( plus ( wartosc_od_do (-9.800000) (-6.400000) ) ( wartosc_dokladnosc (-9.600000) (7.400000) ) ) ( razy ( podzielic ( podzielic ( plus ( wartosc_dokladna (7.800000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (0.200000) (7.200000) ) ) ( wartosc_dokladnosc (4.200000) (0.000000) ) ) ( wartosc_dokladnosc (6.600000) (8.400000) ) ) ) ;;
assert (a =. -67.6568707889125562);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-8.400000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-5.400000) ) ) ( wartosc_od_do (-9.400000) (7.200000) ) ) ( razy ( podzielic ( wartosc_dokladnosc (9.200000) (8.400000) ) ( wartosc_dokladna (1.600000) ) ) ( wartosc_od_do (-0.600000) (0.000000) ) ) ) ( wartosc_dokladnosc (-4.600000) (2.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (2.400000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -3.6);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-8.200000) (8.600000) ) ) ;;
assert (a =. 8.2);;
let a = in_wartosc ( minus ( razy ( wartosc_od_do (-0.600000) (8.600000) ) ( podzielic ( wartosc_od_do (-2.400000) (8.800000) ) ( razy ( wartosc_dokladnosc (-2.400000) (0.000000) ) ( wartosc_dokladnosc (-1.800000) (0.800000) ) ) ) ) ( wartosc_dokladna (1.600000) ) ) (-3.600000);;
assert (a = true);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladnosc (3.200000) (0.000000) ) ) ;;
assert (a =. -3.2);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (4.600000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (5.600000) (9.000000) ) ( wartosc_od_do (-8.400000) (8.400000) ) ) ;;
assert (a =. 7.29999999999999893);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (9.400000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -0.940000000000000058);;
let a = in_wartosc ( minus ( wartosc_od_do (-7.400000) (0.000000) ) ( wartosc_dokladnosc (6.200000) (4.600000) ) ) (-9.400000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (2.400000) (6.200000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-4.800000) ) ( wartosc_od_do (-2.200000) (0.000000) ) ) ( wartosc_od_do (-6.800000) (-5.000000) ) ) ;;
assert (a =. -0.320855614973262038);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladnosc (8.800000) (3.800000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_od_do (-9.400000) (5.800000) ) ) ;;
assert (a =. -16.4419200000000032);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (-0.800000) (2.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.800000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-8.600000) ) ) ( wartosc_od_do (-2.200000) (8.600000) ) ) (-5.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladna (5.600000) ) ( wartosc_od_do (-6.600000) (6.200000) ) ) ;;
assert (a =. 11.8);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.600000) (7.600000) ) ( wartosc_od_do (-8.200000) (4.400000) ) ) ;;
assert (a =. 3.5);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (0.000000) (5.800000) ) ) ;;
assert (a =. 2.9);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (-5.800000) ) ) ;;
assert (a =. 0.517241379310344862);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.600000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.400000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (5.600000) (0.000000) ) ( wartosc_dokladnosc (7.400000) (0.000000) ) ) ;;
assert (a =. 0.756756756756756577);;
let a = min_wartosc ( minus ( wartosc_dokladna (8.800000) ) ( wartosc_dokladnosc (0.000000) (2.400000) ) ) ;;
assert (a =. 8.8);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-8.400000) (0.800000) ) ( minus ( razy ( wartosc_dokladna (-3.400000) ) ( wartosc_dokladnosc (5.200000) (0.000000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) (-9.200000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.600000) ) ( razy ( wartosc_dokladnosc (-2.600000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (1.600000) ) ) ) ;;
assert (a =. 0.599332916406087102);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.200000) ) ( wartosc_od_do (0.000000) (3.800000) ) ) ;;
assert (a =. 2.15789473684210487);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-8.200000) (7.600000) ) ( podzielic ( wartosc_dokladnosc (-8.400000) (0.400000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (-8.600000) ) ( wartosc_dokladna (5.400000) ) ) ( razy ( podzielic ( wartosc_od_do (-1.200000) (9.400000) ) ( minus ( wartosc_od_do (-9.600000) (-8.400000) ) ( wartosc_od_do (-9.200000) (-5.000000) ) ) ) ( wartosc_od_do (-1.200000) (6.600000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( plus ( plus ( wartosc_dokladnosc (9.400000) (8.000000) ) ( wartosc_od_do (-9.800000) (1.000000) ) ) ( wartosc_dokladnosc (-2.200000) (7.600000) ) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) (-7.400000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-9.800000) (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (2.600000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-7.400000) (0.000000) ) ( razy ( wartosc_dokladna (-7.600000) ) ( wartosc_dokladna (2.200000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-1.200000) (4.800000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ;;
assert (a =. 0.989690721649484573);;
let a = max_wartosc ( razy ( minus ( wartosc_od_do (7.600000) (8.400000) ) ( wartosc_dokladna (0.000000) ) ) ( razy ( wartosc_od_do (-9.400000) (4.800000) ) ( wartosc_od_do (-4.600000) (-3.000000) ) ) ) ;;
assert (a =. 363.215999999999951);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-8.200000) (5.200000) ) ( wartosc_dokladna (9.600000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (1.600000) ) ( wartosc_dokladnosc (5.800000) (0.000000) ) ) ;;
assert (a =. -4.19999999999999929);;
let a = min_wartosc ( razy ( wartosc_dokladna (8.600000) ) ( razy ( wartosc_od_do (-9.400000) (-8.200000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.800000) (0.600000) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.800000) ) ( minus ( wartosc_dokladnosc (-10.000000) (7.200000) ) ( razy ( wartosc_dokladnosc (-8.600000) (9.600000) ) ( wartosc_od_do (-3.600000) (0.600000) ) ) ) ) ;;
assert (a =. -0.110355787057473287);;
let a = sr_wartosc ( razy ( wartosc_od_do (-9.000000) (-3.200000) ) ( wartosc_dokladna (9.200000) ) ) ;;
assert (a =. -56.12);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( plus ( minus ( podzielic ( wartosc_od_do (-4.400000) (6.200000) ) ( wartosc_od_do (-2.600000) (-2.400000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ( wartosc_od_do (-1.800000) (9.800000) ) ) ( razy ( wartosc_dokladnosc (0.600000) (6.400000) ) ( razy ( wartosc_od_do (-7.200000) (6.600000) ) ( podzielic ( wartosc_dokladnosc (9.200000) (7.000000) ) ( wartosc_dokladna (-7.600000) ) ) ) ) ) (3.200000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-0.800000) (0.000000) ) ( wartosc_od_do (-8.200000) (8.800000) ) ) ( wartosc_od_do (-2.400000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-6.200000) (0.000000) ) ( wartosc_dokladna (-9.400000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-3.600000) (-1.000000) ) ( minus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ( minus ( podzielic ( wartosc_dokladnosc (-9.200000) (0.000000) ) ( wartosc_dokladnosc (-8.600000) (0.000000) ) ) ( plus ( podzielic ( wartosc_od_do (-2.000000) (8.600000) ) ( wartosc_dokladna (6.600000) ) ) ( wartosc_od_do (-7.800000) (0.000000) ) ) ) ) ;;
assert (a =. -8.17279774489076871);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladnosc (-5.800000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (6.800000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.200000) (0.000000) ) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 46.);;
let a = max_wartosc ( podzielic ( minus ( wartosc_od_do (-5.200000) (0.000000) ) ( razy ( plus ( wartosc_od_do (-6.800000) (-6.800000) ) ( wartosc_dokladna (7.200000) ) ) ( wartosc_od_do (-3.800000) (0.000000) ) ) ) ( wartosc_dokladnosc (-5.400000) (5.600000) ) ) ;;
assert (a =. 1.02008788449466414);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-1.200000) (1.200000) ) ) ) ;;
assert (a =. -0.96);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (0.400000) (0.000000) ) ( wartosc_od_do (-7.600000) (-5.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_od_do (-9.400000) (-3.200000) ) ( wartosc_dokladna (-1.400000) ) ) ;;
assert (a =. 4.47999999999999954);;
let a = in_wartosc ( minus ( wartosc_od_do (-1.600000) (-0.200000) ) ( razy ( podzielic ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (1.400000) ) ( wartosc_od_do (-10.000000) (5.800000) ) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladna (-1.600000) ) ) ( wartosc_dokladnosc (-9.600000) (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.400000) (6.600000) ) ( wartosc_dokladnosc (-4.800000) (5.600000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-8.600000) (0.000000) ) ( wartosc_dokladna (-1.600000) ) ) (-0.600000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-8.800000) (0.000000) ) ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( minus ( wartosc_dokladna (-6.200000) ) ( wartosc_od_do (-9.000000) (6.400000) ) ) ) ) ;;
assert (a =. 7.80000000000000071);;
let a = max_wartosc ( minus ( minus ( wartosc_od_do (0.000000) (2.200000) ) ( wartosc_dokladnosc (0.600000) (3.400000) ) ) ( plus ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_dokladnosc (0.600000) (4.600000) ) ) ) ;;
assert (a =. 1.048);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.800000) ) ( wartosc_od_do (-10.000000) (4.800000) ) ) ;;
assert (a =. 10.);;
let a = min_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-5.600000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (2.600000) ) ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-6.200000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.200000) ) ( wartosc_dokladnosc (0.000000) (4.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-6.800000) (0.000000) ) ( wartosc_od_do (-7.600000) (2.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (0.600000) ) ( wartosc_dokladna (-4.400000) ) ) ( wartosc_od_do (-4.600000) (-4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) (-8.200000);;
assert (a = false);;
let a = min_wartosc ( minus ( minus ( podzielic ( wartosc_od_do (-2.000000) (7.200000) ) ( wartosc_dokladna (-5.600000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( plus ( minus ( wartosc_dokladnosc (0.000000) (2.200000) ) ( wartosc_dokladna (8.200000) ) ) ( wartosc_dokladnosc (4.400000) (0.000000) ) ) ) ;;
assert (a =. 2.51428571428571335);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-0.200000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (6.400000);;
assert (a = false);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (7.800000) (0.200000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( minus ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-8.800000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (3.000000) (9.400000) ) ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( wartosc_dokladna (-3.800000) ) ) ) ) ) ( wartosc_dokladna (-3.800000) ) ) ) (0.800000);;
assert (a = false);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( plus ( minus ( minus ( wartosc_dokladnosc (-7.400000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-10.000000) (-9.000000) ) ) ( wartosc_dokladnosc (7.200000) (3.400000) ) ) ) ( podzielic ( wartosc_dokladna (-7.800000) ) ( wartosc_od_do (-1.600000) (0.800000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (1.200000) (9.400000) ) ( razy ( wartosc_od_do (-7.000000) (-5.400000) ) ( wartosc_dokladna (0.200000) ) ) ) ( wartosc_dokladna (6.600000) ) ) ;;
assert (a =. -1.31874298540965196);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (9.000000) (1.800000) ) ( razy ( razy ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (-5.800000) (3.800000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.600000) (-1.800000) ) ) ) ) ( plus ( wartosc_dokladnosc (2.400000) (0.000000) ) ( wartosc_od_do (0.000000) (9.600000) ) ) ) ) ;;
assert (a =. 8.838);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-1.400000) (0.000000) ) ( wartosc_dokladna (-0.400000) ) ) ;;
assert (a =. -0.999999999999999889);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladnosc (0.000000) (4.200000) ) ( wartosc_dokladnosc (4.800000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (3.200000) (3.800000) ) ( wartosc_dokladnosc (0.000000) (6.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-7.600000) ) ( wartosc_od_do (2.600000) (7.000000) ) ) ;;
assert (a =. -2.00439560439560394);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-5.800000) ) ( wartosc_od_do (-9.600000) (-4.200000) ) ) ;;
assert (a =. 0.992559523809523725);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.200000) (7.000000) ) ( wartosc_dokladna (-5.800000) ) ) ;;
assert (a =. -1.5862068965517242);;
let a = min_wartosc ( podzielic ( razy ( wartosc_od_do (8.200000) (8.400000) ) ( wartosc_dokladna (3.800000) ) ) ( wartosc_dokladnosc (1.200000) (8.400000) ) ) ;;
assert (a =. 23.9544895448954485);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-1.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.800000) ) ( wartosc_dokladnosc (0.000000) (1.200000) ) ) (7.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (2.800000) (9.800000) ) ( podzielic ( wartosc_dokladnosc (7.800000) (0.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (6.800000) ) ( wartosc_od_do (0.000000) (5.800000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (6.200000) ) ( wartosc_dokladnosc (-0.200000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-0.600000) ) ( wartosc_dokladna (0.000000) ) ) (4.800000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-4.400000) ) ( podzielic ( wartosc_od_do (0.000000) (0.400000) ) ( wartosc_dokladna (-9.800000) ) ) ) ;;
assert (a =. 107.800000000000026);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (-3.400000) ) ( plus ( wartosc_od_do (-1.800000) (0.000000) ) ( wartosc_dokladnosc (0.400000) (5.200000) ) ) ) ( wartosc_od_do (0.000000) (9.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (8.200000) ) ) (-0.200000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (-5.200000) ) ( minus ( wartosc_dokladna (-5.600000) ) ( wartosc_dokladnosc (0.000000) (8.200000) ) ) ) ;;
assert (a =. 29.1199999999999974);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (-4.800000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (2.600000) ) ) (-9.400000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-5.400000) (0.000000) ) ( wartosc_dokladna (4.800000) ) ) ;;
assert (a =. -1.12500000000000022);;
let a = max_wartosc ( podzielic ( wartosc_od_do (6.600000) (8.400000) ) ( wartosc_dokladnosc (0.400000) (7.800000) ) ) ;;
assert (a =. 22.7765726681128);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-7.200000) (5.800000) ) ( wartosc_od_do (-1.000000) (3.400000) ) ) ( wartosc_dokladna (-6.600000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-4.200000) (5.200000) ) ( plus ( wartosc_od_do (-5.600000) (7.600000) ) ( wartosc_dokladnosc (-3.400000) (8.400000) ) ) ) ( podzielic ( podzielic ( wartosc_od_do (-7.200000) (0.000000) ) ( wartosc_dokladna (-7.800000) ) ) ( wartosc_od_do (-8.600000) (5.200000) ) ) ) (4.600000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_od_do (-7.400000) (0.200000) ) ( wartosc_dokladna (-0.400000) ) ) ;;
assert (a =. -0.2);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-8.000000) (8.800000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (2.800000) ) ( wartosc_od_do (-9.400000) (-8.800000) ) ) (2.400000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.800000) (4.000000) ) ( podzielic ( wartosc_od_do (-8.800000) (0.000000) ) ( wartosc_dokladnosc (-9.600000) (0.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-3.600000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (2.200000) (0.600000) ) ( wartosc_dokladna (1.800000) ) ) ) ;;
assert (a =. -2.52911111111111087);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-6.600000) (7.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.800000) (3.200000) ) ( wartosc_od_do (4.000000) (9.200000) ) ) ;;
assert (a =. 0.8);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.200000) (-3.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (7.400000) ) ( wartosc_dokladnosc (-2.400000) (3.200000) ) ) ( wartosc_od_do (-7.600000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.200000) ) ( wartosc_od_do (0.000000) (2.800000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (9.200000) ) ( wartosc_dokladna (0.000000) ) ) (1.600000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladna (4.400000) ) ( razy ( wartosc_od_do (-7.800000) (0.000000) ) ( wartosc_od_do (-7.600000) (2.800000) ) ) ) ;;
assert (a =. 26.240000000000002);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.600000) (-1.400000) ) ( wartosc_dokladna (-5.600000) ) ) ;;
assert (a =. 1.71428571428571419);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (2.400000) (3.800000) ) ( wartosc_dokladna (4.800000) ) ) ( wartosc_od_do (3.000000) (6.400000) ) ) (1.800000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (1.400000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.600000) (6.800000) ) ( wartosc_od_do (0.000000) (6.400000) ) ) (7.800000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.800000) (-0.600000) ) ( wartosc_od_do (0.400000) (1.600000) ) ) (-4.400000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (5.800000) (2.600000) ) ( wartosc_dokladnosc (0.000000) (8.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (0.600000) (9.400000) ) ( wartosc_dokladna (1.400000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( razy ( wartosc_od_do (-4.600000) (8.800000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (3.800000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladnosc (-2.000000) (4.200000) ) ( wartosc_dokladnosc (7.400000) (5.800000) ) ) ( wartosc_od_do (-3.800000) (9.000000) ) ) ;;
assert (a =. -25.3160528);;
let a = sr_wartosc ( plus ( wartosc_od_do (1.600000) (1.800000) ) ( podzielic ( plus ( minus ( wartosc_od_do (-6.600000) (0.600000) ) ( wartosc_dokladnosc (-6.600000) (0.000000) ) ) ( wartosc_od_do (0.000000) (5.400000) ) ) ( wartosc_dokladna (1.200000) ) ) ) ;;
assert (a =. 6.95);;
let a = max_wartosc ( minus ( podzielic ( wartosc_od_do (-10.000000) (-6.000000) ) ( wartosc_dokladna (2.200000) ) ) ( wartosc_dokladnosc (-4.000000) (3.400000) ) ) ;;
assert (a =. 1.40872727272727305);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.800000) (3.800000) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-7.800000) (0.000000) ) ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (6.600000) (7.800000) ) ) ;;
assert (a =. 7.19999999999999929);;
let a = min_wartosc ( minus ( wartosc_dokladna (-1.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -1.6);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (3.600000) (7.600000) ) ) ;;
assert (a =. 3.6);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (-9.200000) ) ( wartosc_dokladnosc (-8.000000) (2.800000) ) ) ( wartosc_dokladnosc (5.800000) (5.800000) ) ) ;;
assert (a =. 6.11200389105058228);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.800000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 1.40000000000000013);;
let a = min_wartosc ( razy ( wartosc_dokladna (-4.400000) ) ( minus ( plus ( wartosc_od_do (-2.600000) (0.000000) ) ( podzielic ( minus ( wartosc_od_do (-4.200000) (0.000000) ) ( wartosc_dokladnosc (2.400000) (3.000000) ) ) ( wartosc_dokladna (-7.400000) ) ) ) ( minus ( podzielic ( podzielic ( wartosc_dokladnosc (-8.400000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-5.200000) ) ) ( wartosc_dokladna (3.200000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.200000) (-3.200000) ) ) ;;
assert (a =. 6.19999999999999929);;
let a = sr_wartosc ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (7.600000) (9.200000) ) ) ;;
assert (a =. 10.6);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-7.600000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. -7.6);;
let a = in_wartosc ( minus ( wartosc_od_do (-4.200000) (-4.000000) ) ( wartosc_dokladna (6.800000) ) ) (-3.800000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (1.600000) ) ( wartosc_od_do (-8.200000) (0.000000) ) ) (4.800000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.400000) ) ( wartosc_od_do (-9.400000) (5.800000) ) ) ;;
assert (a =. -5.8);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_od_do (-2.800000) (0.000000) ) ( wartosc_od_do (3.800000) (8.800000) ) ) ( wartosc_dokladnosc (-6.600000) (0.000000) ) ) ;;
assert (a =. 1.16666666666666674);;
let a = sr_wartosc ( minus ( minus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (-1.800000) (4.600000) ) ( wartosc_od_do (-4.600000) (0.000000) ) ) ) ( wartosc_od_do (0.800000) (7.000000) ) ) ;;
assert (a =. -8.23044);;
let a = max_wartosc ( plus ( wartosc_dokladna (-3.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -3.8);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.400000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-4.800000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-8.200000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-5.200000) (-0.200000) ) ( wartosc_dokladna (-6.200000) ) ) ( wartosc_dokladnosc (-1.800000) (1.800000) ) ) ;;
assert (a =. -0.474490652534145074);;
let a = sr_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( minus ( wartosc_dokladna (1.800000) ) ( wartosc_dokladnosc (-9.800000) (6.200000) ) ) ) ;;
assert (a =. 81.2000000000000171);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (2.800000) (9.800000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (8.600000) (6.800000) ) ( minus ( podzielic ( wartosc_dokladna (-2.400000) ) ( wartosc_dokladna (9.800000) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ( wartosc_dokladna (-0.800000) ) ) ( wartosc_dokladna (9.400000) ) ) ) ( podzielic ( wartosc_dokladnosc (0.400000) (0.000000) ) ( wartosc_dokladna (-3.600000) ) ) ) ) ) ;;
assert (a =. -0.721212236606079138);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (3.400000) ) ( wartosc_dokladnosc (1.800000) (1.600000) ) ) ( razy ( wartosc_dokladnosc (8.200000) (0.000000) ) ( wartosc_dokladna (-2.200000) ) ) ) ;;
assert (a =. 19.8991426071741024);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.600000) ) ) (-9.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (9.400000) (9.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (9.200000) ) ) ;;
assert (a =. -5.19999999999999929);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-6.600000) (0.200000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( razy ( razy ( wartosc_dokladnosc (8.600000) (5.600000) ) ( razy ( podzielic ( plus ( wartosc_dokladna (-5.200000) ) ( wartosc_od_do (-9.800000) (-1.400000) ) ) ( wartosc_dokladnosc (3.800000) (0.000000) ) ) ( wartosc_od_do (-1.000000) (5.200000) ) ) ) ( wartosc_dokladna (8.200000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( minus ( plus ( minus ( wartosc_od_do (5.800000) (7.600000) ) ( wartosc_od_do (0.000000) (9.600000) ) ) ( wartosc_dokladnosc (0.400000) (2.600000) ) ) ( plus ( podzielic ( wartosc_dokladnosc (5.800000) (6.400000) ) ( wartosc_od_do (0.000000) (3.200000) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-9.800000) (0.000000) ) ( minus ( wartosc_dokladnosc (-8.000000) (2.800000) ) ( plus ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (-4.400000) (6.000000) ) ) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ) ( wartosc_dokladna (8.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( plus ( wartosc_od_do (5.200000) (9.200000) ) ( plus ( wartosc_dokladna (-2.800000) ) ( podzielic ( wartosc_dokladna (1.800000) ) ( wartosc_dokladna (8.000000) ) ) ) ) ( wartosc_od_do (-4.800000) (-3.600000) ) ) ;;
assert (a =. 0.425000000000000266);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.600000) (0.000000) ) ) ;;
assert (a =. 6.6);;
let a = min_wartosc ( minus ( plus ( wartosc_od_do (3.600000) (6.000000) ) ( wartosc_dokladna (-8.600000) ) ) ( wartosc_dokladnosc (-9.400000) (7.200000) ) ) ;;
assert (a =. 3.72320000000000029);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (0.000000) (4.200000) ) ( wartosc_od_do (-8.200000) (2.400000) ) ) ( razy ( wartosc_dokladnosc (-6.200000) (6.400000) ) ( wartosc_dokladnosc (6.200000) (8.800000) ) ) ) ;;
assert (a =. 0.24989627719788185);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (5.600000) (5.600000) ) ( wartosc_od_do (-8.800000) (0.000000) ) ) (9.600000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (-4.000000) (2.000000) ) ( wartosc_dokladnosc (-6.000000) (8.800000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-0.200000) ) ( wartosc_dokladnosc (-0.200000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (8.200000) (9.200000) ) ( wartosc_od_do (5.800000) (6.000000) ) ) ;;
assert (a =. 1.47643678160919523);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( podzielic ( wartosc_dokladna (-7.800000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.600000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (1.800000) (3.600000) ) ( razy ( wartosc_od_do (-4.800000) (9.800000) ) ( wartosc_od_do (-9.400000) (7.200000) ) ) ) (-7.800000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladna (-2.400000) ) ( wartosc_dokladna (-8.800000) ) ) ) ;;
assert (a =. -6.4);;
let a = min_wartosc ( razy ( wartosc_dokladna (-5.600000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (1.800000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.400000) (4.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladnosc (1.600000) (0.200000) ) ( plus ( wartosc_dokladna (-0.600000) ) ( podzielic ( wartosc_od_do (-9.800000) (0.200000) ) ( wartosc_dokladna (3.800000) ) ) ) ) ( wartosc_dokladna (-1.400000) ) ) (6.400000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (4.400000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (3.200000) ) ( wartosc_od_do (-4.400000) (0.000000) ) ) ) ( minus ( plus ( wartosc_dokladnosc (-7.400000) (0.000000) ) ( wartosc_dokladna (5.600000) ) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ;;
assert (a =. 1.85185185185185142);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (7.600000) ) ( plus ( wartosc_dokladna (3.600000) ) ( wartosc_dokladnosc (-4.400000) (2.800000) ) ) ) ;;
assert (a =. 0.676800000000000512);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-5.000000) (7.800000) ) ( wartosc_dokladna (4.600000) ) ) ( wartosc_dokladna (7.400000) ) ) (-8.800000);;
assert (a = false);;
let a = max_wartosc ( plus ( plus ( razy ( razy ( wartosc_od_do (-0.400000) (1.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( razy ( minus ( wartosc_dokladnosc (0.000000) (9.800000) ) ( wartosc_od_do (-7.800000) (2.400000) ) ) ( minus ( wartosc_od_do (0.000000) (7.600000) ) ( wartosc_dokladnosc (0.000000) (9.600000) ) ) ) ) ) ( plus ( wartosc_dokladnosc (0.000000) (7.200000) ) ( minus ( wartosc_dokladnosc (3.200000) (0.000000) ) ( wartosc_dokladnosc (6.400000) (2.600000) ) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-2.800000) (1.200000) ) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-3.800000) (3.000000) ) ( minus ( podzielic ( wartosc_dokladna (-7.200000) ) ( wartosc_od_do (-7.400000) (0.000000) ) ) ( wartosc_od_do (0.200000) (2.400000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (6.200000) (7.200000) ) ( wartosc_dokladna (8.800000) ) ) (-9.200000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (2.800000) (6.800000) ) ( plus ( wartosc_dokladna (2.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (6.800000) ) ( wartosc_od_do (-2.200000) (9.200000) ) ) ) ) ;;
assert (a =. 4.29999999999999893);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-8.800000) ) ( wartosc_dokladna (0.000000) ) ) (2.200000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.600000) ) ( wartosc_dokladnosc (0.000000) (2.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (1.000000) (5.000000) ) ( wartosc_dokladnosc (-0.600000) (9.600000) ) ) (0.200000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (5.600000) ) ( wartosc_dokladna (6.200000) ) ) ;;
assert (a =. 0.919999999999999929);;
let a = max_wartosc ( minus ( wartosc_dokladna (-6.200000) ) ( wartosc_od_do (-10.000000) (-3.200000) ) ) ;;
assert (a =. 3.8);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -14.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (8.200000) (0.200000) ) ( wartosc_od_do (-9.600000) (9.600000) ) ) ;;
assert (a =. -1.41640000000000121);;
let a = min_wartosc ( plus ( wartosc_od_do (-9.000000) (2.400000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( plus ( podzielic ( wartosc_od_do (-9.200000) (9.600000) ) ( wartosc_od_do (-8.800000) (0.400000) ) ) ( wartosc_dokladnosc (-3.000000) (9.800000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (9.600000) ) ( podzielic ( wartosc_dokladnosc (-7.800000) (0.000000) ) ( wartosc_dokladnosc (5.600000) (0.000000) ) ) ) ( podzielic ( wartosc_od_do (-5.400000) (7.000000) ) ( wartosc_od_do (0.000000) (9.400000) ) ) ) (-9.600000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( wartosc_dokladna (-9.800000) ) ) ;;
assert (a =. -16.1);;
let a = max_wartosc ( razy ( wartosc_od_do (-9.400000) (0.000000) ) ( wartosc_dokladna (4.400000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-4.200000) (2.400000) ) ( wartosc_od_do (0.000000) (4.800000) ) ) (5.200000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (1.800000) ) ( wartosc_dokladna (7.400000) ) ) ;;
assert (a =. 9.20000000000000107);;
let a = max_wartosc ( podzielic ( plus ( minus ( minus ( wartosc_dokladnosc (-2.800000) (5.600000) ) ( wartosc_od_do (-4.400000) (0.000000) ) ) ( wartosc_dokladnosc (0.800000) (0.800000) ) ) ( wartosc_dokladnosc (-8.200000) (0.600000) ) ) ( wartosc_dokladnosc (0.000000) (6.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.600000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-9.600000) ) ( podzielic ( wartosc_od_do (-7.200000) (1.000000) ) ( wartosc_od_do (0.400000) (2.600000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-8.200000) (8.800000) ) ( wartosc_dokladna (1.600000) ) ) (-4.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (-4.200000) (2.200000) ) ( wartosc_od_do (-8.000000) (-0.400000) ) ) ( podzielic ( plus ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_dokladnosc (6.800000) (0.000000) ) ) ( razy ( podzielic ( wartosc_od_do (-10.000000) (3.400000) ) ( wartosc_dokladnosc (0.000000) (4.800000) ) ) ( wartosc_dokladnosc (8.400000) (2.200000) ) ) ) ) ( podzielic ( podzielic ( wartosc_od_do (-9.600000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (5.200000) (6.600000) ) ) ) (6.800000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.200000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.200000) (1.200000) ) ) ( wartosc_dokladnosc (-1.600000) (0.200000) ) ) ;;
assert (a =. 3.6);;
let a = max_wartosc ( minus ( wartosc_od_do (-6.200000) (9.000000) ) ( wartosc_dokladnosc (2.400000) (0.000000) ) ) ;;
assert (a =. 6.6);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (5.600000) ) ( wartosc_od_do (0.000000) (9.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (4.600000) (3.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 4.6);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.600000) ) ( wartosc_dokladnosc (3.800000) (2.200000) ) ) (0.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.600000) (9.600000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (1.000000) (6.600000) ) ( razy ( wartosc_dokladnosc (4.800000) (2.400000) ) ( wartosc_od_do (-5.600000) (5.400000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( wartosc_dokladna (5.800000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladnosc (0.200000) (3.600000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (3.000000) (2.200000) ) ) ;;
assert (a =. 0.6004752);;
let a = sr_wartosc ( plus ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.400000) ) ) ( razy ( wartosc_od_do (1.800000) (8.800000) ) ( wartosc_dokladnosc (1.400000) (5.000000) ) ) ) ;;
assert (a =. 7.665);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladnosc (-7.400000) (7.600000) ) ( wartosc_od_do (-9.800000) (1.200000) ) ) ( razy ( wartosc_od_do (5.000000) (6.200000) ) ( wartosc_dokladnosc (6.200000) (0.000000) ) ) ) ;;
assert (a =. -47.6024);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (9.600000) (6.000000) ) ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (8.400000) ) ( razy ( wartosc_dokladna (8.200000) ) ( wartosc_dokladna (-1.400000) ) ) ) ) ) ;;
assert (a =. 19.58);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) (-0.600000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (4.600000) (0.000000) ) ( podzielic ( plus ( wartosc_dokladna (-6.400000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (6.200000) ) ( wartosc_od_do (7.000000) (9.400000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( plus ( wartosc_od_do (-9.600000) (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.200000) (0.000000) ) ) ) ( wartosc_dokladnosc (-1.000000) (0.600000) ) ) ;;
assert (a =. -10.606);;
let a = sr_wartosc ( plus ( razy ( minus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (6.400000) ) ) ( wartosc_dokladna (9.200000) ) ) ( wartosc_od_do (4.400000) (9.200000) ) ) ( wartosc_dokladnosc (7.400000) (9.800000) ) ) ;;
assert (a =. -55.1599999999999895);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.200000) ) ( wartosc_dokladnosc (-8.200000) (3.000000) ) ) ;;
assert (a =. -0.0754337440281619281);;
let a = min_wartosc ( plus ( wartosc_od_do (-7.600000) (9.200000) ) ( podzielic ( minus ( wartosc_dokladna (3.600000) ) ( wartosc_od_do (0.000000) (6.200000) ) ) ( wartosc_dokladnosc (0.200000) (8.600000) ) ) ) ;;
assert (a =. -21.8231947483588584);;
let a = max_wartosc ( razy ( wartosc_dokladna (-7.200000) ) ( wartosc_dokladna (-4.600000) ) ) ;;
assert (a =. 33.12);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-4.000000) (3.400000) ) ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (1.400000) ) ) ) ) ( plus ( wartosc_dokladna (-8.600000) ) ( plus ( wartosc_dokladna (9.400000) ) ( wartosc_od_do (-7.600000) (-2.600000) ) ) ) ) ;;
assert (a =. -0.720360000000000222);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (9.800000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-0.200000) (7.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -5.2);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.200000) (0.000000) ) ) (-0.200000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (4.800000) (7.400000) ) ( minus ( razy ( wartosc_dokladna (-5.200000) ) ( podzielic ( wartosc_dokladna (3.200000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( wartosc_dokladna (8.800000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-0.600000) ) ( wartosc_dokladnosc (0.400000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.400000) (7.200000) ) ( wartosc_dokladnosc (3.000000) (3.800000) ) ) ;;
assert (a =. 2.49480249480249494);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.600000) (0.000000) ) ( wartosc_dokladna (4.600000) ) ) (-7.400000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( podzielic ( wartosc_od_do (-4.000000) (-0.800000) ) ( wartosc_od_do (-0.800000) (0.000000) ) ) ( wartosc_dokladnosc (-5.600000) (1.200000) ) ) ( wartosc_dokladna (-0.800000) ) ) ;;
assert (a =. 6.916);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladna (7.800000) ) ( wartosc_dokladnosc (0.000000) (3.800000) ) ) ( wartosc_dokladna (2.800000) ) ) ;;
assert (a =. 21.84);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (2.800000) ) ( minus ( wartosc_dokladnosc (-5.000000) (5.200000) ) ( wartosc_dokladna (4.600000) ) ) ) ;;
assert (a =. -8.2);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.200000) ) ( wartosc_dokladna (0.800000) ) ) ;;
assert (a =. 1.375);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (-8.400000) (0.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.800000) (2.400000) ) ) ) ( wartosc_dokladnosc (0.800000) (6.200000) ) ) ) ;;
assert (a =. -1.07531340405014464);;
let a = sr_wartosc ( plus ( razy ( wartosc_od_do (-9.800000) (1.600000) ) ( wartosc_dokladna (-3.800000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (3.600000) ) ( wartosc_dokladna (-6.800000) ) ) ) ;;
assert (a =. 15.5800000000000018);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.600000) (7.800000) ) ( wartosc_dokladna (1.600000) ) ) ;;
assert (a =. 4.875);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (0.400000) (2.200000) ) ) ;;
assert (a =. -2.55623721881390553);;
let a = sr_wartosc ( razy ( plus ( plus ( wartosc_dokladna (-6.400000) ) ( wartosc_od_do (-5.000000) (4.000000) ) ) ( wartosc_dokladnosc (3.600000) (6.800000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (9.600000) ) ( podzielic ( wartosc_od_do (-8.400000) (0.000000) ) ( wartosc_dokladna (-3.200000) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (6.200000) ) ( wartosc_dokladna (-2.800000) ) ) (-1.600000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-5.200000) (7.600000) ) ( wartosc_od_do (1.000000) (8.800000) ) ) ;;
assert (a =. -5.5952);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (-0.200000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-0.200000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (5.200000) ) ( wartosc_od_do (-5.400000) (7.400000) ) ) (3.600000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (2.000000) (4.200000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 3.1);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (7.200000) ) ( wartosc_dokladna (-7.200000) ) ) ;;
assert (a =. -3.6);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.200000) (1.400000) ) ( wartosc_od_do (-4.200000) (8.400000) ) ) ;;
assert (a =. 34.44);;
let a = max_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( minus ( wartosc_od_do (3.400000) (6.000000) ) ( wartosc_od_do (-1.200000) (0.000000) ) ) ) ;;
assert (a =. 3.6);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-1.800000) (8.000000) ) ( wartosc_od_do (4.000000) (5.200000) ) ) ;;
assert (a =. -8.3664);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-4.200000) ) ( podzielic ( wartosc_dokladna (-1.200000) ) ( wartosc_dokladnosc (3.400000) (0.000000) ) ) ) ;;
assert (a =. 11.8999999999999986);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.600000) (9.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 60.1999999999999957);;
let a = max_wartosc ( minus ( wartosc_od_do (-4.200000) (3.200000) ) ( wartosc_od_do (-6.600000) (8.600000) ) ) ;;
assert (a =. 9.8);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (5.400000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (4.600000) ) ( podzielic ( wartosc_dokladnosc (-9.400000) (7.200000) ) ( wartosc_dokladnosc (-9.000000) (6.000000) ) ) ) ( wartosc_dokladna (-6.200000) ) ) ;;
assert (a =. -0.622893596533461658);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (6.400000) (0.800000) ) ( wartosc_dokladna (-3.800000) ) ) ;;
assert (a =. -24.51456);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (9.000000) (4.800000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -63.);;
let a = max_wartosc ( plus ( plus ( wartosc_dokladnosc (4.600000) (2.600000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (4.400000) ) ( wartosc_od_do (-7.200000) (0.000000) ) ) ) ( wartosc_dokladna (-8.400000) ) ) ;;
assert (a =. -3.68040000000000056);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.400000) (-1.800000) ) ( wartosc_od_do (-2.000000) (0.400000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (5.200000) (0.000000) ) ( minus ( wartosc_dokladnosc (-3.800000) (9.600000) ) ( wartosc_dokladnosc (0.000000) (7.800000) ) ) ) ;;
assert (a =. -1.24855935459085687);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-5.800000) (2.400000) ) ( wartosc_od_do (0.000000) (7.200000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.800000) (-0.800000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (5.800000) ) ) ) (-8.200000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.400000) ) ( razy ( wartosc_dokladnosc (-3.800000) (2.800000) ) ( wartosc_dokladna (0.800000) ) ) ) ;;
assert (a =. -2.76532591025047836);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (4.800000) ) ( podzielic ( wartosc_od_do (5.000000) (9.200000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-4.200000) (1.200000) ) ( wartosc_od_do (1.800000) (2.600000) ) ) ;;
assert (a =. -3.7);;
let a = sr_wartosc ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (6.400000) ) ) ;;
assert (a =. -17.024);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.600000) (-2.600000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) (3.200000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-0.200000) (0.800000) ) ( razy ( wartosc_od_do (-3.600000) (1.200000) ) ( wartosc_od_do (-2.600000) (-2.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (-3.400000) (0.400000) ) ) ;;
assert (a =. 0.613599999999999923);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.200000) (0.600000) ) ( wartosc_dokladna (0.000000) ) ) (-6.400000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-1.800000) (0.000000) ) ( wartosc_dokladnosc (-4.800000) (4.800000) ) ) ;;
assert (a =. 0.393907563025210128);;
let a = max_wartosc ( razy ( wartosc_od_do (-6.000000) (5.200000) ) ( podzielic ( wartosc_dokladna (3.600000) ) ( wartosc_dokladnosc (0.400000) (7.200000) ) ) ) ;;
assert (a =. 50.4310344827586192);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-1.800000) (9.000000) ) ( wartosc_dokladna (9.600000) ) ) ;;
assert (a =. -15.7248);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.600000) (1.600000) ) ( wartosc_dokladna (4.400000) ) ) ;;
assert (a =. 5.00960000000000072);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (5.200000) (8.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 4.75280000000000058);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (8.400000) ) ( wartosc_dokladna (1.400000) ) ) ;;
assert (a =. 6.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-8.800000) ) ( wartosc_od_do (-7.400000) (4.400000) ) ) ;;
assert (a =. 65.12);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.200000) (6.800000) ) ( minus ( razy ( wartosc_od_do (-5.200000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladna (6.600000) ) ( wartosc_od_do (5.400000) (6.800000) ) ) ( plus ( wartosc_dokladnosc (4.200000) (6.200000) ) ( wartosc_od_do (-8.400000) (2.600000) ) ) ) ) ) ;;
assert (a =. -5.81948121212120739);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladna (8.800000) ) ( wartosc_dokladnosc (0.000000) (0.800000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( razy ( podzielic ( wartosc_dokladnosc (4.000000) (4.600000) ) ( podzielic ( wartosc_od_do (-5.800000) (-4.000000) ) ( podzielic ( wartosc_dokladnosc (5.000000) (2.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.400000) (4.800000) ) ) ) ) ) ( wartosc_dokladnosc (-6.000000) (8.200000) ) ) ( wartosc_dokladna (-2.800000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (-9.800000) (7.200000) ) ( wartosc_dokladnosc (-0.600000) (8.200000) ) ) (-9.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-1.200000) ) ( razy ( wartosc_od_do (-1.800000) (3.400000) ) ( wartosc_od_do (-8.800000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (8.400000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_od_do (-7.400000) (0.000000) ) ) ) ( minus ( wartosc_od_do (-3.600000) (0.000000) ) ( wartosc_dokladnosc (-7.600000) (1.400000) ) ) ) (1.200000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.800000) ) ( wartosc_dokladna (-1.400000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-8.600000) (8.400000) ) ( wartosc_dokladnosc (-2.000000) (1.800000) ) ) (1.800000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-0.400000) (4.600000) ) ) ( wartosc_dokladnosc (3.600000) (4.200000) ) ) ( wartosc_dokladna (-1.800000) ) ) ;;
assert (a =. -1.91600000000000015);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (-0.200000) ) ( wartosc_dokladna (-3.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (1.600000) (7.600000) ) ( wartosc_od_do (-4.800000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (-4.400000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.600000) ) ) ( podzielic ( wartosc_dokladna (1.400000) ) ( podzielic ( wartosc_dokladna (5.800000) ) ( wartosc_od_do (3.600000) (5.600000) ) ) ) ) ;;
assert (a =. 8.51751700680272172);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (2.600000) (3.200000) ) ( wartosc_od_do (2.800000) (6.400000) ) ) ;;
assert (a =. 0.958285714285714407);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.400000) (-5.400000) ) ( minus ( wartosc_dokladnosc (-3.800000) (4.200000) ) ( wartosc_od_do (-5.600000) (3.200000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (6.200000) ) ( wartosc_dokladna (5.200000) ) ) ) (-8.600000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-4.600000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-5.200000);;
assert (a = false);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_od_do (-2.600000) (-0.800000) ) ( wartosc_dokladna (2.800000) ) ) ( razy ( wartosc_od_do (3.800000) (7.400000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.400000) ) ( wartosc_dokladna (-9.600000) ) ) ;;
assert (a =. -9.6);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.000000) (-6.000000) ) ( wartosc_od_do (-2.200000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (-3.400000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_od_do (-9.400000) (0.000000) ) ( wartosc_od_do (-5.400000) (6.800000) ) ) ;;
assert (a =. -63.92);;
let a = min_wartosc ( razy ( podzielic ( wartosc_od_do (-3.800000) (0.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (1.800000) (4.000000) ) ( wartosc_dokladna (5.800000) ) ) ( razy ( wartosc_od_do (-8.800000) (9.400000) ) ( wartosc_dokladna (-4.200000) ) ) ) ) ( wartosc_od_do (-0.800000) (1.200000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-2.600000) (5.400000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (0.000000) (9.400000) ) ( wartosc_dokladnosc (-5.000000) (3.600000) ) ) ) ) (3.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-0.600000) (8.800000) ) ( wartosc_dokladna (9.600000) ) ) (3.600000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-0.400000) (6.800000) ) ( wartosc_od_do (0.000000) (9.200000) ) ) ;;
assert (a =. -0.4);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.200000) ) ( podzielic ( wartosc_od_do (-6.600000) (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (4.400000) (2.800000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.400000) ) ( wartosc_od_do (-7.000000) (-6.800000) ) ) ) ;;
assert (a =. -30.372320000000002);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-9.000000) (-2.800000) ) ( wartosc_od_do (-7.600000) (8.200000) ) ) ( wartosc_dokladnosc (-9.600000) (0.000000) ) ) (4.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (9.600000) (9.800000) ) ( wartosc_dokladnosc (9.600000) (0.000000) ) ) (9.600000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-6.200000) (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (3.200000) ) ( wartosc_dokladnosc (2.000000) (0.800000) ) ) ( podzielic ( wartosc_dokladnosc (9.600000) (5.400000) ) ( minus ( wartosc_od_do (-4.200000) (-2.600000) ) ( wartosc_dokladna (-7.800000) ) ) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( podzielic ( wartosc_od_do (-1.400000) (0.400000) ) ( podzielic ( wartosc_dokladna (-6.200000) ) ( wartosc_dokladna (-0.600000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-2.000000) (6.800000) ) ( wartosc_dokladnosc (-2.400000) (2.200000) ) ) ;;
assert (a =. -2.89706884798909359);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-1.200000) (9.800000) ) ) ;;
assert (a =. -7.80000000000000071);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (9.800000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( minus ( razy ( wartosc_dokladnosc (2.800000) (6.800000) ) ( wartosc_dokladnosc (-8.400000) (4.600000) ) ) ( wartosc_dokladnosc (-2.800000) (0.400000) ) ) ( wartosc_od_do (-5.800000) (1.800000) ) ) (1.600000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (4.200000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) (-7.800000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-3.400000) (0.000000) ) ) ;;
assert (a =. 1.7);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-5.600000) (1.400000) ) ) (-6.400000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (8.800000) ) ( wartosc_od_do (-8.000000) (1.800000) ) ) ;;
assert (a =. 11.9);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.400000) ) ( podzielic ( wartosc_dokladnosc (8.400000) (0.800000) ) ( wartosc_dokladna (8.200000) ) ) ) ;;
assert (a =. 4.13306451612903203);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (5.200000) (1.200000) ) ( wartosc_dokladna (-6.400000) ) ) ;;
assert (a =. -33.67936);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.800000) ) ( wartosc_od_do (4.600000) (7.000000) ) ) ;;
assert (a =. 0.542857142857142816);;
let a = max_wartosc ( minus ( wartosc_dokladna (-9.800000) ) ( wartosc_od_do (0.000000) (9.800000) ) ) ;;
assert (a =. -9.8);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (-6.200000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (6.000000) (9.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( minus ( wartosc_dokladnosc (-9.200000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (7.600000) (9.600000) ) ( wartosc_od_do (-8.200000) (1.400000) ) ) ) ( podzielic ( wartosc_dokladna (5.400000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (-7.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (4.000000) (1.800000) ) ( wartosc_dokladnosc (2.400000) (0.400000) ) ) ;;
assert (a =. 9.8118912);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.800000) (3.400000) ) ( wartosc_dokladnosc (5.400000) (0.000000) ) ) ;;
assert (a =. -0.22222222222222221);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (4.600000) ) ( wartosc_dokladnosc (-5.000000) (8.400000) ) ) ;;
assert (a =. -1.00436681222707413);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.000000) (7.200000) ) ( wartosc_od_do (0.000000) (3.400000) ) ) ;;
assert (a =. 24.48);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (0.200000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.800000) (0.000000) ) ) ) (-5.400000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-7.800000) (-7.000000) ) ( wartosc_dokladnosc (-0.400000) (2.600000) ) ) ;;
assert (a =. -8.2104);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.000000) (1.200000) ) ( wartosc_od_do (-10.000000) (-8.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.400000) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.000000) (3.400000) ) ( podzielic ( minus ( wartosc_dokladna (-7.400000) ) ( wartosc_od_do (0.000000) (0.200000) ) ) ( wartosc_dokladnosc (4.200000) (7.800000) ) ) ) ;;
assert (a =. -2.36557999823305964);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.600000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (2.400000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( razy ( wartosc_od_do (-9.600000) (1.600000) ) ( podzielic ( wartosc_dokladnosc (-7.200000) (2.000000) ) ( razy ( plus ( wartosc_dokladnosc (5.400000) (1.000000) ) ( wartosc_od_do (-2.200000) (2.200000) ) ) ( wartosc_dokladnosc (3.400000) (3.200000) ) ) ) ) ( razy ( wartosc_dokladnosc (-1.400000) (7.200000) ) ( wartosc_dokladnosc (1.200000) (0.000000) ) ) ) ) ( wartosc_od_do (-2.800000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (2.800000) (0.000000) ) ( razy ( wartosc_od_do (-9.400000) (8.400000) ) ( plus ( razy ( wartosc_od_do (-8.200000) (-5.600000) ) ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-9.600000) (1.400000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladnosc (-7.200000) (8.200000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (4.200000) (6.600000) ) ( wartosc_dokladnosc (0.000000) (5.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.800000) ) ( wartosc_dokladna (1.800000) ) ) ;;
assert (a =. 0.444444444444444475);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (6.400000) (5.200000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (2.200000) (3.600000) ) ( wartosc_od_do (-0.400000) (0.000000) ) ) ( wartosc_od_do (-2.400000) (0.800000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (-1.400000) (2.000000) ) ( razy ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (1.600000) ) ) ) ;;
assert (a =. 5.10000000000000053);;
let a = max_wartosc ( minus ( wartosc_od_do (7.200000) (7.200000) ) ( wartosc_dokladna (-9.800000) ) ) ;;
assert (a =. 17.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-4.800000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (6.600000) ) ( plus ( wartosc_od_do (-0.200000) (5.400000) ) ( podzielic ( wartosc_dokladnosc (8.400000) (9.800000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ) (-3.600000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.600000) (5.400000) ) ( wartosc_od_do (-2.200000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladnosc (2.600000) (3.200000) ) ( wartosc_od_do (3.200000) (8.000000) ) ) ( wartosc_od_do (0.000000) (5.600000) ) ) (8.400000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-8.400000) (0.000000) ) ( wartosc_od_do (-7.000000) (-3.400000) ) ) ;;
assert (a =. -5.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (9.400000) (9.600000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-0.400000) (3.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-4.800000) (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (6.800000) ) ( razy ( podzielic ( wartosc_dokladnosc (3.400000) (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (1.400000) ) ) ) ( minus ( wartosc_dokladnosc (0.000000) (9.200000) ) ( wartosc_dokladna (-1.000000) ) ) ) ) ) ;;
assert (a =. 2.67000000000000126);;
let a = sr_wartosc ( plus ( razy ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (-0.600000) (0.000000) ) ) ( plus ( wartosc_dokladna (-6.200000) ) ( wartosc_od_do (-0.200000) (4.000000) ) ) ) ;;
assert (a =. -4.30000000000000071);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (7.200000) (7.800000) ) ( wartosc_dokladnosc (-7.600000) (2.000000) ) ) ( wartosc_dokladnosc (7.200000) (5.200000) ) ) ;;
assert (a =. -0.153431348111085442);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.600000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 2.8);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-3.600000) (-3.400000) ) ) ;;
assert (a =. -1.94444444444444464);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.800000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (3.200000) (1.200000) ) ) (-7.600000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-8.400000) (7.000000) ) ( plus ( wartosc_dokladna (-6.800000) ) ( wartosc_dokladnosc (8.000000) (7.600000) ) ) ) ( wartosc_dokladnosc (-4.200000) (0.000000) ) ) ;;
assert (a =. 63.766216216216165);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (9.800000) (5.800000) ) ( wartosc_dokladnosc (-7.200000) (6.600000) ) ) ) ;;
assert (a =. 1.20278298936835526);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-3.800000) (1.800000) ) ( wartosc_dokladna (-9.600000) ) ) ;;
assert (a =. 0.395833333333333315);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (-1.000000) (5.400000) ) ( wartosc_dokladnosc (0.400000) (5.200000) ) ) ( wartosc_dokladnosc (-1.400000) (0.400000) ) ) ;;
assert (a =. 2.07297888);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-4.800000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.800000) ) ) ( wartosc_dokladnosc (4.400000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-8.400000) (5.800000) ) ( wartosc_od_do (-0.800000) (3.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (1.000000) ) ( wartosc_dokladna (-3.600000) ) ) ;;
assert (a =. -1.96388888888888902);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (8.800000) ) ) ;;
assert (a =. 0.113636363636363633);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-1.400000) ) ( wartosc_od_do (-5.600000) (0.000000) ) ) (5.400000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_od_do (-6.400000) (-1.800000) ) ( podzielic ( wartosc_dokladnosc (2.600000) (0.400000) ) ( wartosc_dokladna (7.000000) ) ) ) ;;
assert (a =. -6.77291428571428611);;
let a = min_wartosc ( razy ( wartosc_od_do (-1.200000) (4.400000) ) ( wartosc_od_do (-5.000000) (7.200000) ) ) ;;
assert (a =. -22.);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (4.000000) (8.000000) ) ) ( wartosc_od_do (1.800000) (6.400000) ) ) ;;
assert (a =. 0.575000000000000067);;
let a = min_wartosc ( minus ( wartosc_dokladna (4.600000) ) ( wartosc_dokladna (-7.800000) ) ) ;;
assert (a =. 12.3999999999999986);;
let a = in_wartosc ( podzielic ( wartosc_od_do (1.400000) (3.800000) ) ( podzielic ( wartosc_dokladnosc (-9.400000) (8.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) (-9.800000);;
assert (a = false);;
let a = in_wartosc ( plus ( podzielic ( razy ( plus ( wartosc_dokladna (-7.400000) ) ( wartosc_dokladna (9.600000) ) ) ( wartosc_dokladnosc (-3.600000) (9.800000) ) ) ( razy ( wartosc_dokladna (5.800000) ) ( wartosc_dokladna (8.200000) ) ) ) ( podzielic ( wartosc_od_do (2.400000) (3.400000) ) ( wartosc_od_do (-6.600000) (9.800000) ) ) ) (-1.600000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-0.800000) ) ( podzielic ( plus ( razy ( wartosc_od_do (-0.200000) (0.000000) ) ( wartosc_od_do (-9.400000) (5.000000) ) ) ( wartosc_od_do (-9.600000) (3.400000) ) ) ( podzielic ( wartosc_od_do (-8.600000) (-7.600000) ) ( minus ( wartosc_dokladnosc (3.000000) (8.600000) ) ( wartosc_dokladna (-9.400000) ) ) ) ) ) (-7.800000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( podzielic ( razy ( wartosc_od_do (0.000000) (9.800000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (9.600000) ) ) ( wartosc_dokladna (2.000000) ) ) (6.800000);;
assert (a = false);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (1.400000) ) ( razy ( wartosc_dokladnosc (0.000000) (2.800000) ) ( podzielic ( wartosc_od_do (-8.800000) (-7.000000) ) ( wartosc_dokladnosc (0.000000) (2.200000) ) ) ) ) ( wartosc_dokladnosc (6.400000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-8.200000) ) ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-4.400000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (7.400000) (9.600000) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladna (-7.400000) ) ) ;;
assert (a =. 57.72);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.600000) (3.600000) ) ( wartosc_dokladnosc (-2.800000) (6.400000) ) ) ;;
assert (a =. -2.78276047261009696);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-4.800000) ) ( wartosc_dokladnosc (6.400000) (9.000000) ) ) ;;
assert (a =. 1.60000000000000053);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (-4.400000) (1.400000) ) ( wartosc_dokladnosc (0.000000) (6.400000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( minus ( minus ( wartosc_dokladna (0.600000) ) ( wartosc_dokladnosc (-9.000000) (4.400000) ) ) ( wartosc_od_do (-0.400000) (7.800000) ) ) ( wartosc_dokladnosc (-4.400000) (0.400000) ) ) (4.600000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (2.200000) (8.800000) ) ( wartosc_od_do (0.000000) (0.800000) ) ) (-4.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-2.600000) ) ( wartosc_od_do (0.000000) (5.600000) ) ) (-2.800000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.400000) (-6.600000) ) ( wartosc_od_do (-0.400000) (5.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( razy ( plus ( wartosc_dokladnosc (2.800000) (6.400000) ) ( wartosc_dokladnosc (7.800000) (1.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (-6.600000) (0.200000) ) ( podzielic ( wartosc_od_do (-6.800000) (0.000000) ) ( plus ( razy ( podzielic ( wartosc_dokladnosc (3.800000) (8.200000) ) ( wartosc_od_do (-8.600000) (0.000000) ) ) ( wartosc_dokladnosc (0.800000) (3.600000) ) ) ( wartosc_dokladna (-2.400000) ) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.600000) ) ( wartosc_dokladna (-1.200000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-4.600000) (0.000000) ) ( wartosc_od_do (-9.000000) (-6.200000) ) ) ( wartosc_dokladnosc (9.400000) (7.400000) ) ) ;;
assert (a =. 4.44891555555555485);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (7.800000) ) ( wartosc_od_do (-6.400000) (-5.000000) ) ) ;;
assert (a =. -6.4);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-3.600000) ) ( wartosc_dokladnosc (-6.400000) (7.400000) ) ) ;;
assert (a =. 0.56559721032373278);;
let a = in_wartosc ( minus ( wartosc_dokladna (4.400000) ) ( wartosc_dokladna (4.800000) ) ) (-5.200000);;
assert (a = false);;
let a = in_wartosc ( minus ( razy ( plus ( wartosc_od_do (0.000000) (2.400000) ) ( wartosc_dokladna (-9.400000) ) ) ( wartosc_dokladna (9.200000) ) ) ( wartosc_od_do (-2.800000) (5.400000) ) ) (-9.400000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (4.800000) ) ( wartosc_dokladnosc (-1.600000) (2.200000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 54.6);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.400000) ) ( wartosc_dokladnosc (-3.800000) (0.800000) ) ) ( minus ( wartosc_od_do (0.000000) (3.600000) ) ( wartosc_od_do (-2.400000) (0.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( plus ( razy ( wartosc_od_do (-9.200000) (0.200000) ) ( plus ( wartosc_od_do (2.000000) (2.600000) ) ( wartosc_dokladnosc (5.400000) (2.000000) ) ) ) ( wartosc_od_do (-5.000000) (4.400000) ) ) ;;
assert (a =. -36.7859999999999943);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.400000) ) ( wartosc_dokladnosc (-4.800000) (2.600000) ) ) ;;
assert (a =. -0.0855578370978781755);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.800000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (2.000000) ) ) (-7.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-1.800000) (0.000000) ) ( wartosc_dokladna (-0.400000) ) ) ( razy ( podzielic ( podzielic ( wartosc_dokladna (-9.400000) ) ( wartosc_od_do (-3.400000) (4.200000) ) ) ( wartosc_dokladna (-9.600000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-5.400000) (6.400000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (9.800000) (4.400000) ) ( wartosc_od_do (0.000000) (7.600000) ) ) (7.400000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-7.200000) ) ( wartosc_dokladnosc (-0.800000) (9.400000) ) ) ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (8.800000) (9.000000) ) ) ) ;;
assert (a =. 0.605259788261295673);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-0.800000) (5.800000) ) ( wartosc_dokladna (-1.600000) ) ) ;;
assert (a =. -2.40000000000000036);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-1.200000) ) ( razy ( razy ( wartosc_dokladnosc (-4.200000) (8.600000) ) ( razy ( razy ( wartosc_dokladna (0.600000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (1.600000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (-3.000000) (5.600000) ) ) ) ( podzielic ( wartosc_dokladna (-8.200000) ) ( wartosc_od_do (0.000000) (5.600000) ) ) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-2.200000) (0.000000) ) ( wartosc_od_do (-9.800000) (-9.400000) ) ) ;;
assert (a =. 7.2);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) (-7.400000);;
assert (a = false);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-3.400000) (7.200000) ) ( wartosc_dokladnosc (0.000000) (3.800000) ) ) ( razy ( podzielic ( razy ( podzielic ( wartosc_dokladna (-2.000000) ) ( podzielic ( wartosc_dokladna (1.200000) ) ( wartosc_od_do (-1.400000) (4.000000) ) ) ) ( wartosc_dokladna (-5.600000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( wartosc_od_do (6.400000) (9.400000) ) ) ) (9.600000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-6.600000) ) ( wartosc_dokladnosc (0.000000) (3.200000) ) ) (6.800000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-5.600000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.600000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-2.800000) (7.600000) ) ( minus ( wartosc_dokladnosc (0.000000) (2.400000) ) ( minus ( plus ( plus ( wartosc_od_do (-6.800000) (7.400000) ) ( wartosc_dokladnosc (0.400000) (0.000000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. -5.00000000000000089);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.600000) ) ( wartosc_od_do (-2.800000) (0.000000) ) ) ;;
assert (a =. 3.4);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-9.800000) (0.000000) ) ( wartosc_od_do (-9.800000) (-5.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( plus ( wartosc_dokladnosc (-9.600000) (6.000000) ) ( minus ( wartosc_dokladnosc (-0.200000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (1.000000) (7.800000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. -11.2537960954446863);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.800000) ) ( podzielic ( podzielic ( razy ( razy ( wartosc_dokladna (-9.200000) ) ( wartosc_dokladnosc (-1.200000) (6.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( plus ( wartosc_dokladna (1.200000) ) ( wartosc_od_do (-3.800000) (-1.200000) ) ) ( wartosc_dokladnosc (-1.600000) (0.000000) ) ) ) ( wartosc_od_do (3.200000) (3.800000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.800000) (3.600000) ) ) ;;
assert (a =. -3.6);;
let a = min_wartosc ( minus ( wartosc_od_do (-0.600000) (0.000000) ) ( wartosc_dokladna (3.800000) ) ) ;;
assert (a =. -4.39999999999999947);;
let a = max_wartosc ( plus ( wartosc_od_do (-2.000000) (9.800000) ) ( podzielic ( wartosc_dokladnosc (8.600000) (2.000000) ) ( wartosc_od_do (-8.400000) (0.000000) ) ) ) ;;
assert (a =. 8.79666666666666686);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladnosc (2.400000) (0.000000) ) ( wartosc_dokladna (3.200000) ) ) ( wartosc_dokladna (3.800000) ) ) ;;
assert (a =. 3.88);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (7.400000) (8.200000) ) ( plus ( wartosc_od_do (0.000000) (9.800000) ) ( wartosc_dokladna (0.400000) ) ) ) ( wartosc_dokladna (7.800000) ) ) ;;
assert (a =. 2.3342051282051286);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-5.600000) (4.800000) ) ( wartosc_dokladnosc (6.600000) (3.400000) ) ) ;;
assert (a =. -0.781196881777152519);;
let a = min_wartosc ( razy ( wartosc_od_do (-5.400000) (-2.000000) ) ( wartosc_od_do (0.000000) (1.200000) ) ) ;;
assert (a =. -6.48);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (5.800000) (8.000000) ) ( wartosc_od_do (-9.200000) (3.400000) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (2.200000) (6.600000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 3.4);;
let a = min_wartosc ( plus ( wartosc_dokladna (-0.200000) ) ( wartosc_od_do (-8.200000) (-1.400000) ) ) ;;
assert (a =. -8.39999999999999858);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (2.400000) (6.800000) ) ( wartosc_dokladnosc (0.000000) (5.800000) ) ) ( wartosc_od_do (-4.200000) (-1.800000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (1.800000) ) ) ( plus ( razy ( wartosc_od_do (-8.200000) (-4.800000) ) ( wartosc_od_do (-9.800000) (-8.000000) ) ) ( wartosc_od_do (-3.600000) (-2.600000) ) ) ) ;;
assert (a =. -55.88);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.800000) (7.000000) ) ( plus ( wartosc_dokladnosc (-2.400000) (1.600000) ) ( wartosc_dokladnosc (-6.800000) (3.200000) ) ) ) ;;
assert (a =. -0.782647584973166444);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.200000) ) ( wartosc_dokladna (9.200000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.400000) (9.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (6.800000) ) ( wartosc_od_do (-5.800000) (1.400000) ) ) ;;
assert (a =. -2.2);;
let a = min_wartosc ( minus ( minus ( plus ( wartosc_od_do (-7.400000) (-7.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladna (9.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -21.6);;
let a = min_wartosc ( razy ( wartosc_od_do (2.000000) (4.200000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (2.200000) ) ( razy ( wartosc_dokladnosc (2.600000) (2.600000) ) ( wartosc_od_do (0.400000) (3.400000) ) ) ) ( wartosc_dokladnosc (0.000000) (4.600000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( podzielic ( wartosc_dokladna (-0.800000) ) ( wartosc_dokladna (-0.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (7.400000) ) ) ;;
assert (a =. -12.4);;
let a = sr_wartosc ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( podzielic ( minus ( wartosc_dokladna (-1.400000) ) ( wartosc_dokladnosc (-3.600000) (5.200000) ) ) ( podzielic ( wartosc_od_do (-9.200000) (-5.400000) ) ( wartosc_dokladnosc (2.400000) (0.000000) ) ) ) ) ;;
assert (a =. 1.59146666666666681);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-8.200000) (7.200000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. -7.60959999999999948);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-6.000000) (7.200000) ) ( wartosc_od_do (-10.000000) (9.400000) ) ) ;;
assert (a =. -6.30000000000000071);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.600000) (3.400000) ) ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-6.600000) (0.000000) ) ( wartosc_dokladna (0.400000) ) ) ) ) (2.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-9.800000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (2.600000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.200000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (7.800000) ) ( wartosc_dokladnosc (3.800000) (6.600000) ) ) ;;
assert (a =. 15.7981199999999991);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (2.200000) (9.600000) ) ) ( wartosc_dokladnosc (-9.600000) (9.400000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.200000) (5.400000) ) ( wartosc_dokladna (2.200000) ) ) ;;
assert (a =. 4.18181818181818166);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-6.400000) ) ) (1.200000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (-7.200000) (1.400000) ) ( wartosc_od_do (0.000000) (5.400000) ) ) ( wartosc_od_do (0.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-0.800000) (5.600000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. -0.107885714285714293);;
let a = sr_wartosc ( minus ( wartosc_dokladna (6.400000) ) ( wartosc_od_do (-6.400000) (1.200000) ) ) ;;
assert (a =. 9.);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_od_do (-7.200000) (0.000000) ) ( razy ( wartosc_dokladnosc (-1.000000) (4.000000) ) ( razy ( wartosc_dokladna (8.400000) ) ( wartosc_dokladnosc (-9.800000) (2.600000) ) ) ) ) ( wartosc_dokladnosc (7.400000) (1.200000) ) ) ;;
assert (a =. -0.350250836620949302);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.800000) (0.000000) ) ( wartosc_od_do (-9.600000) (-0.600000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -36.);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-1.000000) (9.200000) ) ( wartosc_dokladnosc (8.400000) (0.600000) ) ) ( wartosc_od_do (-8.400000) (0.000000) ) ) (0.800000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-2.400000) ) ) (9.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-2.400000) ) ( wartosc_dokladna (-2.200000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (5.400000) ) ( podzielic ( wartosc_od_do (0.000000) (3.800000) ) ( podzielic ( wartosc_dokladnosc (5.800000) (7.600000) ) ( razy ( razy ( wartosc_dokladna (-3.800000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.200000) (4.200000) ) ) ) ( wartosc_od_do (-5.200000) (9.400000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (0.400000) ) ( wartosc_dokladnosc (2.400000) (2.000000) ) ) ;;
assert (a =. -1.952);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.600000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (7.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-6.400000) (5.200000) ) ( wartosc_dokladna (7.200000) ) ) ;;
assert (a =. 0.46720000000000006);;
let a = max_wartosc ( podzielic ( podzielic ( podzielic ( plus ( wartosc_od_do (-5.200000) (-3.600000) ) ( wartosc_dokladna (5.800000) ) ) ( razy ( razy ( wartosc_od_do (-1.200000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( podzielic ( wartosc_dokladnosc (-8.800000) (7.800000) ) ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_od_do (-5.800000) (0.000000) ) ) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ( wartosc_dokladna (5.200000) ) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (5.400000) ) ( wartosc_od_do (0.000000) (6.600000) ) ) ;;
assert (a =. 17.82);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-9.200000) (4.600000) ) ( wartosc_dokladna (9.400000) ) ) ;;
assert (a =. -18.6);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.600000) (1.200000) ) ) ;;
assert (a =. 6.6);;
let a = max_wartosc ( razy ( wartosc_dokladna (-7.200000) ) ( wartosc_od_do (-7.400000) (1.400000) ) ) ;;
assert (a =. 53.28);;
let a = min_wartosc ( minus ( wartosc_dokladna (4.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 4.6);;
let a = sr_wartosc ( podzielic ( podzielic ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( razy ( wartosc_od_do (-2.400000) (0.000000) ) ( wartosc_od_do (-9.200000) (1.800000) ) ) ) ( wartosc_dokladnosc (4.800000) (6.200000) ) ) ( wartosc_dokladnosc (0.000000) (6.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (5.400000) ) ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (-6.200000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (3.800000) ) ( wartosc_od_do (3.200000) (6.200000) ) ) ;;
assert (a =. 12.16);;
let a = min_wartosc ( razy ( wartosc_dokladna (2.400000) ) ( wartosc_dokladna (-2.400000) ) ) ;;
assert (a =. -5.76);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (4.400000) (4.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (8.400000) (2.000000) ) ) ( wartosc_od_do (-9.200000) (8.000000) ) ) ;;
assert (a =. 14.7679999999999989);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( minus ( minus ( wartosc_dokladnosc (0.000000) (6.600000) ) ( minus ( plus ( razy ( podzielic ( wartosc_od_do (0.000000) (1.200000) ) ( wartosc_dokladnosc (3.000000) (4.200000) ) ) ( wartosc_dokladnosc (0.000000) (6.800000) ) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ( wartosc_dokladnosc (-8.800000) (5.400000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) (8.800000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (4.600000) ) ( wartosc_dokladnosc (5.600000) (2.200000) ) ) ;;
assert (a =. -0.876800000000000246);;
let a = min_wartosc ( minus ( wartosc_dokladna (-7.200000) ) ( wartosc_od_do (2.200000) (9.200000) ) ) ;;
assert (a =. -16.4);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.400000) ) ( wartosc_dokladna (-3.400000) ) ) ;;
assert (a =. -1.58823529411764719);;
let a = in_wartosc ( minus ( minus ( wartosc_od_do (-6.200000) (9.800000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladna (6.000000) ) ) (-3.200000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-5.200000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. 0.65);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-7.600000) (8.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladnosc (7.000000) (0.000000) ) ( razy ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (6.200000) ) ) ( podzielic ( wartosc_od_do (-6.200000) (9.200000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (0.000000) (9.600000) ) ) ) ) ) ( wartosc_dokladnosc (4.800000) (8.800000) ) ) ;;
assert (a =. 133.566400000000016);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-0.400000) (2.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.600000) (7.000000) ) ( razy ( minus ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_od_do (0.400000) (3.800000) ) ( wartosc_dokladnosc (6.000000) (5.000000) ) ) ) ( wartosc_dokladnosc (6.600000) (0.000000) ) ) ) ;;
assert (a =. -247.615238095238084);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( plus ( wartosc_dokladna (-0.200000) ) ( wartosc_dokladnosc (9.800000) (0.000000) ) ) ) ;;
assert (a =. -6.60000000000000142);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (6.600000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_od_do (4.000000) (9.800000) ) ( minus ( wartosc_dokladna (1.400000) ) ( wartosc_dokladna (4.400000) ) ) ) ) (6.200000);;
assert (a = false);;
let a = sr_wartosc ( minus ( minus ( wartosc_dokladna (7.800000) ) ( plus ( plus ( plus ( wartosc_dokladnosc (-8.400000) (4.000000) ) ( wartosc_dokladnosc (4.400000) (8.600000) ) ) ( podzielic ( wartosc_dokladna (0.800000) ) ( wartosc_od_do (-1.000000) (0.600000) ) ) ) ( plus ( plus ( minus ( wartosc_dokladna (9.400000) ) ( plus ( wartosc_dokladnosc (-3.200000) (7.200000) ) ( podzielic ( razy ( wartosc_od_do (0.000000) (1.800000) ) ( wartosc_od_do (-2.600000) (0.000000) ) ) ( wartosc_dokladna (5.400000) ) ) ) ) ( wartosc_od_do (-8.000000) (-6.600000) ) ) ( wartosc_dokladna (9.600000) ) ) ) ) ( wartosc_od_do (0.000000) (6.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( podzielic ( podzielic ( wartosc_od_do (-9.400000) (0.000000) ) ( wartosc_dokladnosc (0.800000) (0.000000) ) ) ( podzielic ( podzielic ( wartosc_od_do (4.600000) (7.800000) ) ( wartosc_od_do (-6.000000) (9.800000) ) ) ( razy ( wartosc_dokladnosc (1.400000) (1.400000) ) ( wartosc_od_do (-8.800000) (0.400000) ) ) ) ) ( wartosc_dokladna (-0.600000) ) ) ;;
assert (a =. 114.876500869565206);;
let a = in_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (0.000000) (8.800000) ) ) (0.600000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.400000) ) ( wartosc_dokladnosc (-8.200000) (4.400000) ) ) ;;
assert (a =. -0.293250660107235883);;
let a = max_wartosc ( minus ( razy ( wartosc_od_do (-0.800000) (0.000000) ) ( wartosc_od_do (-4.000000) (2.800000) ) ) ( wartosc_od_do (-1.800000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-2.800000) ) ( minus ( wartosc_dokladnosc (4.200000) (3.400000) ) ( wartosc_od_do (-7.200000) (0.000000) ) ) ) ;;
assert (a =. -11.3601599999999987);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (4.600000) (3.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 9.738);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( plus ( minus ( razy ( podzielic ( wartosc_dokladna (3.800000) ) ( wartosc_od_do (0.000000) (4.400000) ) ) ( wartosc_dokladna (2.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-1.400000) ) ) ( wartosc_od_do (-8.800000) (-5.600000) ) ) ) ;;
assert (a =. 0.0764462809917354907);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (6.600000) (6.000000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (7.600000) ) ( wartosc_od_do (8.000000) (9.200000) ) ) ( wartosc_dokladnosc (2.400000) (5.600000) ) ) ) ;;
assert (a =. 2.9335275423728806);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( podzielic ( wartosc_od_do (4.000000) (5.800000) ) ( podzielic ( wartosc_dokladnosc (-0.400000) (0.000000) ) ( wartosc_od_do (-7.000000) (-1.400000) ) ) ) ) ;;
assert (a =. -0.214285714285714302);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (0.400000) ) ( minus ( wartosc_od_do (-1.000000) (6.600000) ) ( wartosc_dokladnosc (-0.600000) (4.000000) ) ) ) ) ( wartosc_dokladna (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (1.200000) ) ( wartosc_dokladnosc (-0.400000) (9.600000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-5.600000) (3.200000) ) ( plus ( wartosc_dokladnosc (4.400000) (5.400000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -5.6);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (9.800000) (7.800000) ) ( wartosc_dokladnosc (-7.000000) (8.200000) ) ) ;;
assert (a =. 15.4616);;
let a = sr_wartosc ( minus ( razy ( wartosc_od_do (6.000000) (8.400000) ) ( wartosc_dokladnosc (0.400000) (7.200000) ) ) ( minus ( wartosc_od_do (-5.600000) (5.000000) ) ( razy ( wartosc_dokladna (1.600000) ) ( wartosc_dokladnosc (8.200000) (3.800000) ) ) ) ) ;;
assert (a =. 16.33456);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (9.400000) (4.600000) ) ) ;;
assert (a =. 17.9676);;
let a = in_wartosc ( podzielic ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-5.800000) (9.200000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (1.200000) (9.600000) ) ) ) ) ( wartosc_dokladnosc (-7.200000) (0.000000) ) ) ( wartosc_dokladna (3.600000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (2.800000) ) ( wartosc_dokladna (2.600000) ) ) ;;
assert (a =. 0.199999999999999734);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.200000) ) ( wartosc_dokladna (-9.200000) ) ) (-8.600000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (-6.400000) ) ( podzielic ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (2.800000) ) ( wartosc_od_do (-3.600000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.800000) (7.600000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ) ( wartosc_od_do (-1.400000) (7.200000) ) ) ) (-7.600000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( podzielic ( wartosc_dokladna (7.200000) ) ( wartosc_dokladna (6.600000) ) ) ) (8.800000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (8.200000) ) ( wartosc_od_do (-4.800000) (4.000000) ) ) ;;
assert (a =. 4.19999999999999929);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-0.200000) (0.000000) ) ) ;;
assert (a =. 0.2);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.600000) (6.800000) ) ( minus ( wartosc_dokladnosc (5.400000) (5.400000) ) ( wartosc_od_do (1.800000) (3.200000) ) ) ) ;;
assert (a =. 13.8039600000000018);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.800000) ) ( wartosc_dokladna (1.600000) ) ) ;;
assert (a =. 3.0625);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (8.400000) ) ( wartosc_dokladna (9.200000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (2.200000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 5.2);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-8.800000) (-3.800000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (-2.800000) ) ( wartosc_dokladna (4.800000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( plus ( wartosc_od_do (-8.200000) (-3.000000) ) ( minus ( wartosc_od_do (-5.400000) (8.800000) ) ( wartosc_dokladnosc (0.000000) (7.600000) ) ) ) ;;
assert (a =. 5.80000000000000071);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( minus ( podzielic ( wartosc_od_do (-2.800000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( plus ( wartosc_dokladnosc (-5.400000) (8.800000) ) ( wartosc_dokladnosc (-5.400000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (7.200000) (9.800000) ) ( plus ( wartosc_dokladna (-4.400000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-3.600000) (-2.000000) ) ) (-3.800000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (2.600000) (0.000000) ) ( wartosc_od_do (8.400000) (8.800000) ) ) (-9.600000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-6.200000) (0.600000) ) ( wartosc_dokladnosc (-0.400000) (6.200000) ) ) (-9.400000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (6.800000) ) ( wartosc_dokladnosc (0.000000) (4.400000) ) ) ( wartosc_dokladna (-3.400000) ) ) ( wartosc_dokladnosc (0.000000) (5.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.600000) (0.000000) ) ( wartosc_dokladnosc (-5.400000) (3.400000) ) ) ;;
assert (a =. 0.249214017329959348);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.400000) (7.000000) ) ) ( podzielic ( wartosc_od_do (-0.600000) (5.400000) ) ( wartosc_dokladnosc (4.400000) (5.800000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (-2.200000) (0.000000) ) ( plus ( podzielic ( wartosc_dokladna (-4.600000) ) ( wartosc_dokladnosc (0.800000) (0.600000) ) ) ( wartosc_dokladnosc (1.000000) (2.600000) ) ) ) ;;
assert (a =. 10.5835581488933581);;
let a = min_wartosc ( minus ( wartosc_dokladna (-6.600000) ) ( wartosc_dokladnosc (8.800000) (9.000000) ) ) ;;
assert (a =. -16.192);;
let a = sr_wartosc ( plus ( wartosc_od_do (-3.600000) (-2.800000) ) ( wartosc_dokladna (-6.600000) ) ) ;;
assert (a =. -9.79999999999999893);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.800000) (-3.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.400000) (3.200000) ) ( wartosc_od_do (4.200000) (4.800000) ) ) (-6.800000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.600000) (0.000000) ) ( wartosc_od_do (0.000000) (7.800000) ) ) (2.400000);;
assert (a = true);;
let a = sr_wartosc ( razy ( plus ( minus ( podzielic ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-8.000000) (-4.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (4.400000) (1.800000) ) ) ( wartosc_dokladna (-4.600000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.400000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (0.200000) (2.600000) ) ( wartosc_od_do (-7.400000) (-0.800000) ) ) ( razy ( wartosc_od_do (-10.000000) (6.000000) ) ( plus ( razy ( wartosc_dokladna (-0.600000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladnosc (8.400000) (6.600000) ) ) ) ) ( wartosc_od_do (0.000000) (6.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladna (-7.200000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (2.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_od_do (0.000000) (7.200000) ) ( wartosc_od_do (-7.400000) (-3.400000) ) ) ( wartosc_dokladna (0.800000) ) ) ( wartosc_dokladna (-6.800000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.200000) ) ( wartosc_dokladna (-5.600000) ) ) ;;
assert (a =. -0.196428571428571452);;
let a = sr_wartosc ( razy ( wartosc_dokladna (8.200000) ) ( wartosc_od_do (-0.400000) (0.000000) ) ) ;;
assert (a =. -1.64);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-3.800000) ) ( wartosc_dokladnosc (5.600000) (0.000000) ) ) ;;
assert (a =. -0.678571428571428603);;
let a = in_wartosc ( plus ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ( wartosc_od_do (-8.200000) (0.000000) ) ) (-8.600000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-1.600000) (0.600000) ) ( wartosc_dokladna (-2.800000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.56800000000000006);;
let a = max_wartosc ( plus ( wartosc_dokladna (-2.400000) ) ( podzielic ( wartosc_dokladna (8.200000) ) ( wartosc_dokladnosc (-9.400000) (5.400000) ) ) ) ;;
assert (a =. -3.22764746255399881);;
let a = min_wartosc ( plus ( wartosc_od_do (-9.000000) (7.800000) ) ( wartosc_dokladna (7.400000) ) ) ;;
assert (a =. -1.59999999999999964);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-3.000000) (4.600000) ) ( wartosc_dokladnosc (-3.800000) (0.800000) ) ) ( wartosc_dokladna (-0.600000) ) ) ;;
assert (a =. -19.006992);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-2.600000) (1.600000) ) ( plus ( wartosc_od_do (0.000000) (6.400000) ) ( plus ( wartosc_od_do (4.400000) (7.800000) ) ( wartosc_dokladna (-6.400000) ) ) ) ) ;;
assert (a =. -10.4416);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.600000) (8.000000) ) ( podzielic ( razy ( razy ( wartosc_od_do (-6.200000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.200000) ) ) ( wartosc_od_do (-1.000000) (9.600000) ) ) ( wartosc_od_do (-10.000000) (-7.800000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-10.000000) (8.600000) ) ( wartosc_od_do (-6.800000) (7.000000) ) ) ;;
assert (a =. -0.800000000000000711);;
let a = min_wartosc ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-7.800000) ) ) ;;
assert (a =. -17.8);;
let a = in_wartosc ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) (5.800000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (6.400000) ) ( wartosc_dokladna (4.800000) ) ) ;;
assert (a =. 1.60000000000000053);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-3.200000) (0.000000) ) ( wartosc_dokladna (-3.600000) ) ) (8.600000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (9.600000) (1.000000) ) ( wartosc_dokladnosc (3.200000) (5.800000) ) ) ;;
assert (a =. 12.8);;
let a = max_wartosc ( plus ( wartosc_od_do (6.000000) (8.600000) ) ( wartosc_dokladnosc (-0.400000) (7.000000) ) ) ;;
assert (a =. 8.228);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.800000) ) ( wartosc_dokladna (-3.400000) ) ) ;;
assert (a =. -2.59999999999999964);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.200000) (7.600000) ) ( minus ( minus ( wartosc_dokladna (3.200000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ;;
assert (a =. 0.406560000000000088);;
let a = max_wartosc ( minus ( wartosc_od_do (-4.400000) (2.800000) ) ( wartosc_dokladna (9.600000) ) ) ;;
assert (a =. -6.8);;
let a = sr_wartosc ( minus ( razy ( wartosc_od_do (1.200000) (3.400000) ) ( wartosc_od_do (-0.400000) (8.200000) ) ) ( wartosc_dokladnosc (0.200000) (3.800000) ) ) ;;
assert (a =. 13.0599999999999987);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (2.600000) ) ( wartosc_od_do (-8.000000) (2.400000) ) ) ( wartosc_dokladna (-2.200000) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (3.600000) (2.000000) ) ( wartosc_dokladna (-7.600000) ) ) ;;
assert (a =. 11.272);;
let a = in_wartosc ( minus ( wartosc_od_do (-9.200000) (-1.400000) ) ( wartosc_dokladnosc (3.800000) (2.400000) ) ) (-0.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (1.400000) (8.000000) ) ( razy ( wartosc_od_do (4.000000) (9.800000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (2.600000) (3.000000) ) ( wartosc_dokladna (-8.600000) ) ) ;;
assert (a =. -6.0779999999999994);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.600000) (0.000000) ) ( wartosc_od_do (-4.000000) (8.800000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-6.600000) (6.400000) ) ) ( wartosc_od_do (-1.200000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-7.600000) (8.200000) ) ( wartosc_od_do (-4.400000) (1.400000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (1.600000) (8.800000) ) ( wartosc_dokladna (6.000000) ) ) ( razy ( wartosc_od_do (-4.400000) (6.600000) ) ( wartosc_dokladna (-10.000000) ) ) ) ( wartosc_dokladna (1.200000) ) ) (-3.600000);;
assert (a = true);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-3.400000) (2.400000) ) ( wartosc_dokladnosc (4.400000) (7.200000) ) ) ( podzielic ( minus ( razy ( wartosc_od_do (-3.800000) (6.400000) ) ( wartosc_dokladna (-1.400000) ) ) ( wartosc_dokladna (-4.800000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (3.600000) ) ( wartosc_dokladnosc (-0.600000) (3.000000) ) ) (-6.400000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-4.200000) (-3.200000) ) ( wartosc_dokladnosc (-7.000000) (8.200000) ) ) ;;
assert (a =. 20.5632000000000019);;
let a = sr_wartosc ( razy ( wartosc_od_do (2.200000) (3.600000) ) ( wartosc_dokladnosc (6.200000) (6.200000) ) ) ;;
assert (a =. 18.2490800000000029);;
let a = min_wartosc ( razy ( minus ( wartosc_dokladna (-1.800000) ) ( podzielic ( wartosc_od_do (-5.400000) (8.600000) ) ( wartosc_dokladna (-9.400000) ) ) ) ( wartosc_od_do (-9.400000) (-5.800000) ) ) ;;
assert (a =. 5.13361702127659569);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (5.800000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.400000) (3.400000) ) ( podzielic ( wartosc_dokladna (-2.800000) ) ( wartosc_dokladnosc (-10.000000) (8.600000) ) ) ) ;;
assert (a =. -1.93928571428571495);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.400000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (2.000000) (0.400000) ) ( plus ( wartosc_dokladnosc (-8.800000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -17.6035200000000032);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.600000) ) ( wartosc_dokladna (-8.600000) ) ) ;;
assert (a =. 9.2);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.800000) ) ( wartosc_dokladnosc (4.200000) (2.600000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (8.400000) (3.200000) ) ) ;;
assert (a =. 9.1312);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.800000) (2.400000) ) ( wartosc_dokladnosc (-6.400000) (4.600000) ) ) ;;
assert (a =. 0.458595387840670776);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (5.600000) (9.400000) ) ( wartosc_od_do (-6.800000) (-2.400000) ) ) ;;
assert (a =. -26.9180799999999962);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-4.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (6.400000) (7.800000) ) ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ;;
assert (a =. 14.4);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.200000) (6.600000) ) ( wartosc_dokladna (-5.800000) ) ) ;;
assert (a =. 1.48151724137931029);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-0.200000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.200000) (0.800000) ) ( wartosc_dokladnosc (2.400000) (0.000000) ) ) ;;
assert (a =. -1.74999999999999978);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.66666666666666663);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (8.200000) ) ( wartosc_dokladna (-8.600000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (2.800000) ) ( wartosc_dokladna (-1.400000) ) ) ( wartosc_od_do (0.000000) (3.400000) ) ) ;;
assert (a =. -0.588235294117647078);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-9.600000) (1.600000) ) ( wartosc_dokladna (-1.400000) ) ) ;;
assert (a =. -8.04639999999999844);;
let a = max_wartosc ( plus ( wartosc_od_do (-7.800000) (8.800000) ) ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-6.800000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (-2.400000) ) ( wartosc_dokladna (-5.600000) ) ) (3.200000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (1.200000) (2.800000) ) ( wartosc_dokladna (3.600000) ) ) (2.800000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( minus ( minus ( wartosc_dokladnosc (9.800000) (2.400000) ) ( wartosc_od_do (0.000000) (2.200000) ) ) ( razy ( razy ( wartosc_dokladna (6.800000) ) ( wartosc_dokladnosc (-4.200000) (6.400000) ) ) ( wartosc_dokladna (-1.200000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (4.400000) (2.200000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (0.600000) ) ( wartosc_dokladnosc (-1.400000) (4.400000) ) ) ) ) ;;
assert (a =. 4.08629096880131382);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (2.600000) ) ( wartosc_od_do (-8.200000) (-1.200000) ) ) ;;
assert (a =. 3.32999999999999918);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (4.800000) (0.600000) ) ( wartosc_dokladna (-4.600000) ) ) ( podzielic ( wartosc_dokladna (6.600000) ) ( wartosc_dokladna (8.800000) ) ) ) (3.200000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-7.200000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (7.600000) ) ( wartosc_od_do (-8.200000) (-7.600000) ) ) (4.400000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-3.200000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (8.200000) (0.000000) ) ( wartosc_od_do (5.000000) (5.600000) ) ) (6.400000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (8.200000) (8.000000) ) ( wartosc_dokladna (4.400000) ) ) (-7.600000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (1.200000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (6.200000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (-2.800000) (8.600000) ) ( wartosc_dokladnosc (3.800000) (8.600000) ) ) ( wartosc_od_do (-4.600000) (6.800000) ) ) ) ) ( wartosc_dokladnosc (3.200000) (1.800000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (6.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.800000) ) ( wartosc_od_do (1.400000) (9.400000) ) ) ) (8.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.200000) (-5.400000) ) ( wartosc_od_do (-0.400000) (7.800000) ) ) (0.800000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.800000) (0.000000) ) ( podzielic ( wartosc_od_do (-4.200000) (6.800000) ) ( wartosc_dokladnosc (-9.600000) (7.800000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.800000) (7.000000) ) ( plus ( wartosc_od_do (2.200000) (6.400000) ) ( razy ( plus ( plus ( wartosc_dokladnosc (7.200000) (0.000000) ) ( minus ( wartosc_od_do (2.000000) (5.200000) ) ( wartosc_dokladnosc (-2.000000) (3.200000) ) ) ) ( wartosc_dokladna (-3.400000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ;;
assert (a =. 0.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladnosc (-3.000000) (4.600000) ) ( wartosc_dokladnosc (-5.800000) (0.600000) ) ) ( wartosc_dokladna (6.800000) ) ) ;;
assert (a =. -58.66496);;
let a = min_wartosc ( minus ( wartosc_od_do (1.400000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 1.4);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladnosc (0.600000) (8.800000) ) ( wartosc_dokladna (1.200000) ) ) ( wartosc_dokladnosc (-5.200000) (2.800000) ) ) (-2.800000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.200000) (0.400000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-7.800000) (8.800000) ) ( wartosc_od_do (-1.400000) (0.000000) ) ) ( wartosc_dokladnosc (-9.600000) (4.800000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (-7.400000) ) ( wartosc_dokladna (4.800000) ) ) ( wartosc_dokladna (-2.800000) ) ) ;;
assert (a =. 4.31666666666666643);;
let a = in_wartosc ( minus ( wartosc_od_do (-7.200000) (7.000000) ) ( razy ( wartosc_dokladnosc (0.200000) (5.600000) ) ( wartosc_dokladnosc (-3.600000) (1.400000) ) ) ) (-2.600000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.200000) ) ( wartosc_od_do (0.000000) (1.600000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (5.400000) (9.000000) ) ) (8.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-4.800000) (9.200000) ) ( wartosc_dokladna (8.800000) ) ) (9.400000);;
assert (a = false);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladnosc (9.800000) (7.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (-5.200000) ) ) ;;
assert (a =. 2.162);;
let a = min_wartosc ( razy ( wartosc_od_do (-5.400000) (-2.200000) ) ( wartosc_dokladna (9.600000) ) ) ;;
assert (a =. -51.84);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (6.200000) (4.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( minus ( plus ( wartosc_dokladna (-1.800000) ) ( wartosc_dokladnosc (0.000000) (2.200000) ) ) ( wartosc_dokladnosc (4.400000) (4.200000) ) ) ( wartosc_od_do (-7.800000) (2.200000) ) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (5.800000) (8.400000) ) ( wartosc_dokladnosc (9.000000) (8.600000) ) ) ( razy ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-4.600000) (2.800000) ) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (5.600000) (5.800000) ) ( wartosc_dokladna (9.200000) ) ) (1.800000);;
assert (a = false);;
let a = min_wartosc ( plus ( plus ( wartosc_od_do (-3.400000) (0.400000) ) ( wartosc_dokladna (0.000000) ) ) ( razy ( plus ( wartosc_od_do (-5.000000) (2.200000) ) ( wartosc_od_do (-7.600000) (-0.800000) ) ) ( plus ( wartosc_dokladna (7.800000) ) ( razy ( podzielic ( wartosc_od_do (-9.800000) (0.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (4.400000) ) ( wartosc_dokladna (-0.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-9.400000) (7.200000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (6.200000) ) ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-8.000000) (-1.800000) ) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( razy ( podzielic ( wartosc_dokladnosc (3.600000) (0.000000) ) ( wartosc_od_do (7.200000) (9.000000) ) ) ( wartosc_od_do (-9.000000) (1.000000) ) ) ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (6.800000) (7.600000) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-9.400000) ) ( wartosc_dokladnosc (9.000000) (5.600000) ) ) ;;
assert (a =. -84.6);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-4.200000) (-3.800000) ) ( wartosc_dokladna (-5.200000) ) ) ( wartosc_dokladna (-1.200000) ) ) ;;
assert (a =. -0.673076923076923128);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.200000) (5.000000) ) ) ( wartosc_od_do (-4.200000) (0.000000) ) ) ;;
assert (a =. -4.2);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-1.600000) (9.200000) ) ( wartosc_dokladna (6.600000) ) ) ;;
assert (a =. -10.56);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (5.400000) (1.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 10.4);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (3.400000) ) ( minus ( razy ( podzielic ( razy ( wartosc_dokladnosc (5.600000) (1.800000) ) ( wartosc_od_do (0.000000) (0.600000) ) ) ( wartosc_od_do (-8.400000) (-3.400000) ) ) ( wartosc_dokladna (0.000000) ) ) ( razy ( wartosc_dokladna (1.800000) ) ( wartosc_dokladnosc (2.200000) (3.600000) ) ) ) ) (-9.800000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (-1.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (8.400000) (1.800000) ) ( wartosc_dokladna (2.200000) ) ) ;;
assert (a =. 18.8126400000000018);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-0.800000) ) ( wartosc_dokladna (5.200000) ) ) ;;
assert (a =. -0.153846153846153855);;
let a = sr_wartosc ( minus ( wartosc_od_do (1.000000) (1.400000) ) ( wartosc_od_do (3.400000) (6.400000) ) ) ;;
assert (a =. -3.7);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.600000) (0.000000) ) ( wartosc_dokladna (-4.200000) ) ) ;;
assert (a =. 0.547619047619047561);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.400000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-3.800000) (2.400000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-1.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_dokladna (-4.200000) ) ) ;;
assert (a =. -4.1);;
let a = in_wartosc ( plus ( wartosc_dokladna (-4.200000) ) ( wartosc_dokladna (8.200000) ) ) (1.400000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-7.400000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_od_do (-4.800000) (-4.600000) ) ( wartosc_dokladnosc (-2.800000) (3.200000) ) ) ;;
assert (a =. -7.3104);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (7.600000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (1.400000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-5.600000) (6.000000) ) ( wartosc_od_do (-10.000000) (8.200000) ) ) ;;
assert (a =. -13.7999999999999989);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-3.800000) (3.200000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( razy ( wartosc_od_do (1.200000) (9.800000) ) ( wartosc_od_do (-3.600000) (2.800000) ) ) ( wartosc_od_do (4.400000) (8.800000) ) ) ;;
assert (a =. -30.8800000000000026);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladnosc (7.800000) (0.400000) ) ( wartosc_od_do (-2.400000) (-1.000000) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.000000) (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-5.600000) (7.600000) ) ( minus ( wartosc_dokladnosc (-9.600000) (6.400000) ) ( wartosc_dokladnosc (-7.000000) (8.000000) ) ) ) ;;
assert (a =. 15.0598246399999969);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (6.400000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-4.600000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-3.600000) ) ( wartosc_dokladna (2.800000) ) ) ;;
assert (a =. -6.4);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (1.400000) ) ( wartosc_dokladnosc (-6.200000) (5.600000) ) ) ;;
assert (a =. 5.8528);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.400000) (-0.800000) ) ( minus ( wartosc_od_do (-6.600000) (1.800000) ) ( plus ( wartosc_dokladnosc (0.000000) (3.200000) ) ( wartosc_dokladna (3.200000) ) ) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.600000) (6.800000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( razy ( wartosc_od_do (5.800000) (8.800000) ) ( podzielic ( minus ( wartosc_od_do (-8.400000) (6.600000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (3.600000) ) ( wartosc_dokladna (0.800000) ) ) ) ( wartosc_dokladna (-2.000000) ) ) ) ( plus ( wartosc_dokladna (-1.600000) ) ( wartosc_dokladnosc (0.000000) (3.600000) ) ) ) ;;
assert (a =. -23.100000000000005);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (9.400000) ) ( wartosc_od_do (-7.600000) (0.000000) ) ) ;;
assert (a =. 8.5);;
let a = min_wartosc ( razy ( plus ( wartosc_dokladna (2.200000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (-9.400000) (9.400000) ) ( podzielic ( podzielic ( podzielic ( podzielic ( podzielic ( podzielic ( wartosc_od_do (0.000000) (1.600000) ) ( wartosc_dokladna (5.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( wartosc_od_do (-6.600000) (-0.400000) ) ( wartosc_dokladnosc (7.600000) (9.400000) ) ) ) ( wartosc_dokladnosc (3.400000) (5.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.200000) ) ) ) ( plus ( wartosc_dokladna (9.400000) ) ( wartosc_od_do (-2.000000) (5.800000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (9.000000) (0.400000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (3.400000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-0.400000) (6.200000) ) ( wartosc_dokladnosc (-4.000000) (4.600000) ) ) ;;
assert (a =. -25.940800000000003);;
let a = in_wartosc ( razy ( wartosc_od_do (-1.400000) (7.000000) ) ( wartosc_od_do (-9.000000) (-7.600000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.000000) (2.400000) ) ( wartosc_dokladna (3.600000) ) ) ;;
assert (a =. 8.64);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (2.000000) (9.200000) ) ( plus ( wartosc_od_do (-7.600000) (-6.400000) ) ( wartosc_od_do (-5.600000) (-0.200000) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (0.200000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-6.800000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( podzielic ( podzielic ( minus ( wartosc_od_do (-8.400000) (4.400000) ) ( plus ( podzielic ( wartosc_od_do (-3.600000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladna (6.800000) ) ) ) ( wartosc_dokladna (-5.800000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (7.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-3.600000) ) ( wartosc_dokladna (6.200000) ) ) ;;
assert (a =. -0.58064516129032262);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladnosc (4.400000) (1.800000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -38.2);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (3.200000) ) ( wartosc_od_do (-4.200000) (6.000000) ) ) ;;
assert (a =. 9.2);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-3.600000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.400000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.200000) (-2.400000) ) ( wartosc_dokladnosc (-7.600000) (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (1.600000) ) ( wartosc_od_do (6.200000) (9.000000) ) ) (-1.200000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-5.400000) ) ( wartosc_dokladna (7.200000) ) ) ;;
assert (a =. -38.88);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (-1.600000) (7.400000) ) ( minus ( wartosc_dokladnosc (0.000000) (9.600000) ) ( wartosc_dokladna (-9.600000) ) ) ) ( razy ( wartosc_dokladna (6.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-0.800000) ) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (1.600000) (2.800000) ) ( razy ( plus ( wartosc_dokladna (9.200000) ) ( wartosc_od_do (-9.600000) (-3.800000) ) ) ( wartosc_od_do (-9.600000) (8.200000) ) ) ) ;;
assert (a =. 54.6399999999999935);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-4.200000) ) ( wartosc_dokladnosc (-5.200000) (4.000000) ) ) ;;
assert (a =. 21.8400000000000034);;
let a = min_wartosc ( razy ( plus ( wartosc_od_do (1.800000) (4.000000) ) ( wartosc_od_do (0.000000) (1.800000) ) ) ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (7.800000) ) ) ( podzielic ( wartosc_od_do (-0.200000) (9.400000) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (2.600000) (8.400000) ) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (7.200000) ) ( wartosc_dokladna (6.000000) ) ) (4.400000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (-3.200000) ) ( podzielic ( wartosc_dokladnosc (6.200000) (0.000000) ) ( wartosc_od_do (0.000000) (0.400000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( razy ( plus ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (3.800000) (4.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (8.200000) (6.800000) ) ) ( wartosc_od_do (-4.400000) (-0.600000) ) ) ;;
assert (a =. -0.868454545454545368);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladnosc (3.000000) (9.000000) ) ) ( minus ( wartosc_od_do (-6.800000) (-4.800000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (1.200000) ) ) ) ) ;;
assert (a =. 0.488400488400488442);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.200000) (2.600000) ) ( wartosc_dokladnosc (2.600000) (7.000000) ) ) ;;
assert (a =. 3.17514436121611254);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (-2.800000) (-2.400000) ) ( wartosc_dokladna (2.800000) ) ) ( wartosc_dokladna (-9.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.400000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.600000) ) ( wartosc_dokladnosc (-8.800000) (2.200000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (-4.600000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-7.600000) (9.400000) ) ) ) ;;
assert (a =. -4.6);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (6.000000) (4.000000) ) ( wartosc_od_do (-7.400000) (-0.600000) ) ) ( wartosc_od_do (5.600000) (7.400000) ) ) ;;
assert (a =. -4.35637065637065657);;
let a = in_wartosc ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (4.400000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (5.600000) (9.400000) ) ) ;;
assert (a =. 12.2527999999999988);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.800000) (3.200000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (5.800000) ) ( wartosc_dokladna (2.600000) ) ) ;;
assert (a =. 2.23076923076923039);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.400000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -1.175);;
let a = sr_wartosc ( minus ( wartosc_od_do (-2.600000) (3.600000) ) ( wartosc_od_do (0.000000) (5.600000) ) ) ;;
assert (a =. -2.3);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-3.400000) (-2.800000) ) ( wartosc_od_do (-2.400000) (-2.200000) ) ) ;;
assert (a =. 1.54545454545454541);;
let a = in_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (5.800000) (8.200000) ) ) (0.200000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.400000) (-8.200000) ) ( podzielic ( wartosc_dokladna (6.400000) ) ( wartosc_dokladnosc (-2.600000) (9.200000) ) ) ) ;;
assert (a =. 4.170075);;
let a = min_wartosc ( razy ( wartosc_dokladna (-2.800000) ) ( wartosc_dokladna (7.800000) ) ) ;;
assert (a =. -21.84);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (6.400000) ) ( razy ( wartosc_dokladnosc (1.400000) (9.600000) ) ( razy ( wartosc_dokladna (8.200000) ) ( wartosc_dokladnosc (2.600000) (6.800000) ) ) ) ) ;;
assert (a =. 25.1477757439999969);;
let a = min_wartosc ( razy ( wartosc_od_do (-8.600000) (-2.600000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (1.800000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.800000) ) ( wartosc_dokladna (-1.600000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (9.400000) (4.200000) ) ( wartosc_od_do (-5.800000) (-2.200000) ) ) (1.200000);;
assert (a = false);;
let a = min_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (3.400000) ) ( wartosc_dokladnosc (8.000000) (7.600000) ) ) ( wartosc_dokladna (-2.400000) ) ) ;;
assert (a =. -28.8192000000000021);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladna (-3.800000) ) ( wartosc_dokladna (4.400000) ) ) ( podzielic ( wartosc_dokladna (3.200000) ) ( podzielic ( wartosc_od_do (-9.400000) (3.000000) ) ( wartosc_dokladna (3.600000) ) ) ) ) (-1.200000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-7.400000) (7.800000) ) ( minus ( wartosc_dokladnosc (-0.800000) (6.400000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. 6.79019264000000078);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (7.600000) ) ( wartosc_dokladnosc (7.800000) (1.400000) ) ) (-4.600000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-7.200000) (-0.800000) ) ( wartosc_od_do (-3.200000) (3.600000) ) ) (-5.800000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (5.200000) (0.000000) ) ( wartosc_od_do (0.000000) (4.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-4.800000) (9.400000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -94.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (2.400000) (0.400000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.200000) (5.600000) ) ) ) ;;
assert (a =. 2.3904);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.400000) (9.200000) ) ( wartosc_od_do (0.000000) (0.200000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (3.600000) ) ( wartosc_dokladnosc (1.000000) (0.600000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (3.600000) ) ( wartosc_dokladnosc (-0.600000) (4.000000) ) ) ;;
assert (a =. -6.00961538461538503);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( minus ( wartosc_od_do (4.200000) (6.000000) ) ( razy ( wartosc_od_do (9.200000) (9.200000) ) ( wartosc_dokladna (0.000000) ) ) ) ) (2.200000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (-4.200000) (2.800000) ) ) ;;
assert (a =. -4.2);;
let a = in_wartosc ( plus ( razy ( minus ( wartosc_od_do (-1.600000) (7.400000) ) ( wartosc_dokladnosc (-4.800000) (4.800000) ) ) ( wartosc_od_do (3.800000) (7.400000) ) ) ( wartosc_dokladnosc (-5.000000) (5.600000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (7.200000) ) ) ( plus ( minus ( wartosc_od_do (-5.200000) (-0.800000) ) ( wartosc_dokladna (6.600000) ) ) ( wartosc_od_do (-5.200000) (4.000000) ) ) ) ;;
assert (a =. -73.44);;
let a = sr_wartosc ( razy ( wartosc_od_do (-4.600000) (1.800000) ) ( wartosc_dokladnosc (0.000000) (7.400000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (4.200000) (5.400000) ) ( wartosc_dokladna (7.400000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( plus ( wartosc_dokladnosc (-3.000000) (4.400000) ) ( wartosc_dokladna (-6.200000) ) ) ) ;;
assert (a =. 9.2);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (7.800000) (1.400000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (6.400000) (0.400000) ) ) ;;
assert (a =. 6.4256);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-3.800000) (7.400000) ) ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ( wartosc_od_do (-1.200000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladna (9.000000) ) ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-2.600000) (2.800000) ) ) ) ( wartosc_od_do (0.200000) (9.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-6.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (6.800000) (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (8.800000) (9.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (8.200000) ) ) ;;
assert (a =. 5.53066666666666595);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.400000) ) ( wartosc_dokladnosc (1.400000) (2.200000) ) ) (-9.600000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-7.800000) (5.400000) ) ( wartosc_dokladna (-3.800000) ) ) ;;
assert (a =. 28.03944);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (9.400000) ) ) ;;
assert (a =. 0.319148936170212782);;
let a = sr_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (9.600000) ) ) ;;
assert (a =. 14.6);;
let a = max_wartosc ( plus ( wartosc_dokladna (-2.200000) ) ( wartosc_dokladnosc (6.600000) (0.000000) ) ) ;;
assert (a =. 4.39999999999999947);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-6.600000) (7.400000) ) ( wartosc_od_do (-2.800000) (8.200000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (7.000000) (5.600000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -7.392);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (2.000000) ) ( wartosc_dokladna (5.200000) ) ) (0.200000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-1.800000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( minus ( wartosc_dokladnosc (7.800000) (9.800000) ) ( wartosc_od_do (-8.200000) (0.000000) ) ) ( wartosc_dokladnosc (1.600000) (6.800000) ) ) ;;
assert (a =. 10.2999999999999989);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (9.400000) ) ( wartosc_dokladnosc (3.600000) (1.200000) ) ) ;;
assert (a =. 2.61148716526290858);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.800000) (-3.000000) ) ) ;;
assert (a =. 6.8);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.200000) ) ( wartosc_dokladna (0.000000) ) ) (5.200000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-8.200000) (8.200000) ) ( wartosc_od_do (-9.200000) (7.400000) ) ) (2.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( plus ( wartosc_dokladna (-5.400000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.400000) (2.200000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -5.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-2.800000) (6.400000) ) ( razy ( plus ( wartosc_dokladna (-1.600000) ) ( podzielic ( wartosc_dokladna (5.200000) ) ( wartosc_dokladnosc (8.200000) (0.000000) ) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ) (-2.600000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-3.600000) ) ( wartosc_dokladnosc (8.600000) (2.800000) ) ) ;;
assert (a =. -1.19628672600248831);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.200000) ) ( wartosc_dokladna (1.200000) ) ) ;;
assert (a =. 2.66666666666666696);;
let a = max_wartosc ( minus ( wartosc_dokladna (-0.800000) ) ( wartosc_od_do (-6.800000) (-3.600000) ) ) ;;
assert (a =. 6.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( plus ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (8.200000) ) ) ( wartosc_od_do (1.800000) (6.600000) ) ) ) (9.200000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.400000) ) ( plus ( razy ( wartosc_dokladna (2.600000) ) ( plus ( wartosc_dokladnosc (7.200000) (8.000000) ) ( wartosc_od_do (-9.000000) (7.600000) ) ) ) ( wartosc_dokladnosc (0.000000) (6.800000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (1.400000) ) ) ( wartosc_dokladna (0.000000) ) ) (4.600000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (7.400000) ) ( wartosc_dokladna (0.000000) ) ) (-0.200000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (-6.200000) ) ( wartosc_od_do (-0.200000) (2.200000) ) ) ;;
assert (a =. 1.24000000000000021);;
let a = sr_wartosc ( plus ( wartosc_dokladna (5.400000) ) ( wartosc_od_do (-7.800000) (-3.400000) ) ) ;;
assert (a =. -0.199999999999999512);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.200000) (0.800000) ) ( wartosc_od_do (-3.600000) (5.200000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (7.400000) (9.200000) ) ( wartosc_dokladnosc (1.000000) (2.200000) ) ) ;;
assert (a =. 10.222);;
let a = min_wartosc ( plus ( wartosc_od_do (-8.800000) (-8.400000) ) ( wartosc_od_do (0.000000) (4.600000) ) ) ;;
assert (a =. -8.8);;
let a = min_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (4.600000) (5.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (3.000000) (0.200000) ) ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( plus ( wartosc_od_do (3.800000) (7.600000) ) ( wartosc_dokladna (7.000000) ) ) ) ) ( wartosc_dokladna (-1.600000) ) ) ) ( wartosc_od_do (-4.400000) (5.600000) ) ) ;;
assert (a =. -218.463593854375404);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (2.200000) (2.400000) ) ) ( wartosc_dokladna (6.400000) ) ) (-3.400000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (-3.200000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-1.400000) (7.000000) ) ( wartosc_od_do (-3.200000) (-0.800000) ) ) ) ) ;;
assert (a =. -3.2);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (9.600000) ) ( wartosc_dokladnosc (-4.600000) (6.400000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_od_do (0.000000) (4.400000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( wartosc_dokladna (-5.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-8.200000) (0.000000) ) ( wartosc_dokladnosc (-0.800000) (0.000000) ) ) ;;
assert (a =. -9.);;
let a = sr_wartosc ( podzielic ( plus ( razy ( podzielic ( podzielic ( wartosc_od_do (-8.200000) (-0.600000) ) ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (-7.800000) ) ( wartosc_od_do (0.000000) (0.600000) ) ) ) ) ( podzielic ( wartosc_dokladna (-1.600000) ) ( wartosc_dokladna (6.200000) ) ) ) ( wartosc_od_do (-7.400000) (-3.800000) ) ) ( wartosc_dokladnosc (-2.600000) (9.200000) ) ) ( wartosc_dokladna (1.600000) ) ) ;;
assert (a =. 4.02728365384615383);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-1.600000) (6.800000) ) ( wartosc_dokladna (-1.800000) ) ) ;;
assert (a =. 0.949333333333333473);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (7.600000) ) ( wartosc_od_do (0.000000) (0.800000) ) ) ;;
assert (a =. -10.76);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (3.400000) (0.000000) ) ( razy ( podzielic ( wartosc_dokladna (-2.600000) ) ( wartosc_od_do (8.000000) (8.800000) ) ) ( podzielic ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladnosc (1.600000) (0.200000) ) ) ) ) (5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-8.800000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) (-1.200000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( minus ( wartosc_od_do (-8.800000) (4.600000) ) ( podzielic ( wartosc_dokladnosc (1.200000) (2.400000) ) ( podzielic ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-7.400000) (-2.800000) ) ) ( wartosc_dokladnosc (0.000000) (3.800000) ) ) ) ) ( wartosc_dokladna (1.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (6.800000) (0.000000) ) ( minus ( wartosc_od_do (-5.000000) (3.000000) ) ( wartosc_dokladna (6.200000) ) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-0.600000) ) ) ;;
assert (a =. 0.6);;
let a = max_wartosc ( razy ( wartosc_od_do (-4.600000) (-4.400000) ) ( minus ( razy ( razy ( wartosc_od_do (1.000000) (5.400000) ) ( razy ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladnosc (7.400000) (9.800000) ) ) ) ( wartosc_dokladnosc (-7.400000) (0.400000) ) ) ( wartosc_dokladna (-8.200000) ) ) ) ;;
assert (a =. -1724.4848639744);;
let a = sr_wartosc ( razy ( wartosc_od_do (1.200000) (2.800000) ) ( wartosc_dokladna (8.600000) ) ) ;;
assert (a =. 17.2);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-7.800000) (0.000000) ) ( wartosc_od_do (-6.600000) (1.200000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (2.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( minus ( wartosc_od_do (-6.600000) (8.000000) ) ( wartosc_dokladnosc (-5.600000) (7.600000) ) ) ( wartosc_dokladnosc (8.600000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-4.600000) ) ( wartosc_od_do (0.600000) (2.000000) ) ) ;;
assert (a =. -2.3);;
let a = sr_wartosc ( podzielic ( razy ( minus ( wartosc_dokladna (-8.600000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (7.800000) (8.000000) ) ) ( wartosc_dokladnosc (1.800000) (0.000000) ) ) ;;
assert (a =. -37.74444444444444);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (1.600000) ) ( wartosc_od_do (2.800000) (9.200000) ) ) ( wartosc_od_do (0.000000) (2.200000) ) ) ;;
assert (a =. 0.173913043478260892);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (5.600000) (3.400000) ) ( wartosc_od_do (-6.600000) (-0.200000) ) ) ;;
assert (a =. 5.60959999999999948);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.600000) ) ( wartosc_dokladna (1.800000) ) ) (-5.200000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( razy ( wartosc_dokladna (4.600000) ) ( wartosc_od_do (-5.400000) (-1.600000) ) ) ( wartosc_od_do (3.400000) (5.600000) ) ) ( wartosc_dokladnosc (-8.800000) (5.000000) ) ) ;;
assert (a =. 0.508074043014334897);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-6.200000) ) ) ( wartosc_od_do (-9.000000) (1.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_od_do (1.600000) (4.400000) ) ( wartosc_od_do (-6.400000) (0.800000) ) ) (3.800000);;
assert (a = true);;
let a = max_wartosc ( plus ( razy ( podzielic ( wartosc_dokladna (1.800000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-7.600000) (3.600000) ) ) ( minus ( razy ( podzielic ( wartosc_dokladna (5.400000) ) ( wartosc_dokladnosc (-4.600000) (0.000000) ) ) ( wartosc_dokladnosc (-7.800000) (1.000000) ) ) ( wartosc_dokladnosc (-2.800000) (0.200000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (2.200000) ) ( wartosc_dokladnosc (-1.200000) (0.000000) ) ) ;;
assert (a =. 1.00000000000000022);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-6.800000) ) ) ;;
assert (a =. -6.8);;
let a = min_wartosc ( plus ( minus ( wartosc_dokladnosc (-7.600000) (5.400000) ) ( wartosc_dokladnosc (0.000000) (2.200000) ) ) ( wartosc_dokladnosc (2.600000) (0.000000) ) ) ;;
assert (a =. -5.41039999999999921);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.800000) ) ( wartosc_od_do (-1.000000) (7.400000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.800000) ) ( wartosc_od_do (-2.400000) (8.200000) ) ) ;;
assert (a =. -1.92);;
let a = in_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (-4.000000) (7.400000) ) ( wartosc_od_do (-4.400000) (9.800000) ) ) ( wartosc_od_do (0.400000) (6.200000) ) ) ( plus ( wartosc_dokladnosc (1.800000) (4.200000) ) ( wartosc_dokladnosc (-0.800000) (0.000000) ) ) ) (-0.600000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (-9.200000) ) ( podzielic ( podzielic ( razy ( wartosc_od_do (-7.200000) (2.000000) ) ( wartosc_od_do (-8.200000) (-1.800000) ) ) ( wartosc_od_do (-4.800000) (-0.800000) ) ) ( wartosc_dokladnosc (6.800000) (0.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-3.200000) ) ( wartosc_dokladnosc (0.000000) (8.200000) ) ) ;;
assert (a =. -3.2);;
let a = min_wartosc ( podzielic ( plus ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (8.800000) ) ) ( wartosc_dokladnosc (9.400000) (2.600000) ) ) ( wartosc_dokladnosc (9.800000) (0.000000) ) ) ;;
assert (a =. 0.0362857142857141851);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-1.800000) (5.600000) ) ( wartosc_dokladna (-4.200000) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-4.600000) ) ( podzielic ( wartosc_dokladnosc (-6.600000) (0.000000) ) ( minus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladna (-7.800000) ) ) ) ) ;;
assert (a =. 4.04242424242424203);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.800000) (0.000000) ) ( wartosc_dokladnosc (9.400000) (3.600000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (8.600000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-4.200000) (9.600000) ) ( wartosc_od_do (-7.600000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-1.600000) (0.000000) ) ) ) ;;
assert (a =. -5.75042105263157932);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.600000) ) ( wartosc_dokladna (3.400000) ) ) (-2.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.400000) (-0.200000) ) ( wartosc_dokladnosc (0.000000) (2.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-4.200000) (7.600000) ) ( wartosc_od_do (-6.800000) (-1.800000) ) ) ;;
assert (a =. 0.0999999999999994227);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (8.600000) (8.400000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 19.3224000000000018);;
let a = min_wartosc ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (1.400000) (6.400000) ) ) ;;
assert (a =. -6.6896);;
let a = max_wartosc ( razy ( podzielic ( wartosc_od_do (-9.200000) (-5.000000) ) ( wartosc_dokladna (-5.600000) ) ) ( wartosc_dokladnosc (0.000000) (2.800000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (4.000000) (4.400000) ) ( wartosc_od_do (0.000000) (8.200000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.600000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_od_do (-9.600000) (-6.600000) ) ( wartosc_dokladna (7.400000) ) ) ;;
assert (a =. -59.94);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-7.400000) ) ( wartosc_dokladna (-6.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (1.600000) ) ( wartosc_dokladna (3.200000) ) ) (4.400000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (-5.400000) ) ( wartosc_dokladnosc (-4.200000) (1.200000) ) ) ;;
assert (a =. -1.2504);;
let a = min_wartosc ( razy ( wartosc_dokladna (6.400000) ) ( wartosc_dokladna (1.400000) ) ) ;;
assert (a =. 8.95999999999999908);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.600000) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (8.400000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ;;
assert (a =. -4.14847161572052325);;
let a = min_wartosc ( podzielic ( razy ( podzielic ( wartosc_od_do (-3.600000) (0.000000) ) ( wartosc_dokladna (8.200000) ) ) ( wartosc_dokladna (-3.600000) ) ) ( wartosc_od_do (-6.800000) (5.400000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (-5.400000) (8.800000) ) ( minus ( wartosc_od_do (0.000000) (6.200000) ) ( wartosc_dokladnosc (1.400000) (7.600000) ) ) ) (2.800000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (4.600000) ) ( razy ( wartosc_dokladna (5.800000) ) ( plus ( wartosc_od_do (0.800000) (7.600000) ) ( wartosc_od_do (-9.400000) (5.400000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( razy ( wartosc_od_do (0.000000) (3.400000) ) ( wartosc_dokladnosc (7.000000) (2.400000) ) ) ( wartosc_od_do (-8.800000) (-7.400000) ) ) ;;
assert (a =. 20.2856);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (7.800000) (5.200000) ) ( wartosc_od_do (-8.800000) (1.400000) ) ) ;;
assert (a =. 17.0056);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladna (1.600000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (3.800000) ) ( podzielic ( wartosc_dokladna (-0.600000) ) ( wartosc_dokladna (-9.200000) ) ) ) ;;
assert (a =. 3.73478260869565215);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (5.200000) ) ( wartosc_dokladna (-5.600000) ) ) ;;
assert (a =. -0.399999999999999467);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladnosc (-2.800000) (0.000000) ) ( minus ( wartosc_od_do (-9.600000) (5.800000) ) ( wartosc_od_do (0.000000) (4.200000) ) ) ) ( podzielic ( wartosc_dokladnosc (1.400000) (3.400000) ) ( plus ( wartosc_od_do (-9.800000) (7.600000) ) ( wartosc_dokladna (9.600000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.600000) (1.400000) ) ( wartosc_dokladnosc (0.000000) (6.600000) ) ) (-2.600000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.200000) (8.800000) ) ( wartosc_od_do (-0.600000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_dokladna (-7.400000) ) ( wartosc_od_do (0.400000) (7.400000) ) ) (2.200000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (-7.800000) (1.800000) ) ( wartosc_od_do (4.600000) (8.800000) ) ) ( wartosc_dokladnosc (-3.400000) (9.400000) ) ) (6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-0.800000) (6.200000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-2.400000) ) ( wartosc_dokladna (-8.200000) ) ) ;;
assert (a =. 0.756097560975609873);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-3.600000) (8.000000) ) ( podzielic ( wartosc_od_do (-0.800000) (0.000000) ) ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (-5.800000) (0.200000) ) ) ) ) ( wartosc_dokladna (-2.400000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-8.200000) (1.000000) ) ( wartosc_od_do (-9.400000) (-7.600000) ) ) ;;
assert (a =. -15.7179999999999982);;
let a = max_wartosc ( podzielic ( razy ( plus ( wartosc_dokladnosc (-5.400000) (4.800000) ) ( minus ( wartosc_dokladna (2.800000) ) ( podzielic ( wartosc_dokladnosc (4.800000) (4.800000) ) ( minus ( wartosc_dokladnosc (-4.800000) (2.800000) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ) ( wartosc_od_do (-0.200000) (0.000000) ) ) ( wartosc_dokladna (3.200000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (6.800000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (9.200000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-3.800000) (2.000000) ) ( wartosc_od_do (-6.000000) (-2.800000) ) ) ;;
assert (a =. 0.620666666666666589);;
let a = in_wartosc ( minus ( wartosc_od_do (-9.000000) (4.200000) ) ( wartosc_od_do (-1.200000) (0.000000) ) ) (-7.800000);;
assert (a = true);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladna (4.200000) ) ( wartosc_dokladna (7.200000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. 8.4);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (3.600000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (-0.200000) (4.400000) ) ( wartosc_dokladnosc (0.000000) (5.400000) ) ) ) ;;
assert (a =. 10.8088);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (3.800000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( razy ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-7.400000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-3.200000) (7.200000) ) ( minus ( wartosc_dokladna (0.400000) ) ( wartosc_dokladnosc (-3.200000) (7.200000) ) ) ) ;;
assert (a =. 2.13675213675213671);;
let a = min_wartosc ( minus ( wartosc_od_do (-5.800000) (-4.600000) ) ( wartosc_dokladnosc (-3.800000) (7.400000) ) ) ;;
assert (a =. -2.2812);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-3.600000) ) ( wartosc_od_do (-3.000000) (0.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (9.200000) (3.400000) ) ( podzielic ( wartosc_od_do (-5.200000) (0.000000) ) ( wartosc_od_do (-1.400000) (-1.200000) ) ) ) ;;
assert (a =. 20.611066666666666);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-6.800000) (4.200000) ) ( wartosc_od_do (-5.400000) (2.400000) ) ) ;;
assert (a =. 38.26224);;
let a = sr_wartosc ( plus ( minus ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-4.400000) (0.000000) ) ) ( wartosc_dokladnosc (7.800000) (4.800000) ) ) ( wartosc_dokladnosc (-3.200000) (0.000000) ) ) ;;
assert (a =. -16.2);;
let a = sr_wartosc ( razy ( wartosc_od_do (-5.600000) (8.800000) ) ( wartosc_dokladnosc (0.000000) (8.200000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (2.200000) ) ( plus ( wartosc_od_do (0.000000) (1.200000) ) ( wartosc_dokladna (-8.200000) ) ) ) ( wartosc_dokladnosc (-4.000000) (8.600000) ) ) ;;
assert (a =. -14.3839999999999986);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (7.600000) (2.400000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-4.800000) (0.000000) ) ( wartosc_od_do (1.200000) (8.200000) ) ) ;;
assert (a =. -7.1);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-8.200000) (1.200000) ) ( wartosc_dokladnosc (6.800000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (5.600000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (9.600000) ) ) ;;
assert (a =. 9.6);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (8.200000) ) ( minus ( wartosc_od_do (-9.600000) (8.400000) ) ( wartosc_dokladna (-5.200000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (8.600000) (0.000000) ) ( wartosc_dokladnosc (7.600000) (0.000000) ) ) ( wartosc_dokladna (8.600000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (7.600000) (5.600000) ) ( wartosc_dokladnosc (-8.400000) (9.400000) ) ) ;;
assert (a =. 17.2152);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.600000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (9.600000) ) ( wartosc_dokladna (-1.600000) ) ) ;;
assert (a =. -15.36);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.200000) ) ( wartosc_dokladnosc (7.000000) (3.800000) ) ) ;;
assert (a =. 0.853289292595651);;
let a = in_wartosc ( minus ( minus ( podzielic ( wartosc_dokladna (3.800000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-10.000000) (6.000000) ) ) ( wartosc_od_do (-10.000000) (4.800000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.200000) (8.200000) ) ( wartosc_od_do (4.400000) (4.800000) ) ) ;;
assert (a =. 0.229499999999999982);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (5.600000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 7.6);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-7.600000) ) ) ;;
assert (a =. 1.3157894736842104);;
let a = sr_wartosc ( plus ( wartosc_od_do (-2.800000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.600000) ) ) ;;
assert (a =. -1.4);;
let a = max_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (-1.200000) ) ) ;;
assert (a =. -3.59999999999999964);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-3.400000) (9.600000) ) ) ;;
assert (a =. -10.1000000000000014);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-5.600000) (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( plus ( wartosc_od_do (-6.800000) (-0.400000) ) ( wartosc_od_do (0.000000) (4.200000) ) ) ( wartosc_dokladnosc (9.800000) (2.800000) ) ) (-7.200000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladna (-3.200000) ) ( wartosc_dokladnosc (0.000000) (9.800000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-9.600000) (1.000000) ) ) ;;
assert (a =. -0.309405940594059403);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (7.200000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (-9.400000) (7.400000) ) ( wartosc_dokladnosc (-6.800000) (7.400000) ) ) ( wartosc_od_do (-4.400000) (5.200000) ) ) ;;
assert (a =. 6.69282175073053);;
let a = min_wartosc ( podzielic ( plus ( plus ( wartosc_dokladnosc (-4.600000) (7.800000) ) ( wartosc_dokladnosc (-6.400000) (5.400000) ) ) ( wartosc_dokladna (5.600000) ) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. -1.22088000000000019);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.600000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladna (1.400000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 1.4);;
let a = max_wartosc ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (9.200000) ) ) ;;
assert (a =. -9.2);;
let a = max_wartosc ( minus ( wartosc_dokladna (7.800000) ) ( minus ( wartosc_od_do (0.000000) (6.600000) ) ( wartosc_dokladnosc (0.000000) (3.200000) ) ) ) ;;
assert (a =. 7.8);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.600000) ) ( wartosc_dokladna (-7.600000) ) ) (-8.200000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (-3.400000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-7.600000) ) ) ( wartosc_dokladna (0.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.400000) ) ( podzielic ( wartosc_dokladnosc (-2.800000) (0.000000) ) ( wartosc_od_do (-8.600000) (-4.800000) ) ) ) ;;
assert (a =. 1.22857142857142865);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-6.600000) (2.800000) ) ( wartosc_dokladnosc (-4.000000) (5.000000) ) ) ;;
assert (a =. 1.65645112781954862);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.800000) ) ( razy ( wartosc_od_do (-0.400000) (2.200000) ) ( wartosc_dokladna (0.000000) ) ) ) (-5.400000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.400000) (-4.400000) ) ( wartosc_dokladnosc (7.200000) (7.600000) ) ) ;;
assert (a =. -12.1472000000000016);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (5.800000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ;;
assert (a =. -1.25085008500850092);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladnosc (5.600000) (9.200000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (5.400000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (5.600000) ) ( wartosc_dokladnosc (-5.400000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.400000) ) ( wartosc_dokladnosc (-3.800000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-2.800000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (6.600000) (6.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (7.200000) ) ( minus ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_od_do (-9.600000) (0.000000) ) ) ) ;;
assert (a =. -18.6);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.400000) ) ( wartosc_dokladnosc (-5.600000) (4.000000) ) ) ;;
assert (a =. 5.6);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_dokladnosc (0.000000) (1.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.600000) ) ( plus ( wartosc_dokladnosc (2.200000) (9.000000) ) ( podzielic ( wartosc_dokladna (6.800000) ) ( wartosc_od_do (0.000000) (0.200000) ) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-5.800000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (6.800000) ) ( wartosc_od_do (-4.200000) (0.000000) ) ) ( wartosc_dokladnosc (-3.000000) (8.400000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-0.600000) ) ( wartosc_od_do (-8.400000) (-1.800000) ) ) ;;
assert (a =. 0.0714285714285714246);;
let a = sr_wartosc ( razy ( wartosc_od_do (-7.200000) (-2.400000) ) ( wartosc_od_do (-4.800000) (1.400000) ) ) ;;
assert (a =. 12.240000000000002);;
let a = min_wartosc ( podzielic ( wartosc_od_do (3.400000) (3.800000) ) ( wartosc_dokladna (9.800000) ) ) ;;
assert (a =. 0.346938775510204);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-1.800000) ) ( wartosc_dokladna (8.800000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.600000) ) ( wartosc_dokladna (-0.800000) ) ) ;;
assert (a =. 3.25);;
let a = min_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (-5.800000) ) ( podzielic ( podzielic ( wartosc_dokladna (-2.800000) ) ( wartosc_od_do (-0.400000) (0.000000) ) ) ( wartosc_od_do (0.000000) (8.200000) ) ) ) ( wartosc_dokladnosc (7.600000) (2.800000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (1.800000) ) ( wartosc_od_do (-4.200000) (-0.600000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (5.600000) (7.000000) ) ) ;;
assert (a =. -6.3);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-5.200000) ) ( wartosc_dokladnosc (-7.800000) (5.400000) ) ) ;;
assert (a =. 40.56);;
let a = in_wartosc ( minus ( wartosc_od_do (1.800000) (6.000000) ) ( wartosc_dokladna (-3.200000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (-3.200000) ) ( plus ( podzielic ( wartosc_dokladnosc (-8.800000) (8.200000) ) ( wartosc_dokladnosc (-4.200000) (2.400000) ) ) ( wartosc_dokladnosc (3.600000) (7.400000) ) ) ) (2.600000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-2.200000) (1.600000) ) ( wartosc_od_do (-0.400000) (8.800000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (2.600000) (9.600000) ) ( wartosc_dokladna (6.800000) ) ) ;;
assert (a =. 15.98272);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (1.600000) ) ( plus ( wartosc_dokladnosc (-2.200000) (2.400000) ) ( wartosc_dokladna (-6.800000) ) ) ) ;;
assert (a =. 10.6528);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (5.600000) ) ( wartosc_od_do (-7.600000) (5.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.200000) (0.000000) ) ( wartosc_dokladnosc (4.400000) (5.600000) ) ) (3.600000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_dokladna (-2.200000) ) ) ;;
assert (a =. 1.79999999999999982);;
let a = min_wartosc ( minus ( wartosc_od_do (5.200000) (9.400000) ) ( podzielic ( wartosc_od_do (-7.000000) (-0.600000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-4.200000) (9.600000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (3.600000) ) ( wartosc_dokladnosc (9.200000) (4.800000) ) ) ;;
assert (a =. 0.411033978808914902);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.600000) (-5.400000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-3.200000) (9.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) (6.600000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (3.000000) (1.800000) ) ( wartosc_dokladnosc (0.000000) (4.600000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( minus ( wartosc_od_do (-8.200000) (-8.000000) ) ( plus ( wartosc_od_do (-7.600000) (0.000000) ) ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (3.600000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.600000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ) ) ( wartosc_od_do (-1.800000) (4.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (1.800000) ) ( wartosc_dokladnosc (4.800000) (5.200000) ) ) ;;
assert (a =. 4.5504);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.400000) (3.800000) ) ( wartosc_dokladnosc (0.000000) (1.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-9.800000) ) ( wartosc_dokladnosc (-9.400000) (0.000000) ) ) ( wartosc_dokladnosc (6.600000) (6.000000) ) ) ;;
assert (a =. 0.16804532422459087);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-1.200000) (6.800000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_od_do (2.200000) (3.800000) ) ( wartosc_dokladna (9.800000) ) ) (-1.600000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.400000) (6.600000) ) ( plus ( razy ( wartosc_od_do (-7.400000) (0.000000) ) ( podzielic ( wartosc_od_do (-5.400000) (4.000000) ) ( wartosc_od_do (8.600000) (9.000000) ) ) ) ( wartosc_od_do (0.800000) (3.800000) ) ) ) ;;
assert (a =. -62.5041860465116343);;
let a = sr_wartosc ( podzielic ( razy ( minus ( wartosc_od_do (-1.400000) (0.000000) ) ( podzielic ( wartosc_od_do (-5.000000) (7.400000) ) ( wartosc_dokladnosc (4.400000) (6.800000) ) ) ) ( plus ( wartosc_dokladnosc (-10.000000) (4.000000) ) ( wartosc_dokladna (-4.200000) ) ) ) ( wartosc_od_do (-2.200000) (5.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.800000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-6.400000) ) ( wartosc_od_do (5.600000) (7.800000) ) ) ;;
assert (a =. -0.981684981684981861);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.400000) (5.600000) ) ( wartosc_dokladna (9.600000) ) ) ;;
assert (a =. 0.0416666666666666713);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-9.000000) (2.800000) ) ( wartosc_dokladnosc (9.400000) (0.400000) ) ) (0.600000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( razy ( wartosc_od_do (-6.800000) (-2.000000) ) ( wartosc_dokladna (6.600000) ) ) ( wartosc_dokladna (0.200000) ) ) ( wartosc_od_do (-9.200000) (6.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-1.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (5.400000) (3.600000) ) ( podzielic ( wartosc_dokladnosc (9.400000) (0.000000) ) ( podzielic ( wartosc_od_do (-2.000000) (0.200000) ) ( minus ( minus ( wartosc_dokladna (-2.000000) ) ( plus ( wartosc_od_do (-4.200000) (4.600000) ) ( wartosc_dokladna (-8.800000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.400000) ) ( wartosc_od_do (0.000000) (9.400000) ) ) (-2.600000);;
assert (a = false);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (-3.400000) (8.200000) ) ( wartosc_od_do (-9.800000) (-0.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 7.4);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-8.400000) ) ( wartosc_dokladna (-9.800000) ) ) ;;
assert (a =. 1.40000000000000036);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (5.600000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (-6.200000) ) ) (-0.800000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (1.000000) (3.000000) ) ( wartosc_dokladnosc (2.200000) (0.000000) ) ) ;;
assert (a =. 3.23000000000000043);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (1.600000) (8.000000) ) ( wartosc_dokladna (-2.800000) ) ) ;;
assert (a =. -0.52571428571428569);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.600000) (1.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (9.200000) ) ( wartosc_od_do (-1.800000) (1.400000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (2.200000) ) ( wartosc_dokladnosc (7.400000) (0.000000) ) ) ( wartosc_od_do (-8.800000) (-7.800000) ) ) ;;
assert (a =. -1.09090909090909105);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.600000) (3.200000) ) ( wartosc_od_do (0.000000) (8.400000) ) ) ;;
assert (a =. -1.10628571428571409);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-4.200000) (9.800000) ) ( razy ( wartosc_dokladnosc (1.800000) (0.000000) ) ( minus ( wartosc_od_do (-9.200000) (-7.400000) ) ( wartosc_dokladna (-5.200000) ) ) ) ) ;;
assert (a =. 1.06060606060606055);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladna (-4.400000) ) ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (7.600000) ) ( wartosc_od_do (-7.400000) (0.000000) ) ) ( plus ( wartosc_dokladnosc (0.600000) (8.800000) ) ( wartosc_dokladna (-3.000000) ) ) ) ) ( wartosc_dokladnosc (-5.000000) (5.200000) ) ) ;;
assert (a =. 30.2915814587593744);;
let a = max_wartosc ( minus ( wartosc_dokladna (-3.800000) ) ( wartosc_od_do (-5.800000) (-0.600000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( razy ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (2.800000) ) ) ( wartosc_dokladnosc (-3.400000) (8.000000) ) ) ( wartosc_dokladna (4.400000) ) ) (-8.600000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (7.600000) ) ( podzielic ( wartosc_dokladna (9.200000) ) ( podzielic ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (0.000000) (1.600000) ) ) ( wartosc_dokladnosc (-8.800000) (7.000000) ) ) ) ) ;;
assert (a =. -2.30025142857142839);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (1.000000) (3.400000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (0.400000) (0.400000) ) ( wartosc_dokladnosc (6.200000) (2.400000) ) ) ;;
assert (a =. 2.53952);;
let a = in_wartosc ( razy ( wartosc_od_do (-8.800000) (-8.400000) ) ( podzielic ( wartosc_dokladnosc (5.800000) (9.400000) ) ( wartosc_dokladna (8.200000) ) ) ) (6.400000);;
assert (a = false);;
let a = min_wartosc ( minus ( plus ( wartosc_dokladnosc (-4.600000) (1.200000) ) ( wartosc_od_do (-9.600000) (-0.400000) ) ) ( wartosc_od_do (-1.600000) (4.400000) ) ) ;;
assert (a =. -18.6552);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.800000) ) ( podzielic ( wartosc_od_do (-6.000000) (-3.600000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (8.800000) ) ( wartosc_dokladnosc (0.000000) (0.200000) ) ) (2.800000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-7.600000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -7.6);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.400000) ) ( wartosc_dokladnosc (-6.200000) (0.600000) ) ) ;;
assert (a =. -0.705444750849740343);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (2.600000) (0.000000) ) ( wartosc_od_do (-3.000000) (-1.000000) ) ) ;;
assert (a =. -7.80000000000000071);;
let a = max_wartosc ( razy ( wartosc_od_do (-5.800000) (-0.400000) ) ( wartosc_dokladna (2.600000) ) ) ;;
assert (a =. -1.04);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (9.200000) ) ( razy ( wartosc_dokladnosc (-7.400000) (6.400000) ) ( wartosc_od_do (-7.600000) (7.400000) ) ) ) (-2.800000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.400000) (0.600000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.200000) ) ( wartosc_od_do (-8.400000) (0.000000) ) ) ;;
assert (a =. 8.4);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.200000) (-5.000000) ) ( wartosc_od_do (-9.200000) (9.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_dokladna (-4.800000) ) ( wartosc_dokladna (9.800000) ) ) ;;
assert (a =. -47.04);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (3.800000) (2.600000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.800000) ) ( wartosc_od_do (-9.800000) (7.400000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (2.800000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( minus ( wartosc_od_do (-9.600000) (-8.400000) ) ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -5.6);;
let a = max_wartosc ( minus ( razy ( wartosc_od_do (-9.200000) (-3.000000) ) ( wartosc_dokladnosc (8.000000) (3.000000) ) ) ( podzielic ( wartosc_od_do (2.600000) (5.600000) ) ( wartosc_od_do (5.800000) (8.400000) ) ) ) ;;
assert (a =. -23.5895238095238113);;
let a = max_wartosc ( plus ( wartosc_dokladna (-5.400000) ) ( wartosc_dokladna (-9.200000) ) ) ;;
assert (a =. -14.6);;
let a = in_wartosc ( razy ( razy ( wartosc_od_do (-8.400000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( plus ( wartosc_dokladnosc (6.200000) (8.600000) ) ( wartosc_od_do (0.000000) (8.800000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (-0.600000) ) ( razy ( wartosc_od_do (-8.600000) (0.600000) ) ( wartosc_dokladna (2.800000) ) ) ) ;;
assert (a =. -24.68);;
let a = min_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( razy ( minus ( wartosc_od_do (-4.400000) (9.000000) ) ( wartosc_od_do (0.000000) (7.600000) ) ) ( wartosc_od_do (2.800000) (4.400000) ) ) ) ;;
assert (a =. -43.6);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (6.800000) ) ( wartosc_dokladnosc (0.000000) (0.600000) ) ) (-2.400000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-5.400000) ) ) ;;
assert (a =. -48.6);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (6.200000) (9.200000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ( wartosc_od_do (0.400000) (2.000000) ) ) ;;
assert (a =. 12.9904);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (7.200000) ) ( wartosc_dokladnosc (1.800000) (4.000000) ) ) (-8.200000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (1.600000) (6.200000) ) ( plus ( wartosc_dokladna (0.400000) ) ( wartosc_dokladna (5.400000) ) ) ) ;;
assert (a =. 7.4);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (9.200000) ) ( wartosc_dokladnosc (-1.600000) (3.600000) ) ) (-8.800000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (-1.400000) ) ( wartosc_dokladnosc (2.800000) (5.200000) ) ) ;;
assert (a =. -3.71615999999999946);;
let a = min_wartosc ( razy ( wartosc_od_do (3.400000) (4.600000) ) ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-2.400000) (0.000000) ) ) ) ;;
assert (a =. -33.12);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (2.400000) ) ( wartosc_dokladna (-10.000000) ) ) (-1.600000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-6.200000) (8.000000) ) ) ;;
assert (a =. 6.2);;
let a = sr_wartosc ( minus ( wartosc_dokladna (2.600000) ) ( wartosc_od_do (1.400000) (4.800000) ) ) ;;
assert (a =. -0.499999999999999778);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladnosc (0.000000) (4.200000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladnosc (-4.200000) (4.200000) ) ) (1.200000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.400000) ) ) ;;
assert (a =. -4.4);;
let a = in_wartosc ( razy ( podzielic ( razy ( podzielic ( wartosc_dokladna (9.200000) ) ( wartosc_dokladnosc (1.200000) (0.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ( podzielic ( wartosc_dokladnosc (-5.200000) (5.800000) ) ( wartosc_dokladnosc (-0.800000) (5.600000) ) ) ) ( wartosc_dokladna (-5.400000) ) ) (-7.400000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-7.000000) (5.400000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( razy ( podzielic ( wartosc_dokladnosc (4.600000) (1.000000) ) ( wartosc_dokladna (-2.400000) ) ) ( wartosc_od_do (-9.200000) (-6.800000) ) ) ( wartosc_od_do (-3.000000) (5.200000) ) ) ;;
assert (a =. 7.70299999999999851);;
let a = in_wartosc ( minus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-4.000000) (7.000000) ) ) ( minus ( minus ( razy ( wartosc_dokladnosc (-1.800000) (6.600000) ) ( razy ( wartosc_dokladna (8.400000) ) ( wartosc_dokladnosc (1.000000) (8.600000) ) ) ) ( wartosc_dokladnosc (-3.600000) (8.200000) ) ) ( wartosc_dokladna (5.600000) ) ) ) (8.400000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.600000) (-2.400000) ) ( wartosc_dokladna (0.200000) ) ) (2.600000);;
assert (a = false);;
let a = sr_wartosc ( razy ( minus ( podzielic ( wartosc_dokladnosc (-5.200000) (9.200000) ) ( razy ( wartosc_dokladna (2.600000) ) ( wartosc_dokladnosc (4.400000) (2.600000) ) ) ) ( wartosc_od_do (-5.400000) (-3.600000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 32.3524724531965475);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-1.800000) (0.000000) ) ( wartosc_dokladnosc (-4.800000) (6.000000) ) ) ( wartosc_od_do (-3.800000) (1.000000) ) ) ;;
assert (a =. 0.398936170212766);;
let a = sr_wartosc ( minus ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-7.400000) ) ) ( wartosc_dokladna (0.400000) ) ) ( wartosc_dokladnosc (-3.600000) (9.800000) ) ) ;;
assert (a =. 3.2);;
let a = sr_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-2.600000) (1.400000) ) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( razy ( wartosc_od_do (-4.600000) (-2.400000) ) ( wartosc_dokladna (-6.000000) ) ) ( minus ( wartosc_od_do (2.000000) (2.800000) ) ( wartosc_dokladna (2.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (5.600000) (2.600000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-2.400000) (4.800000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ) ;;
assert (a =. 5.6);;
let a = min_wartosc ( minus ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladna (0.400000) ) ) ;;
assert (a =. -8.2);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.400000) (0.000000) ) ( wartosc_od_do (-7.600000) (5.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (-8.400000) ) ( wartosc_dokladnosc (-6.400000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (-3.600000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -3.6);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (1.400000) ) ) ( wartosc_dokladna (5.200000) ) ) ;;
assert (a =. -5.2);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-3.600000) (0.000000) ) ( wartosc_dokladnosc (-2.400000) (2.400000) ) ) ;;
assert (a =. 8.84736);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-3.200000) (9.200000) ) ( wartosc_dokladnosc (1.000000) (9.600000) ) ) ;;
assert (a =. -2.6510948905109486);;
let a = in_wartosc ( plus ( wartosc_dokladna (-3.800000) ) ( wartosc_od_do (-7.200000) (-1.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-0.600000) (2.600000) ) ( wartosc_dokladnosc (0.000000) (7.800000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ( wartosc_dokladnosc (5.200000) (9.000000) ) ) (-8.400000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.400000) (4.400000) ) ( wartosc_od_do (-9.400000) (-9.000000) ) ) ;;
assert (a =. -0.1624);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.400000) (4.200000) ) ( plus ( wartosc_od_do (-5.200000) (-2.800000) ) ( wartosc_od_do (-5.800000) (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladna (9.200000) ) ( podzielic ( wartosc_od_do (-9.200000) (-5.000000) ) ( wartosc_dokladna (-3.400000) ) ) ) ( wartosc_dokladna (-5.800000) ) ) ;;
assert (a =. 30.6941176470588211);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.600000) (3.400000) ) ( wartosc_od_do (1.600000) (1.800000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_od_do (3.000000) (5.600000) ) ( wartosc_od_do (1.800000) (9.000000) ) ) ;;
assert (a =. 3.11111111111111116);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.200000) ) ( wartosc_od_do (2.000000) (8.200000) ) ) ;;
assert (a =. 2.1);;
let a = in_wartosc ( razy ( wartosc_od_do (-9.800000) (6.000000) ) ( wartosc_dokladna (7.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-1.200000) (7.800000) ) ( wartosc_od_do (0.000000) (0.600000) ) ) ;;
assert (a =. -1.5);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladna (8.600000) ) ( podzielic ( wartosc_dokladnosc (0.400000) (8.400000) ) ( wartosc_od_do (-9.200000) (7.600000) ) ) ) ( wartosc_dokladnosc (-3.400000) (7.800000) ) ) ;;
assert (a =. -15.3772925764191939);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-6.600000) (5.200000) ) ( wartosc_od_do (-6.400000) (7.600000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.200000) (0.000000) ) ( wartosc_od_do (0.000000) (2.800000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (8.600000) ) ( wartosc_od_do (0.800000) (7.200000) ) ) ;;
assert (a =. 9.4);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-6.600000) (6.200000) ) ( wartosc_dokladnosc (9.600000) (7.800000) ) ) (-2.600000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (2.200000) ) ( minus ( wartosc_od_do (-9.800000) (5.200000) ) ( wartosc_dokladnosc (-8.400000) (0.000000) ) ) ) (-6.800000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-9.200000) ) ( wartosc_dokladna (0.400000) ) ) ;;
assert (a =. -23.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-1.200000) (5.600000) ) ( plus ( podzielic ( wartosc_od_do (8.200000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (0.600000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) (-1.800000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (1.400000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (9.600000) ) ( wartosc_dokladna (2.800000) ) ) ;;
assert (a =. 1.42857142857142883);;
let a = max_wartosc ( razy ( wartosc_dokladna (3.200000) ) ( wartosc_od_do (-0.800000) (0.600000) ) ) ;;
assert (a =. 1.92);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.800000) (0.000000) ) ( wartosc_dokladnosc (1.800000) (1.400000) ) ) ;;
assert (a =. -1.53407845715538);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-5.200000) (6.800000) ) ( podzielic ( razy ( wartosc_od_do (0.000000) (3.600000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( wartosc_od_do (-4.400000) (-1.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-3.800000) (2.400000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.800000) ) ( wartosc_dokladna (6.600000) ) ) (1.400000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (9.200000) (8.200000) ) ( wartosc_dokladna (9.200000) ) ) (0.800000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (-0.600000) (7.000000) ) ( razy ( wartosc_od_do (-8.800000) (-6.600000) ) ( wartosc_od_do (-2.200000) (-0.600000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.648484848484848553);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-6.800000) ) ( wartosc_dokladnosc (-1.000000) (0.800000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.600000) ) ( wartosc_dokladnosc (3.200000) (0.000000) ) ) ;;
assert (a =. 0.09375);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-0.200000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.0222222222222222231);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (1.200000) (0.000000) ) ( wartosc_dokladnosc (-6.800000) (2.200000) ) ) ) ;;
assert (a =. -0.176556041359312021);;
let a = max_wartosc ( plus ( plus ( wartosc_od_do (-8.200000) (-3.600000) ) ( razy ( wartosc_dokladnosc (0.800000) (2.200000) ) ( wartosc_dokladna (-7.600000) ) ) ) ( wartosc_dokladna (-1.800000) ) ) ;;
assert (a =. -11.3462400000000017);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-9.400000) (1.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-3.400000) (-2.000000) ) ) ;;
assert (a =. -5.1);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladna (3.800000) ) ( razy ( wartosc_dokladnosc (-8.800000) (0.000000) ) ( wartosc_od_do (-1.400000) (0.000000) ) ) ) ( wartosc_dokladnosc (8.400000) (8.000000) ) ) ;;
assert (a =. 146.24064);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (-9.400000) (-4.600000) ) ( wartosc_dokladna (-4.600000) ) ) ( wartosc_dokladna (-6.200000) ) ) ;;
assert (a =. -4.67826086956521792);;
let a = max_wartosc ( plus ( wartosc_od_do (3.000000) (9.800000) ) ( wartosc_od_do (-4.200000) (3.600000) ) ) ;;
assert (a =. 13.4);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.600000) ) ( wartosc_dokladna (-8.600000) ) ) (3.400000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-6.800000) (-5.400000) ) ) ;;
assert (a =. -2.40000000000000036);;
let a = min_wartosc ( plus ( wartosc_od_do (-8.000000) (-1.800000) ) ( minus ( wartosc_dokladnosc (7.200000) (4.000000) ) ( wartosc_dokladna (8.400000) ) ) ) ;;
assert (a =. -9.488);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-3.600000) (4.000000) ) ( razy ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (7.400000) ) ( wartosc_dokladna (-3.400000) ) ) ;;
assert (a =. 10.8);;
let a = max_wartosc ( minus ( wartosc_od_do (-6.200000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.600000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( plus ( wartosc_od_do (3.400000) (7.800000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ( plus ( razy ( minus ( razy ( podzielic ( wartosc_dokladnosc (-4.800000) (0.200000) ) ( minus ( razy ( wartosc_dokladnosc (-3.800000) (2.400000) ) ( wartosc_od_do (0.000000) (7.800000) ) ) ( wartosc_dokladnosc (5.200000) (2.000000) ) ) ) ( plus ( minus ( wartosc_dokladna (-7.200000) ) ( wartosc_dokladnosc (6.400000) (7.200000) ) ) ( podzielic ( wartosc_od_do (-8.600000) (0.000000) ) ( wartosc_dokladnosc (7.600000) (9.400000) ) ) ) ) ( wartosc_dokladnosc (-2.000000) (1.800000) ) ) ( wartosc_dokladna (-1.600000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 18.7765746221225882);;
let a = in_wartosc ( minus ( minus ( wartosc_od_do (-10.000000) (5.200000) ) ( wartosc_dokladnosc (-4.200000) (5.800000) ) ) ( wartosc_dokladna (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladnosc (7.600000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-5.800000) (-1.600000) ) ( razy ( wartosc_od_do (-5.800000) (8.200000) ) ( wartosc_dokladna (5.600000) ) ) ) ) (9.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (7.400000) ) ( wartosc_dokladnosc (0.000000) (4.600000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (1.200000) ) ( wartosc_dokladna (-4.400000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (8.400000) ) ( podzielic ( wartosc_dokladna (6.400000) ) ( wartosc_dokladna (6.800000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( razy ( wartosc_od_do (-6.000000) (8.800000) ) ( podzielic ( wartosc_od_do (0.000000) (2.200000) ) ( podzielic ( wartosc_dokladnosc (5.400000) (4.800000) ) ( wartosc_dokladnosc (-3.200000) (4.800000) ) ) ) ) ( wartosc_od_do (-8.800000) (5.800000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.800000) ) ( wartosc_od_do (0.000000) (6.200000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (2.400000) (8.600000) ) ( wartosc_dokladnosc (0.000000) (5.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (-10.000000) (9.800000) ) ( wartosc_dokladna (-0.600000) ) ) ;;
assert (a =. 10.4);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-10.000000) (2.800000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (2.400000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.000000) (9.600000) ) ( wartosc_dokladnosc (-2.600000) (9.000000) ) ) (1.600000);;
assert (a = true);;
let a = sr_wartosc ( plus ( razy ( podzielic ( wartosc_dokladna (-0.800000) ) ( wartosc_dokladna (2.600000) ) ) ( wartosc_dokladna (5.400000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. -2.16153846153846185);;
let a = min_wartosc ( podzielic ( minus ( minus ( wartosc_dokladna (2.400000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( razy ( podzielic ( wartosc_dokladnosc (0.600000) (5.800000) ) ( razy ( podzielic ( wartosc_dokladna (0.800000) ) ( wartosc_dokladna (-3.600000) ) ) ( wartosc_dokladnosc (8.600000) (7.400000) ) ) ) ( wartosc_od_do (-9.600000) (4.200000) ) ) ) ( wartosc_od_do (-9.800000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( razy ( wartosc_dokladna (7.400000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (7.400000) ) ( minus ( wartosc_dokladnosc (1.600000) (9.400000) ) ( wartosc_dokladnosc (-7.400000) (1.000000) ) ) ) ;;
assert (a =. 16.6244);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (2.000000) ) ( wartosc_dokladna (-8.800000) ) ) ;;
assert (a =. -17.6);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.400000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.400000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-7.400000) (5.800000) ) ( minus ( wartosc_od_do (-5.800000) (5.000000) ) ( plus ( wartosc_dokladnosc (-6.400000) (6.400000) ) ( minus ( razy ( wartosc_od_do (-7.800000) (0.800000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_dokladnosc (0.000000) (0.800000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ) ) ) ;;
assert (a =. -0.590265546673892527);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (2.200000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-3.800000) (4.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -0.95);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-3.600000) (9.000000) ) ) ;;
assert (a =. -3.6);;
let a = min_wartosc ( plus ( wartosc_dokladna (8.400000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 8.4);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.800000) (6.200000) ) ( razy ( wartosc_dokladna (-6.200000) ) ( wartosc_dokladnosc (0.000000) (0.600000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( razy ( wartosc_dokladnosc (-6.400000) (2.400000) ) ( wartosc_dokladnosc (-9.000000) (8.200000) ) ) ( wartosc_od_do (-2.600000) (2.800000) ) ) (9.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (8.800000) ) ( wartosc_od_do (0.000000) (7.200000) ) ) (-2.400000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-7.200000) (3.200000) ) ( podzielic ( wartosc_dokladnosc (0.200000) (0.800000) ) ( wartosc_dokladnosc (-5.200000) (3.000000) ) ) ) ;;
assert (a =. 3.16295743091859594);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (3.200000) ) ( wartosc_od_do (-4.400000) (9.600000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (1.200000) ) ( wartosc_dokladna (5.600000) ) ) ;;
assert (a =. 0.214285714285714274);;
let a = sr_wartosc ( podzielic ( plus ( podzielic ( wartosc_dokladnosc (-9.200000) (1.800000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladna (9.200000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -2.53);;
let a = sr_wartosc ( razy ( minus ( wartosc_od_do (-8.400000) (-2.200000) ) ( wartosc_od_do (-1.800000) (0.000000) ) ) ( wartosc_dokladna (-9.800000) ) ) ;;
assert (a =. 43.1200000000000045);;
let a = sr_wartosc ( minus ( wartosc_dokladna (5.200000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 5.2);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (5.600000) ) ( podzielic ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (0.200000) (1.400000) ) ) ( wartosc_dokladna (-2.800000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (2.400000) ) ( wartosc_od_do (-8.800000) (-5.800000) ) ) (-7.800000);;
assert (a = false);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladna (2.200000) ) ( wartosc_od_do (-2.200000) (0.000000) ) ) ( wartosc_dokladnosc (-3.000000) (7.200000) ) ) ;;
assert (a =. 4.984);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.800000) (0.000000) ) ) ;;
assert (a =. 3.4);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (0.400000) ) ( wartosc_dokladna (6.600000) ) ) ) ;;
assert (a =. 2.64);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-9.200000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-2.600000) (0.000000) ) ( wartosc_od_do (1.400000) (2.000000) ) ) ;;
assert (a =. -1.85714285714285721);;
let a = min_wartosc ( podzielic ( wartosc_od_do (3.600000) (5.600000) ) ( wartosc_od_do (-6.800000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (7.600000) (1.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-2.400000) ) ( minus ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( plus ( wartosc_dokladna (-0.600000) ) ( wartosc_dokladnosc (7.800000) (0.000000) ) ) ) ( razy ( wartosc_dokladna (-8.600000) ) ( plus ( wartosc_dokladna (-7.800000) ) ( wartosc_od_do (-4.800000) (7.600000) ) ) ) ) ) ;;
assert (a =. -58.0650000000000048);;
let a = sr_wartosc ( razy ( wartosc_dokladna (7.600000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. 60.8);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (1.600000) (0.200000) ) ( wartosc_dokladna (-6.000000) ) ) (4.600000);;
assert (a = false);;
let a = in_wartosc ( minus ( razy ( minus ( razy ( wartosc_dokladnosc (-8.800000) (0.000000) ) ( wartosc_od_do (-7.400000) (0.000000) ) ) ( wartosc_dokladnosc (-3.600000) (0.400000) ) ) ( wartosc_dokladna (-10.000000) ) ) ( podzielic ( wartosc_dokladna (-5.200000) ) ( wartosc_dokladnosc (-9.000000) (5.800000) ) ) ) (0.600000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-3.400000) ) ( wartosc_dokladnosc (-3.800000) (5.600000) ) ) (-1.600000);;
assert (a = false);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-3.200000) (3.800000) ) ( wartosc_od_do (0.000000) (9.200000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.400000) (-0.600000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( minus ( wartosc_od_do (-1.600000) (6.600000) ) ( wartosc_dokladnosc (5.200000) (4.200000) ) ) ( minus ( wartosc_od_do (6.400000) (8.600000) ) ( wartosc_dokladna (0.000000) ) ) ) (-9.800000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (8.200000) (2.400000) ) ( wartosc_dokladnosc (5.000000) (4.400000) ) ) ;;
assert (a =. 3.19999999999999929);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (6.800000) (6.800000) ) ( minus ( razy ( wartosc_dokladnosc (0.000000) (8.600000) ) ( plus ( razy ( wartosc_dokladna (5.800000) ) ( wartosc_dokladnosc (8.400000) (1.200000) ) ) ( wartosc_dokladnosc (5.000000) (2.800000) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( wartosc_dokladna (-6.600000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (5.200000) ) ( wartosc_od_do (-4.400000) (-3.000000) ) ) ;;
assert (a =. 3.7);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-0.600000) (0.200000) ) ( wartosc_dokladnosc (-9.400000) (3.000000) ) ) ( wartosc_od_do (-9.600000) (-7.000000) ) ) ;;
assert (a =. -0.00793086308072402);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (9.400000) ) ( wartosc_dokladna (0.200000) ) ) ;;
assert (a =. 47.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (8.400000) (8.000000) ) ) (-0.200000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-7.600000) (0.000000) ) ( wartosc_dokladnosc (1.600000) (1.400000) ) ) ;;
assert (a =. -4.81744421906693621);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladna (-9.200000) ) ( wartosc_od_do (-7.400000) (-4.800000) ) ) ( wartosc_dokladnosc (2.200000) (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-7.400000) (-6.600000) ) ( podzielic ( podzielic ( wartosc_dokladna (3.800000) ) ( wartosc_dokladnosc (3.800000) (2.000000) ) ) ( podzielic ( plus ( wartosc_od_do (-2.000000) (-0.200000) ) ( wartosc_od_do (-3.200000) (-1.600000) ) ) ( wartosc_dokladnosc (-3.000000) (4.800000) ) ) ) ) ( wartosc_od_do (-7.800000) (3.000000) ) ) ;;
assert (a =. -16.7428571428571438);;
let a = in_wartosc ( plus ( wartosc_dokladna (-2.800000) ) ( wartosc_dokladna (-5.200000) ) ) (-4.800000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.400000) (0.200000) ) ( razy ( wartosc_dokladna (0.800000) ) ( wartosc_dokladna (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( podzielic ( podzielic ( podzielic ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (-0.800000) (8.200000) ) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (3.600000) ) ) ( wartosc_dokladna (0.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (1.400000) ) ( wartosc_dokladnosc (4.600000) (5.600000) ) ) ) (-5.400000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-2.000000) (3.600000) ) ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (6.800000) ) ) ) (-1.400000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (-6.800000) (0.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. -7.9);;
let a = in_wartosc ( podzielic ( razy ( wartosc_od_do (-7.200000) (8.400000) ) ( wartosc_dokladnosc (-3.600000) (1.000000) ) ) ( wartosc_od_do (-8.600000) (-1.400000) ) ) (4.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.200000) (3.600000) ) ( wartosc_od_do (-8.200000) (4.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (4.800000) ) ( wartosc_dokladnosc (-4.800000) (7.600000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.600000) ) ( wartosc_dokladnosc (0.000000) (8.200000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-7.800000) (0.800000) ) ( wartosc_dokladnosc (-4.600000) (6.000000) ) ) ;;
assert (a =. -3.5384);;
let a = min_wartosc ( minus ( wartosc_dokladna (1.800000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 1.8);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.600000) ) ( wartosc_dokladnosc (-5.200000) (0.000000) ) ) ;;
assert (a =. 5.8);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-9.400000) ) ( wartosc_od_do (1.400000) (8.600000) ) ) ;;
assert (a =. -6.71428571428571441);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (6.200000) ) ( wartosc_od_do (1.800000) (2.200000) ) ) ;;
assert (a =. -8.);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-7.800000) ) ) ( wartosc_dokladna (3.200000) ) ) (-7.800000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (1.000000) (3.200000) ) ( wartosc_dokladna (8.400000) ) ) (-3.200000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-7.800000) (0.000000) ) ) ( wartosc_dokladnosc (6.200000) (3.200000) ) ) ;;
assert (a =. 3.28123076923077);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.600000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( minus ( wartosc_od_do (0.000000) (3.200000) ) ( wartosc_dokladna (0.400000) ) ) ( wartosc_dokladnosc (0.000000) (9.400000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladna (-7.200000) ) ( podzielic ( wartosc_dokladna (2.400000) ) ( wartosc_dokladnosc (-1.400000) (2.000000) ) ) ) ( podzielic ( wartosc_dokladnosc (-1.600000) (5.200000) ) ( wartosc_dokladna (0.400000) ) ) ) ;;
assert (a =. 16.8027521865889256);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (1.600000) ) ( wartosc_od_do (5.200000) (6.400000) ) ) (-2.400000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (8.600000) ) ( wartosc_od_do (-8.600000) (3.600000) ) ) ;;
assert (a =. 6.8);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-3.400000) (2.600000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (0.000000) (6.200000) ) ) ( wartosc_dokladnosc (-6.600000) (0.000000) ) ) ;;
assert (a =. 6.6);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.800000) ) ( minus ( razy ( wartosc_dokladnosc (-4.400000) (2.800000) ) ( wartosc_dokladnosc (6.400000) (3.000000) ) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (0.000000) (8.400000) ) ) ) ) ;;
assert (a =. 29.5788391619047673);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.400000) (1.800000) ) ( wartosc_od_do (2.200000) (5.000000) ) ) (-1.600000);;
assert (a = true);;
let a = in_wartosc ( plus ( razy ( wartosc_dokladnosc (6.200000) (6.400000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_od_do (0.000000) (9.200000) ) ) (1.200000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( razy ( razy ( wartosc_dokladna (9.200000) ) ( wartosc_dokladnosc (-8.400000) (4.400000) ) ) ( podzielic ( razy ( wartosc_dokladna (5.200000) ) ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ) ) (5.800000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (0.200000) ) ( wartosc_dokladnosc (-6.600000) (0.000000) ) ) ( wartosc_od_do (-9.600000) (-2.400000) ) ) ;;
assert (a =. 1.07999999999999985);;
let a = in_wartosc ( minus ( wartosc_od_do (-2.800000) (-1.000000) ) ( wartosc_dokladnosc (-3.400000) (5.800000) ) ) (3.800000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (3.600000) (2.400000) ) ( wartosc_dokladna (-6.800000) ) ) ;;
assert (a =. -23.8924800000000026);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (7.600000) ) ( wartosc_dokladnosc (-8.600000) (7.400000) ) ) ( wartosc_dokladna (-0.200000) ) ) ;;
assert (a =. 4.77171128635290565);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.200000) ) ( wartosc_od_do (-2.400000) (5.400000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (5.400000) ) ) ( wartosc_dokladnosc (7.400000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.200000) (2.400000) ) ( minus ( plus ( podzielic ( wartosc_dokladnosc (7.800000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (7.800000) ) ) ( razy ( wartosc_dokladna (2.800000) ) ( wartosc_dokladna (3.200000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.200000) (4.400000) ) ( wartosc_dokladnosc (6.800000) (0.600000) ) ) ;;
assert (a =. -42.41296);;
let a = sr_wartosc ( minus ( wartosc_od_do (-8.600000) (0.000000) ) ( minus ( wartosc_od_do (-8.200000) (0.000000) ) ( wartosc_od_do (0.000000) (9.400000) ) ) ) ;;
assert (a =. 4.50000000000000089);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.200000) (8.000000) ) ( razy ( wartosc_dokladna (9.200000) ) ( wartosc_od_do (-5.200000) (-1.600000) ) ) ) ;;
assert (a =. 32.48);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (8.800000) ) ( minus ( wartosc_od_do (4.200000) (8.600000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 8.6);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.800000) (9.200000) ) ( plus ( plus ( wartosc_dokladna (6.800000) ) ( wartosc_dokladnosc (-9.000000) (8.600000) ) ) ( wartosc_od_do (-3.400000) (0.000000) ) ) ) ;;
assert (a =. 7.50462833099578841);;
let a = in_wartosc ( plus ( wartosc_dokladna (2.600000) ) ( wartosc_od_do (-8.000000) (-0.400000) ) ) (-1.800000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladna (7.400000) ) ( wartosc_od_do (-8.800000) (7.600000) ) ) ;;
assert (a =. -4.44000000000000128);;
let a = in_wartosc ( plus ( wartosc_dokladna (-7.200000) ) ( minus ( wartosc_dokladna (9.600000) ) ( wartosc_dokladnosc (-7.800000) (1.400000) ) ) ) (-2.400000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-5.600000) (8.000000) ) ( minus ( podzielic ( podzielic ( wartosc_dokladna (1.200000) ) ( plus ( wartosc_dokladnosc (-5.800000) (3.200000) ) ( plus ( wartosc_dokladnosc (1.600000) (8.400000) ) ( wartosc_dokladna (3.200000) ) ) ) ) ( podzielic ( wartosc_dokladna (-9.000000) ) ( podzielic ( wartosc_od_do (7.200000) (8.600000) ) ( wartosc_od_do (-7.400000) (6.400000) ) ) ) ) ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (8.400000) (0.000000) ) ( wartosc_dokladnosc (-4.800000) (6.800000) ) ) ;;
assert (a =. 12.8736);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.800000) (2.200000) ) ) ( wartosc_od_do (-3.000000) (7.800000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-8.600000) (8.400000) ) ) ( wartosc_od_do (-5.800000) (-2.200000) ) ) (1.200000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-2.600000) (7.200000) ) ( wartosc_od_do (2.800000) (7.600000) ) ) ;;
assert (a =. 2.59999999999999964);;
let a = sr_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (-2.000000) (7.000000) ) ( podzielic ( wartosc_od_do (6.200000) (8.000000) ) ( wartosc_od_do (0.000000) (5.800000) ) ) ) ( wartosc_dokladna (-9.000000) ) ) ( minus ( wartosc_dokladna (4.400000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ;;
assert (a =. -1.51392961876832866);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-8.800000) (1.400000) ) ( wartosc_od_do (-7.800000) (-0.200000) ) ) ;;
assert (a =. 1.11241025641025648);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (3.400000) ) ) ;;
assert (a =. 1.47058823529411775);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (0.000000) (0.200000) ) ( plus ( wartosc_dokladna (6.200000) ) ( wartosc_dokladnosc (0.400000) (0.200000) ) ) ) ( wartosc_dokladna (4.400000) ) ) (7.200000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (6.800000) ) ( wartosc_dokladnosc (6.200000) (0.000000) ) ) ;;
assert (a =. 9.6);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (9.800000) (8.800000) ) ( wartosc_od_do (-0.200000) (0.000000) ) ) ;;
assert (a =. -44.688);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-4.200000) ) ( podzielic ( wartosc_od_do (-4.200000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (1.800000) (9.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-3.200000) ) ( plus ( wartosc_od_do (-9.200000) (2.600000) ) ( wartosc_dokladnosc (-9.400000) (1.000000) ) ) ) ;;
assert (a =. 0.324181264422436777);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (1.400000) (1.200000) ) ( wartosc_od_do (0.000000) (3.600000) ) ) ;;
assert (a =. 5.10047999999999924);;
let a = sr_wartosc ( plus ( wartosc_od_do (4.800000) (9.200000) ) ( wartosc_dokladna (-6.400000) ) ) ;;
assert (a =. 0.599999999999999201);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.200000) ) ( wartosc_od_do (0.000000) (4.600000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladnosc (-1.800000) (0.000000) ) ) ;;
assert (a =. -4.44444444444444464);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (5.200000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (9.600000) ) ( wartosc_od_do (-0.800000) (7.600000) ) ) (2.200000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-8.200000) ) ( podzielic ( wartosc_od_do (-5.600000) (7.600000) ) ( minus ( wartosc_od_do (0.800000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. -9.45);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.400000) (0.000000) ) ( wartosc_dokladna (-6.800000) ) ) ;;
assert (a =. 1.08823529411764719);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (7.200000) ) ( wartosc_dokladna (4.200000) ) ) (-1.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (1.800000) (9.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.400000) (0.000000) ) ( wartosc_dokladna (3.600000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( plus ( wartosc_od_do (-4.600000) (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (2.400000) (1.400000) ) ( wartosc_od_do (-4.400000) (8.600000) ) ) ( wartosc_dokladnosc (0.000000) (6.600000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (9.600000) (0.000000) ) ( wartosc_dokladna (-6.400000) ) ) (8.800000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.600000) ) ( wartosc_dokladna (6.600000) ) ) ;;
assert (a =. 1.30303030303030298);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (6.800000) (8.000000) ) ( wartosc_od_do (-4.600000) (1.200000) ) ) ;;
assert (a =. 11.9439999999999991);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (-3.600000) (0.000000) ) ( wartosc_dokladna (-3.600000) ) ) ( wartosc_dokladnosc (-2.400000) (3.800000) ) ) ;;
assert (a =. -1.30879999999999974);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.200000) (0.000000) ) ( minus ( wartosc_od_do (-6.000000) (2.000000) ) ( wartosc_dokladna (-1.200000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( razy ( wartosc_od_do (3.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( minus ( wartosc_od_do (1.000000) (2.800000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-8.200000) (9.400000) ) ( wartosc_od_do (-8.800000) (9.400000) ) ) ;;
assert (a =. -17.6);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.600000) (4.400000) ) ( minus ( wartosc_dokladna (8.600000) ) ( wartosc_dokladnosc (-1.800000) (2.200000) ) ) ) ;;
assert (a =. 0.0868692328481526);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-5.800000) ) ) ;;
assert (a =. -15.8);;
let a = sr_wartosc ( minus ( podzielic ( razy ( wartosc_dokladnosc (0.800000) (4.800000) ) ( podzielic ( wartosc_od_do (0.000000) (1.600000) ) ( wartosc_od_do (-8.600000) (2.000000) ) ) ) ( wartosc_od_do (-7.600000) (0.000000) ) ) ( wartosc_dokladna (8.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (3.600000) (1.000000) ) ( razy ( wartosc_dokladna (-0.600000) ) ( wartosc_dokladnosc (7.400000) (4.000000) ) ) ) ( wartosc_od_do (-7.000000) (8.800000) ) ) ;;
assert (a =. -1.7124350311850316);;
let a = in_wartosc ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (1.200000) ) ) (-8.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (-5.200000) (0.000000) ) ( wartosc_od_do (0.000000) (2.400000) ) ) ( wartosc_dokladnosc (-9.200000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (0.000000) (0.400000) ) ) (-8.200000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.400000) ) ( razy ( wartosc_dokladna (-2.600000) ) ( wartosc_dokladnosc (0.000000) (9.400000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-6.600000) ) ( wartosc_od_do (0.000000) (9.200000) ) ) ;;
assert (a =. -0.717391304347826164);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.000000) (7.600000) ) ( wartosc_dokladna (-7.200000) ) ) ;;
assert (a =. 0.27777777777777779);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-2.600000) (5.400000) ) ( wartosc_od_do (-2.600000) (0.000000) ) ) ;;
assert (a =. -1.3);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladna (2.400000) ) ( wartosc_dokladnosc (2.400000) (1.800000) ) ) ( wartosc_dokladnosc (-2.000000) (8.200000) ) ) ;;
assert (a =. -0.0235294117647059514);;
let a = sr_wartosc ( minus ( wartosc_od_do (-4.400000) (2.600000) ) ( wartosc_od_do (-6.400000) (-4.000000) ) ) ;;
assert (a =. 4.3);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladna (-1.800000) ) ( wartosc_dokladnosc (0.800000) (1.200000) ) ) ( minus ( wartosc_od_do (-6.000000) (5.400000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) (-3.800000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladna (-7.400000) ) ( minus ( wartosc_dokladna (2.800000) ) ( wartosc_od_do (-0.400000) (1.200000) ) ) ) ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (6.800000) (1.600000) ) ( podzielic ( wartosc_dokladna (7.800000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (2.800000) (4.600000) ) ) ;;
assert (a =. 5.8576);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladnosc (0.000000) (1.600000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (2.800000) ) ( wartosc_od_do (-3.200000) (5.200000) ) ) ( minus ( wartosc_od_do (-6.000000) (6.800000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( razy ( wartosc_od_do (3.600000) (6.600000) ) ( wartosc_dokladnosc (4.800000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (9.200000) ) ( wartosc_od_do (-3.800000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (0.600000) ) ( wartosc_od_do (-8.400000) (7.000000) ) ) ) ( wartosc_od_do (-3.400000) (-1.000000) ) ) ( wartosc_od_do (-0.800000) (2.400000) ) ) (-10.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-1.400000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.200000) ) ( wartosc_dokladnosc (1.400000) (0.000000) ) ) (1.200000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_dokladna (-4.200000) ) ( razy ( wartosc_od_do (-2.200000) (4.800000) ) ( wartosc_dokladnosc (9.800000) (3.400000) ) ) ) (3.800000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (2.000000) (2.200000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-1.800000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladna (1.200000) ) ( wartosc_dokladna (7.200000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.800000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.200000) ) ) (0.600000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-7.200000) ) ( wartosc_dokladnosc (8.600000) (9.800000) ) ) (-8.400000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (5.200000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( plus ( minus ( wartosc_dokladnosc (-0.600000) (2.600000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.400000) (3.800000) ) ) ) ( wartosc_od_do (-6.400000) (9.000000) ) ) ) ) ;;
assert (a =. 1.90000000000000036);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (3.400000) (2.800000) ) ( razy ( podzielic ( wartosc_dokladna (5.800000) ) ( wartosc_dokladna (-9.000000) ) ) ( minus ( wartosc_od_do (-1.800000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (0.600000) ) ) ) ) ) ;;
assert (a =. 4.68888888888888911);;
let a = sr_wartosc ( razy ( wartosc_od_do (-7.800000) (2.600000) ) ( podzielic ( wartosc_dokladnosc (-0.600000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. 0.259999999999999953);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (6.600000) ) ( wartosc_dokladna (-9.600000) ) ) ;;
assert (a =. -0.6875);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.400000) (0.000000) ) ( wartosc_dokladna (-5.400000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (-7.000000) (9.400000) ) ) ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (6.400000) (1.800000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-2.600000) (0.000000) ) ( wartosc_dokladnosc (-8.200000) (0.000000) ) ) ;;
assert (a =. 6.89999999999999947);;
let a = min_wartosc ( podzielic ( razy ( podzielic ( wartosc_od_do (-10.000000) (9.200000) ) ( wartosc_dokladnosc (-8.000000) (4.600000) ) ) ( wartosc_od_do (0.800000) (3.400000) ) ) ( plus ( wartosc_od_do (-7.600000) (-3.000000) ) ( plus ( wartosc_dokladna (0.800000) ) ( wartosc_dokladnosc (-5.000000) (0.600000) ) ) ) ) ;;
assert (a =. -0.621328678485069119);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.600000) (6.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (1.600000) (0.400000) ) ( wartosc_dokladna (-1.000000) ) ) (-2.400000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-7.200000) (0.000000) ) ( podzielic ( minus ( wartosc_od_do (0.000000) (7.600000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.600000) ) ) ) ( wartosc_od_do (-6.800000) (8.600000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-8.800000) (6.600000) ) ) ( razy ( podzielic ( wartosc_od_do (-4.000000) (2.400000) ) ( wartosc_od_do (0.800000) (7.200000) ) ) ( wartosc_dokladnosc (5.800000) (0.600000) ) ) ) (7.600000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (6.800000) ) ( wartosc_dokladnosc (-2.000000) (2.000000) ) ) ;;
assert (a =. 4.76);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-0.600000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_dokladnosc (-0.200000) (4.200000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.800000) (7.200000) ) ( wartosc_od_do (1.400000) (9.800000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-0.800000) (3.000000) ) ( razy ( wartosc_dokladna (5.200000) ) ( wartosc_dokladnosc (3.000000) (7.800000) ) ) ) (6.200000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-8.000000) (-7.600000) ) ( wartosc_dokladna (7.600000) ) ) (6.200000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-7.400000) (0.000000) ) ( wartosc_dokladna (8.400000) ) ) ;;
assert (a =. -15.8);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (-5.600000) (-0.400000) ) ) ;;
assert (a =. 8.03571428571428648);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-5.200000) (8.600000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (2.200000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.800000) ) ( wartosc_dokladnosc (6.400000) (4.800000) ) ) ;;
assert (a =. 6.0928);;
let a = in_wartosc ( podzielic ( wartosc_od_do (5.400000) (8.400000) ) ( razy ( wartosc_od_do (-7.400000) (0.000000) ) ( wartosc_dokladnosc (5.200000) (3.200000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-2.400000) (2.800000) ) ( wartosc_dokladnosc (9.400000) (7.400000) ) ) (-1.400000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (9.400000) ) ) ( minus ( wartosc_od_do (-3.400000) (4.000000) ) ( razy ( wartosc_od_do (7.800000) (9.000000) ) ( wartosc_dokladna (9.400000) ) ) ) ) (-4.600000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( podzielic ( wartosc_dokladnosc (-6.600000) (1.200000) ) ( podzielic ( razy ( wartosc_dokladna (-1.400000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (8.800000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-4.000000) (-3.000000) ) ( plus ( wartosc_od_do (1.800000) (6.600000) ) ( wartosc_dokladna (-5.400000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (7.200000) ) ) ;;
assert (a =. -7.2);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (6.400000) ) ( wartosc_dokladnosc (2.800000) (6.400000) ) ) ;;
assert (a =. -4.9061376);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.800000) ) ( wartosc_dokladnosc (-3.200000) (3.200000) ) ) (-0.200000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (4.200000) (7.600000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-2.600000) (9.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-3.800000) ) ) ) (9.200000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (0.000000) (3.400000) ) ( wartosc_od_do (-6.800000) (2.400000) ) ) ( wartosc_dokladnosc (2.800000) (3.200000) ) ) ( wartosc_dokladna (-2.400000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (3.600000) (9.400000) ) ( podzielic ( podzielic ( wartosc_od_do (-5.400000) (0.000000) ) ( wartosc_od_do (2.600000) (5.400000) ) ) ( wartosc_od_do (-8.800000) (0.400000) ) ) ) (5.400000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.000000) (2.000000) ) ( podzielic ( wartosc_dokladnosc (5.600000) (0.000000) ) ( wartosc_od_do (-5.400000) (-1.400000) ) ) ) (-5.200000);;
assert (a = false);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-0.800000) (2.000000) ) ) ( wartosc_dokladnosc (7.200000) (9.000000) ) ) ;;
assert (a =. 72.2647058823529278);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( razy ( wartosc_od_do (-1.800000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-7.200000) (7.200000) ) ( wartosc_dokladnosc (-0.800000) (2.400000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-3.600000) (2.000000) ) ( wartosc_dokladnosc (1.200000) (6.600000) ) ) ( wartosc_dokladnosc (-7.800000) (0.000000) ) ) ;;
assert (a =. 0.420029649151704931);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (4.200000) ) ( wartosc_dokladnosc (-1.800000) (0.600000) ) ) ;;
assert (a =. -0.582383188016990849);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (9.800000) (5.400000) ) ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (-1.400000) (2.600000) ) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( razy ( razy ( wartosc_od_do (3.200000) (7.600000) ) ( wartosc_od_do (-5.800000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (-3.600000) ) ( wartosc_dokladna (8.600000) ) ) ) ) ;;
assert (a =. -18.4520930232558129);;
let a = in_wartosc ( podzielic ( podzielic ( plus ( wartosc_od_do (0.000000) (9.600000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-4.200000) (0.000000) ) ) ( wartosc_od_do (4.200000) (8.000000) ) ) (0.600000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladnosc (4.600000) (7.400000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_od_do (-8.400000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-1.800000) (8.000000) ) ( wartosc_dokladnosc (-5.600000) (2.600000) ) ) ;;
assert (a =. 0.288220551378446155);;
let a = sr_wartosc ( podzielic ( minus ( podzielic ( wartosc_od_do (-9.000000) (0.400000) ) ( wartosc_dokladna (-5.200000) ) ) ( wartosc_od_do (-1.800000) (0.000000) ) ) ( wartosc_od_do (-0.200000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.400000) (9.600000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) (1.600000);;
assert (a = false);;
let a = max_wartosc ( razy ( minus ( podzielic ( wartosc_od_do (3.200000) (5.200000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. 14.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-8.800000) (3.800000) ) ( wartosc_dokladna (-8.400000) ) ) ;;
assert (a =. -10.9000000000000021);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.400000) (0.600000) ) ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (3.800000) ) ) ) ;;
assert (a =. 0.0451818181818181841);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-0.600000) ) ) ( plus ( wartosc_dokladnosc (-4.000000) (7.200000) ) ( wartosc_dokladnosc (-9.600000) (0.000000) ) ) ) ;;
assert (a =. 13.6);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladnosc (6.800000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (3.800000) ) ) ( wartosc_dokladnosc (8.600000) (2.200000) ) ) (-0.800000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_od_do (-6.600000) (1.600000) ) ) ;;
assert (a =. 0.320000000000000062);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (9.000000) (5.200000) ) ( wartosc_dokladna (-2.400000) ) ) ( wartosc_od_do (5.200000) (7.600000) ) ) ;;
assert (a =. 90.1968);;
let a = in_wartosc ( plus ( razy ( minus ( minus ( wartosc_od_do (-8.200000) (4.400000) ) ( podzielic ( wartosc_od_do (4.600000) (5.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.800000) ) ) ( wartosc_dokladnosc (2.600000) (1.000000) ) ) (-2.200000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (7.200000) (8.000000) ) ( wartosc_dokladna (9.200000) ) ) ;;
assert (a =. -1.99999999999999911);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-6.200000) (6.000000) ) ( wartosc_od_do (-6.400000) (3.400000) ) ) ;;
assert (a =. -9.972);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (1.000000) (9.600000) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (7.200000) ) ( minus ( wartosc_od_do (-4.200000) (5.600000) ) ( razy ( wartosc_od_do (-2.800000) (0.000000) ) ( wartosc_dokladnosc (5.800000) (7.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (9.800000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 1.225);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-4.200000) (0.000000) ) ( wartosc_od_do (-4.000000) (7.400000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( wartosc_od_do (-9.200000) (0.200000) ) ( wartosc_dokladna (-5.800000) ) ) ;;
assert (a =. -1.16);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (2.400000) ) ( wartosc_dokladna (1.800000) ) ) ;;
assert (a =. -7.656);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_od_do (2.200000) (6.600000) ) ) ;;
assert (a =. -1.59090909090909083);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-5.400000) (-2.400000) ) ( wartosc_dokladna (-1.200000) ) ) ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (5.400000) (0.000000) ) ) ) (7.800000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-9.000000) (-2.400000) ) ( podzielic ( wartosc_od_do (-5.200000) (7.400000) ) ( wartosc_dokladnosc (5.000000) (4.200000) ) ) ) ;;
assert (a =. 9.77035490605428);;
let a = min_wartosc ( razy ( wartosc_od_do (-4.000000) (-3.400000) ) ( wartosc_od_do (-9.200000) (4.600000) ) ) ;;
assert (a =. -18.4);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-4.400000) ) ( wartosc_dokladna (-1.200000) ) ) ;;
assert (a =. 3.66666666666666696);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.200000) ) ( wartosc_od_do (-2.400000) (6.800000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (3.800000) ) ) ;;
assert (a =. 1.9);;
let a = sr_wartosc ( minus ( wartosc_od_do (2.000000) (5.400000) ) ( wartosc_od_do (0.000000) (1.800000) ) ) ;;
assert (a =. 2.80000000000000027);;
let a = max_wartosc ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-0.200000) (4.000000) ) ) ;;
assert (a =. 1.808);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.400000) ) ( wartosc_dokladna (7.200000) ) ) ;;
assert (a =. -6.8);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-5.000000) (7.200000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-4.400000) (6.800000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.600000) ) ( wartosc_dokladna (5.400000) ) ) ( podzielic ( wartosc_dokladnosc (4.200000) (0.000000) ) ( plus ( podzielic ( wartosc_dokladna (1.200000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-9.400000) (1.600000) ) ) ) ) ) ) ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (1.200000) (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (0.200000) (5.200000) ) ( wartosc_dokladnosc (6.800000) (0.000000) ) ) ;;
assert (a =. -1.59999999999999964);;
let a = max_wartosc ( razy ( wartosc_dokladna (6.600000) ) ( wartosc_od_do (-9.200000) (2.800000) ) ) ;;
assert (a =. 18.4799999999999969);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladnosc (8.000000) (8.600000) ) ( wartosc_dokladnosc (-8.400000) (6.600000) ) ) ( razy ( wartosc_od_do (-2.400000) (4.800000) ) ( wartosc_od_do (-5.000000) (6.400000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.800000) (-6.200000) ) ( wartosc_od_do (-7.200000) (-4.000000) ) ) (6.600000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (5.400000) ) ( razy ( podzielic ( wartosc_dokladna (6.800000) ) ( wartosc_od_do (-5.800000) (0.000000) ) ) ( razy ( podzielic ( wartosc_dokladna (-6.400000) ) ( wartosc_dokladna (-2.600000) ) ) ( minus ( wartosc_dokladnosc (0.000000) (3.600000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ) ) ( wartosc_od_do (-1.200000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( podzielic ( minus ( wartosc_dokladnosc (-6.000000) (6.200000) ) ( wartosc_dokladna (-8.400000) ) ) ( wartosc_dokladna (7.200000) ) ) ( wartosc_dokladnosc (-4.600000) (9.000000) ) ) ;;
assert (a =. -1.17905666666666686);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.600000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -5.6);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladnosc (4.000000) (7.800000) ) ( wartosc_od_do (0.000000) (1.400000) ) ) ( podzielic ( wartosc_od_do (2.400000) (7.000000) ) ( wartosc_od_do (-1.400000) (7.600000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( razy ( razy ( wartosc_od_do (1.000000) (9.400000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladna (7.600000) ) ) ;;
assert (a =. -285.76);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.600000) ) ( wartosc_od_do (3.800000) (6.600000) ) ) ;;
assert (a =. 1.13157894736842102);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladna (-6.200000) ) ( podzielic ( podzielic ( wartosc_dokladna (-9.800000) ) ( plus ( wartosc_dokladna (0.600000) ) ( wartosc_dokladnosc (-2.400000) (3.200000) ) ) ) ( wartosc_dokladnosc (1.400000) (0.000000) ) ) ) ( razy ( wartosc_dokladnosc (-1.400000) (6.800000) ) ( wartosc_od_do (2.400000) (9.200000) ) ) ) ;;
assert (a =. -15.7114040997656232);;
let a = max_wartosc ( podzielic ( razy ( wartosc_od_do (-2.000000) (7.400000) ) ( wartosc_dokladnosc (-5.200000) (6.400000) ) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 1.5808);;
let a = sr_wartosc ( razy ( wartosc_od_do (-7.400000) (-2.200000) ) ( minus ( wartosc_od_do (0.000000) (2.600000) ) ( wartosc_dokladna (-0.600000) ) ) ) ;;
assert (a =. -12.5000000000000018);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (-3.600000) ) ( wartosc_dokladna (6.200000) ) ) ( wartosc_dokladnosc (0.000000) (7.200000) ) ) ;;
assert (a =. -22.32);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-3.400000) (6.400000) ) ( wartosc_dokladna (-4.800000) ) ) ;;
assert (a =. 17.36448);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.400000) (0.800000) ) ( wartosc_dokladnosc (-5.000000) (7.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladna (8.400000) ) ( wartosc_dokladnosc (-8.400000) (7.400000) ) ) ;;
assert (a =. -65.33856);;
let a = max_wartosc ( razy ( wartosc_od_do (-3.600000) (1.600000) ) ( wartosc_dokladnosc (1.000000) (2.200000) ) ) ;;
assert (a =. 1.63520000000000021);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (4.400000) (8.400000) ) ( wartosc_dokladnosc (-7.200000) (1.200000) ) ) ;;
assert (a =. -3.25600000000000023);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladna (3.400000) ) ( minus ( podzielic ( wartosc_dokladnosc (-3.400000) (1.400000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (6.000000) (8.000000) ) ) ) ( wartosc_od_do (-4.200000) (0.000000) ) ) ;;
assert (a =. 8.65428);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-9.600000) ) ( wartosc_dokladna (7.800000) ) ) ( razy ( wartosc_dokladnosc (6.200000) (1.600000) ) ( minus ( minus ( minus ( wartosc_od_do (-9.200000) (-0.800000) ) ( razy ( plus ( podzielic ( wartosc_dokladnosc (-8.400000) (0.000000) ) ( wartosc_dokladnosc (-3.600000) (7.600000) ) ) ( plus ( plus ( wartosc_od_do (-5.600000) (1.800000) ) ( podzielic ( wartosc_od_do (-9.200000) (6.000000) ) ( wartosc_dokladna (2.200000) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ( wartosc_od_do (4.400000) (9.200000) ) ) ( wartosc_od_do (-2.200000) (-1.800000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_od_do (-6.000000) (8.400000) ) ( razy ( wartosc_dokladna (7.600000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (8.600000) ) ( wartosc_dokladna (-3.000000) ) ) (-3.400000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-3.200000) (3.200000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( wartosc_dokladna (-6.800000) ) ) ;;
assert (a =. -1.20588235294117641);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.600000) ) ( minus ( wartosc_dokladnosc (6.200000) (2.200000) ) ( razy ( wartosc_dokladnosc (3.800000) (4.400000) ) ( wartosc_dokladnosc (9.200000) (0.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( razy ( wartosc_od_do (-2.600000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (3.400000) (6.600000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-0.400000) ) ) ( plus ( wartosc_dokladnosc (-9.800000) (0.000000) ) ( wartosc_od_do (7.000000) (8.200000) ) ) ) ;;
assert (a =. -0.196428571428571286);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-3.600000) (0.000000) ) ( wartosc_dokladnosc (-0.400000) (6.200000) ) ) ;;
assert (a =. 9.59488272921108809);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-8.800000) (9.600000) ) ( wartosc_dokladnosc (0.800000) (9.000000) ) ) ;;
assert (a =. -13.2483516483516492);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.800000) ) ( wartosc_od_do (0.200000) (3.800000) ) ) ;;
assert (a =. -14.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (4.600000) (5.200000) ) ) ;;
assert (a =. 4.6);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (1.800000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-8.800000) (1.200000) ) ( wartosc_od_do (-6.000000) (6.000000) ) ) (9.600000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (6.400000) ) ( wartosc_dokladnosc (-8.800000) (9.200000) ) ) ;;
assert (a =. 16.0096);;
let a = min_wartosc ( plus ( wartosc_dokladna (-7.800000) ) ( wartosc_dokladnosc (2.200000) (4.800000) ) ) ;;
assert (a =. -5.7056);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-2.200000) (2.800000) ) ( wartosc_od_do (-6.800000) (0.000000) ) ) (-5.400000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (6.800000) (0.800000) ) ( wartosc_dokladna (-10.000000) ) ) (9.800000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (0.600000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( plus ( minus ( wartosc_od_do (3.000000) (4.600000) ) ( razy ( wartosc_dokladnosc (1.200000) (4.800000) ) ( wartosc_dokladna (-1.800000) ) ) ) ( podzielic ( wartosc_dokladna (-2.400000) ) ( wartosc_dokladna (8.800000) ) ) ) ( wartosc_od_do (-2.600000) (6.400000) ) ) (-0.200000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.600000) (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (8.400000) ) ( wartosc_dokladna (4.400000) ) ) ;;
assert (a =. 12.8);;
let a = max_wartosc ( minus ( wartosc_dokladna (1.400000) ) ( wartosc_od_do (-5.200000) (0.000000) ) ) ;;
assert (a =. 6.6);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-7.600000) (5.800000) ) ( razy ( wartosc_dokladnosc (5.600000) (0.800000) ) ( plus ( wartosc_od_do (0.000000) (8.600000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-5.800000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -5.8);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (3.400000) (5.200000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (8.200000) ) ( wartosc_dokladna (1.400000) ) ) ;;
assert (a =. 6.79999999999999893);;
let a = sr_wartosc ( razy ( wartosc_od_do (-6.400000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladna (8.600000) ) ( wartosc_dokladnosc (8.600000) (1.200000) ) ) ;;
assert (a =. -0.103199999999999292);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladnosc (0.000000) (6.400000) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (0.400000) (9.200000) ) ) ) ( minus ( wartosc_dokladna (6.800000) ) ( wartosc_dokladna (-5.200000) ) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (1.200000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) (-3.600000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-3.800000) (1.200000) ) ( wartosc_dokladnosc (-7.800000) (1.400000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (8.200000) ) ( wartosc_od_do (-2.000000) (7.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (-6.200000) (-0.200000) ) ( minus ( minus ( wartosc_od_do (-2.400000) (1.000000) ) ( podzielic ( wartosc_od_do (5.600000) (8.600000) ) ( wartosc_od_do (0.000000) (4.200000) ) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. -0.533333333333333215);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.200000) ) ( wartosc_dokladnosc (-6.000000) (0.200000) ) ) (8.600000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (5.800000) ) ( razy ( wartosc_od_do (-7.200000) (5.000000) ) ( plus ( razy ( podzielic ( minus ( wartosc_dokladnosc (1.600000) (2.600000) ) ( wartosc_dokladna (8.600000) ) ) ( podzielic ( wartosc_dokladna (-6.800000) ) ( wartosc_od_do (-2.400000) (0.000000) ) ) ) ( wartosc_dokladnosc (-2.400000) (3.600000) ) ) ( plus ( razy ( wartosc_od_do (-2.400000) (7.800000) ) ( wartosc_dokladnosc (7.000000) (2.800000) ) ) ( wartosc_dokladnosc (-0.200000) (1.000000) ) ) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -2588.7209827749648);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-8.800000) (6.800000) ) ( wartosc_dokladnosc (-3.000000) (2.600000) ) ) (-1.200000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (4.400000) ) ( wartosc_od_do (-6.400000) (8.800000) ) ) (-3.600000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladna (-4.200000) ) ) ( wartosc_od_do (-1.000000) (5.400000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (8.800000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (8.200000) ) ) ;;
assert (a =. 47.6080000000000041);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-3.600000) (0.000000) ) ( wartosc_dokladnosc (-0.600000) (7.000000) ) ) ;;
assert (a =. 5.60747663551401843);;
let a = min_wartosc ( minus ( wartosc_od_do (-8.800000) (8.600000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. -8.8);;
let a = in_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (0.800000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ( wartosc_od_do (-8.400000) (-4.800000) ) ) (-1.600000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (7.400000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ;;
assert (a =. 3.40000000000000036);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (4.400000) (9.000000) ) ( wartosc_od_do (-6.000000) (-1.000000) ) ) ;;
assert (a =. 0.900000000000000355);;
let a = sr_wartosc ( plus ( podzielic ( plus ( minus ( wartosc_od_do (3.400000) (9.600000) ) ( wartosc_od_do (0.000000) (9.200000) ) ) ( podzielic ( wartosc_dokladnosc (-6.600000) (5.800000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ) ( wartosc_dokladna (-1.200000) ) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-8.200000) (1.600000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (-5.800000) (7.400000) ) ( wartosc_dokladnosc (0.800000) (8.600000) ) ) ;;
assert (a =. -5.06879999999999953);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (3.200000) ) ( podzielic ( wartosc_od_do (-4.600000) (0.000000) ) ( wartosc_dokladna (3.400000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-3.400000) ) ( wartosc_dokladnosc (7.200000) (7.600000) ) ) ;;
assert (a =. -0.901875901875901942);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladna (-0.600000) ) ) ;;
assert (a =. 6.6);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.800000) ) ( wartosc_od_do (-9.400000) (0.800000) ) ) (2.600000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_od_do (-5.200000) (5.200000) ) ( razy ( wartosc_od_do (-1.000000) (2.800000) ) ( wartosc_od_do (-6.000000) (4.600000) ) ) ) ;;
assert (a =. 21.9999999999999964);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (-9.200000) (1.200000) ) ( wartosc_od_do (6.800000) (7.200000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a =. 1.17647058823529416);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-5.200000) (0.200000) ) ( wartosc_dokladnosc (-6.200000) (0.200000) ) ) ( wartosc_dokladna (-4.600000) ) ) ;;
assert (a =. -3.37630434782608768);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (-0.200000) ) ( razy ( wartosc_od_do (-1.600000) (1.000000) ) ( wartosc_dokladnosc (9.400000) (4.800000) ) ) ) ;;
assert (a =. -98.512);;
let a = min_wartosc ( podzielic ( wartosc_od_do (4.200000) (8.200000) ) ( podzielic ( wartosc_dokladna (-4.600000) ) ( podzielic ( wartosc_od_do (0.600000) (9.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (6.000000) (7.400000) ) ( wartosc_dokladnosc (0.000000) (8.400000) ) ) ( wartosc_dokladna (5.200000) ) ) ) ) ) ;;
assert (a =. -15.0154944126209049);;
let a = max_wartosc ( minus ( podzielic ( podzielic ( wartosc_dokladna (0.400000) ) ( wartosc_dokladnosc (-1.800000) (0.000000) ) ) ( minus ( wartosc_od_do (-4.800000) (-1.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ( podzielic ( wartosc_od_do (-2.400000) (0.000000) ) ( wartosc_od_do (-6.200000) (1.800000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladna (-0.200000) ) ( wartosc_dokladna (6.600000) ) ) ( wartosc_od_do (0.200000) (4.400000) ) ) ;;
assert (a =. -1.54545454545454541);;
let a = in_wartosc ( minus ( wartosc_od_do (-1.600000) (2.000000) ) ( wartosc_dokladnosc (4.000000) (8.600000) ) ) (3.200000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (6.800000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-2.400000) (7.800000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (2.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (-9.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ( wartosc_dokladnosc (-4.200000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-9.800000) (1.400000) ) ( wartosc_dokladnosc (6.000000) (7.400000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-9.800000) (6.200000) ) ) ;;
assert (a =. 0.717042023825298802);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.400000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (5.400000) (9.800000) ) ( wartosc_dokladna (-6.000000) ) ) (-5.800000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-6.200000) ) ( podzielic ( razy ( wartosc_dokladna (-6.600000) ) ( wartosc_dokladna (-3.400000) ) ) ( wartosc_dokladnosc (-9.800000) (4.800000) ) ) ) ;;
assert (a =. -3.90491620857721555);;
let a = sr_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (-4.400000) ) ) ;;
assert (a =. 0.599999999999999645);;
let a = min_wartosc ( plus ( wartosc_od_do (-5.800000) (2.000000) ) ( wartosc_od_do (0.000000) (1.600000) ) ) ;;
assert (a =. -5.8);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (-8.600000) (9.200000) ) ( wartosc_od_do (-4.000000) (6.000000) ) ) ( wartosc_dokladna (-9.800000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (-9.800000) (0.600000) ) ( wartosc_dokladnosc (5.800000) (2.200000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (3.800000) ) ) (-6.800000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_od_do (3.000000) (9.600000) ) ( wartosc_dokladna (1.800000) ) ) (4.400000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.800000) ) ( wartosc_dokladnosc (-6.800000) (7.800000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-8.200000) (4.600000) ) ( razy ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( wartosc_od_do (1.000000) (9.800000) ) ) ) ;;
assert (a =. 2.1443);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-7.200000) (7.000000) ) ( wartosc_od_do (0.000000) (8.200000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.800000) (4.800000) ) ( plus ( wartosc_od_do (-8.600000) (7.200000) ) ( wartosc_od_do (0.000000) (9.600000) ) ) ) (-6.400000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladna (2.600000) ) ( plus ( wartosc_od_do (2.600000) (3.000000) ) ( wartosc_dokladnosc (-2.800000) (5.600000) ) ) ) ;;
assert (a =. 2.9568);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.200000) ) ( razy ( wartosc_dokladnosc (1.200000) (4.800000) ) ( wartosc_od_do (-5.800000) (4.800000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (-3.000000) (1.600000) ) ( plus ( wartosc_od_do (-8.200000) (-2.200000) ) ( wartosc_dokladna (8.800000) ) ) ) ( wartosc_od_do (-1.800000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (1.600000) ) ( wartosc_dokladnosc (-7.600000) (4.800000) ) ) ;;
assert (a =. -5.99999999999999911);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-0.200000) ) ( wartosc_od_do (-1.400000) (0.000000) ) ) ;;
assert (a =. 0.142857142857142877);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-4.000000) (-0.800000) ) ( minus ( wartosc_od_do (-0.200000) (5.600000) ) ( wartosc_dokladna (-4.800000) ) ) ) ;;
assert (a =. -0.869565217391304435);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (8.400000) ) ( plus ( wartosc_od_do (2.000000) (3.600000) ) ( wartosc_dokladnosc (0.000000) (5.800000) ) ) ) ;;
assert (a =. -2.8);;
