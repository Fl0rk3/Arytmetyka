open Arytmetyka;;
let ( =. ) (x : float) (y : float) =
let e = 1e-6 and d = x -. y in ~-.e < d && d < e;;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-2.000000) ) ) (-9.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladna (2.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( minus ( wartosc_od_do (-6.000000) (5.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-5.000000) (9.000000) ) ) ) ) ( wartosc_od_do (1.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (7.000000) (8.000000) ) ( podzielic ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. -2.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (5.000000) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) ;;
assert (a =. 6.15);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-5.000000) (9.000000) ) ) (-10.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( minus ( wartosc_dokladnosc (-2.000000) (2.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -5.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) ;;
assert (a =. 0.526610644257703098);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (4.000000) (4.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (9.000000) (5.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 17.55);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 1.5);;
let a = in_wartosc ( plus ( minus ( wartosc_od_do (-1.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) (9.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (1.000000) (2.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 6.5);;
let a = in_wartosc ( razy ( wartosc_od_do (-8.000000) (-1.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-10.000000) (6.000000) ) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (2.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( wartosc_dokladna (-10.000000) ) ( plus ( wartosc_od_do (-7.000000) (7.000000) ) ( wartosc_od_do (-8.000000) (-1.000000) ) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( podzielic ( plus ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (3.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (3.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( plus ( podzielic ( wartosc_od_do (-4.000000) (-1.000000) ) ( minus ( plus ( minus ( wartosc_dokladnosc (-4.000000) (6.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_od_do (-3.000000) (7.000000) ) ) ( minus ( wartosc_dokladnosc (-3.000000) (4.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ) (1.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (1.000000) (2.000000) ) ( wartosc_dokladnosc (-8.000000) (5.000000) ) ) ;;
assert (a =. 9.5);;
let a = min_wartosc ( podzielic ( plus ( podzielic ( razy ( wartosc_dokladna (-10.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (2.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ( wartosc_dokladna (-8.000000) ) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (7.000000) (6.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 1.13142857142857145);;
let a = max_wartosc ( minus ( wartosc_od_do (-2.000000) (-1.000000) ) ( wartosc_od_do (-4.000000) (-4.000000) ) ) ;;
assert (a =. 3.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ;;
assert (a =. 0.848656294200848649);;
let a = sr_wartosc ( razy ( minus ( razy ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (3.000000) (2.000000) ) ) ( wartosc_od_do (-7.000000) (1.000000) ) ) ;;
assert (a =. 9.18000000000000149);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -4.5);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_od_do (-5.000000) (5.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (1.000000) (9.000000) ) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) (5.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-6.000000) ) ( minus ( wartosc_dokladnosc (4.000000) (0.000000) ) ( plus ( minus ( wartosc_od_do (-1.000000) (5.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( minus ( podzielic ( wartosc_dokladnosc (-2.000000) (4.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_od_do (-6.000000) (-5.000000) ) ) ) ) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (4.000000) ) ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ) ) (7.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (1.000000) (9.000000) ) ) ;;
assert (a =. -0.90999999999999992);;
let a = sr_wartosc ( minus ( wartosc_od_do (-6.000000) (-6.000000) ) ( minus ( podzielic ( wartosc_dokladna (-9.000000) ) ( minus ( plus ( wartosc_od_do (-10.000000) (-4.000000) ) ( wartosc_od_do (-7.000000) (-6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (7.000000) ) ) ) ;;
assert (a =. 0.285294117647058698);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (1.000000) (6.000000) ) ) ( wartosc_dokladnosc (-3.000000) (4.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (1.000000) (5.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -0.5);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (9.000000) (7.000000) ) ( podzielic ( wartosc_od_do (-5.000000) (7.000000) ) ( podzielic ( razy ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ) ) ( wartosc_dokladnosc (-7.000000) (8.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_od_do (-4.000000) (3.000000) ) ( wartosc_dokladnosc (8.000000) (7.000000) ) ) ;;
assert (a =. 3.4399999999999995);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( minus ( wartosc_od_do (-8.000000) (0.000000) ) ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ) (4.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (-3.000000) (9.000000) ) ( wartosc_dokladna (5.000000) ) ) ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-1.000000) (6.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( minus ( plus ( plus ( podzielic ( wartosc_od_do (-6.000000) (-3.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ( wartosc_od_do (3.000000) (6.000000) ) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) ;;
assert (a =. 14.6287128712871279);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( podzielic ( podzielic ( plus ( wartosc_dokladnosc (1.000000) (6.000000) ) ( minus ( plus ( wartosc_dokladnosc (8.000000) (5.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( plus ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (-10.000000) (2.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (5.000000) ) ) ( wartosc_od_do (-3.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) (6.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( plus ( wartosc_od_do (-3.000000) (7.000000) ) ( razy ( wartosc_od_do (-8.000000) (-2.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -66.72);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (2.000000) (8.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (7.000000) ) ( wartosc_dokladnosc (-5.000000) (1.000000) ) ) ;;
assert (a =. -1.47326732673267324);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( razy ( wartosc_od_do (-6.000000) (-3.000000) ) ( wartosc_dokladna (4.000000) ) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( wartosc_od_do (-10.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (7.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ;;
assert (a =. -3.75);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( plus ( wartosc_od_do (-2.000000) (4.000000) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. 3.88);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (3.000000) ) ) ( plus ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. 2.88);;
let a = sr_wartosc ( plus ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (-1.000000) (4.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. 12.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. 0.27777777777777779);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( plus ( razy ( wartosc_dokladnosc (1.000000) (3.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -5.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-2.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-3.000000) (4.000000) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( minus ( wartosc_od_do (-6.000000) (-3.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ;;
assert (a =. 7.);;
let a = min_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladna (-9.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (3.000000) (4.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ;;
assert (a =. -0.824742268041237181);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladnosc (7.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( wartosc_dokladnosc (-2.000000) (9.000000) ) ) ;;
assert (a =. 9.81);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( plus ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (9.000000) ) ) ;;
assert (a =. -13.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-6.000000) (-1.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. -11.5);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_od_do (-6.000000) (8.000000) ) ) ;;
assert (a =. 15.2800000000000011);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( wartosc_od_do (-5.000000) (-1.000000) ) ) ;;
assert (a =. 3.71999999999999975);;
let a = sr_wartosc ( minus ( wartosc_od_do (-8.000000) (7.000000) ) ( wartosc_od_do (-6.000000) (-5.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (1.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (3.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) (-10.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_od_do (-7.000000) (8.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) (1.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (2.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( plus ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_dokladnosc (8.000000) (4.000000) ) ) ) ) ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (9.000000) (2.000000) ) ( wartosc_od_do (2.000000) (9.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (-8.000000) (4.000000) ) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ;;
assert (a =. 0.250701121794871806);;
let a = sr_wartosc ( podzielic ( plus ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (8.000000) (7.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -0.409922907963305883);;
let a = max_wartosc ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (9.000000) (5.000000) ) ) ;;
assert (a =. 75.6);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (9.000000) (8.000000) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ;;
assert (a =. 11.9);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-5.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (3.000000) (8.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-3.000000) (9.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ( podzielic ( plus ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a =. -5.74450549450549364);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladnosc (9.000000) (1.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. -5.84357142857142797);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -3.5);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (6.000000) (3.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ;;
assert (a =. 11.64);;
let a = in_wartosc ( plus ( minus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_od_do (2.000000) (6.000000) ) ) ( wartosc_dokladnosc (-10.000000) (6.000000) ) ) (-4.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (1.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-8.000000) (-6.000000) ) ( wartosc_od_do (-8.000000) (9.000000) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ;;
assert (a =. 2.94583333333333286);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (0.000000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ;;
assert (a =. -9.05999999999999872);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (1.000000) (8.000000) ) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-9.000000) (7.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 13.);;
let a = sr_wartosc ( razy ( wartosc_od_do (-4.000000) (3.000000) ) ( plus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a =. 5.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-2.000000) (-1.000000) ) ( plus ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_od_do (7.000000) (7.000000) ) ) ) ;;
assert (a =. -4.3478260869565224);;
let a = min_wartosc ( podzielic ( wartosc_od_do (3.000000) (8.000000) ) ( minus ( wartosc_od_do (-7.000000) (9.000000) ) ( wartosc_dokladnosc (-4.000000) (1.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( minus ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ;;
assert (a =. 0.628956888754899079);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) ) ;;
assert (a =. 11.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (-2.000000) ) ( wartosc_dokladnosc (3.000000) (5.000000) ) ) ;;
assert (a =. -0.843776106934001624);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (7.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert (a =. -4.185);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (4.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -7.4);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-6.000000) (-2.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ( podzielic ( plus ( plus ( wartosc_dokladna (3.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) ) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladnosc (9.000000) (5.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-7.000000) (3.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 3.21);;
let a = in_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( plus ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ( wartosc_dokladna (-9.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (8.000000) ) ( wartosc_dokladnosc (1.000000) (8.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladna (3.000000) ) ( razy ( wartosc_od_do (0.000000) (7.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (7.000000) ) ) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( razy ( minus ( wartosc_dokladnosc (-5.000000) (4.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) ( wartosc_dokladnosc (-10.000000) (8.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (5.000000) (9.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-1.000000) (6.000000) ) ) ;;
assert (a =. 14.);;
let a = in_wartosc ( minus ( plus ( podzielic ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (4.000000) ) ) ) ( wartosc_od_do (6.000000) (7.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_dokladna (-4.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ;;
assert (a =. -10.);;
let a = in_wartosc ( minus ( plus ( podzielic ( razy ( wartosc_od_do (-2.000000) (-1.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (2.000000) (5.000000) ) ( plus ( wartosc_dokladna (5.000000) ) ( razy ( wartosc_dokladna (1.000000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ) ) ) ( wartosc_od_do (-5.000000) (-5.000000) ) ) ( wartosc_dokladna (6.000000) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( podzielic ( razy ( minus ( wartosc_od_do (-10.000000) (8.000000) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ( razy ( wartosc_dokladnosc (6.000000) (3.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (1.000000) (5.000000) ) ) ( wartosc_od_do (-6.000000) (-4.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (0.000000) ) ( razy ( podzielic ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( plus ( wartosc_od_do (1.000000) (6.000000) ) ( wartosc_dokladnosc (6.000000) (3.000000) ) ) ;;
assert (a =. 9.5);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) ;;
assert (a =. -0.742574257425742568);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( minus ( wartosc_dokladna (3.000000) ) ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-8.000000) (5.000000) ) ) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) ) ( razy ( podzielic ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ;;
assert (a =. -11.16);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (7.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -4.815);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_od_do (-7.000000) (-1.000000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( podzielic ( wartosc_od_do (-5.000000) (2.000000) ) ( wartosc_od_do (-6.000000) (-5.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 2.80000000000000027);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (2.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( plus ( wartosc_od_do (3.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.125);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( razy ( razy ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( plus ( podzielic ( wartosc_od_do (-2.000000) (8.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( wartosc_dokladna (-4.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (5.000000) ) ( minus ( podzielic ( wartosc_od_do (-8.000000) (6.000000) ) ( wartosc_od_do (3.000000) (6.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ) ;;
assert (a =. -0.123913043478260862);;
let a = in_wartosc ( minus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (4.000000) ) ) (-5.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_dokladnosc (4.000000) (3.000000) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (6.000000) ) ( wartosc_dokladna (7.000000) ) ) (-3.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.000000) (6.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (4.000000) (1.000000) ) ( minus ( wartosc_dokladna (-10.000000) ) ( minus ( minus ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ) ) ) ;;
assert (a =. 0.195505969448933864);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (7.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-4.000000) (9.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. 24.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (3.000000) ) ( wartosc_dokladna (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (7.000000) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) ;;
assert (a =. -1.63775510204081631);;
let a = min_wartosc ( razy ( podzielic ( minus ( wartosc_od_do (8.000000) (9.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) ;;
assert (a =. 0.96);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (-10.000000) (-10.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ( wartosc_dokladnosc (7.000000) (5.000000) ) ) ;;
assert (a =. -7.35);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (-7.000000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ;;
assert (a =. 0.142871430000142879);;
let a = max_wartosc ( podzielic ( minus ( plus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. -0.298333333333333339);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( minus ( wartosc_od_do (-10.000000) (-7.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ;;
assert (a =. 14.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (4.000000) (4.000000) ) ) (5.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ;;
assert (a =. 9.42);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.000000) (-1.000000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (2.000000) (3.000000) ) ( wartosc_dokladnosc (-1.000000) (8.000000) ) ) ;;
assert (a =. -2.0048);;
let a = in_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (-7.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-2.000000) (8.000000) ) ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. -3.6616);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (4.000000) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( podzielic ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ( wartosc_dokladnosc (-4.000000) (6.000000) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( plus ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ;;
assert (a =. -27.9);;
let a = sr_wartosc ( podzielic ( podzielic ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_od_do (7.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (1.000000) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( plus ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( razy ( razy ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ( minus ( wartosc_dokladna (9.000000) ) ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -4.5);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 27.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( podzielic ( podzielic ( wartosc_od_do (2.000000) (4.000000) ) ( minus ( plus ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-10.000000) (4.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 7.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ( wartosc_dokladna (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (5.000000) (4.000000) ) ( wartosc_dokladnosc (6.000000) (7.000000) ) ) ;;
assert (a =. -0.379999999999999893);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (1.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -0.142857142857142849);;
let a = min_wartosc ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (3.000000) (7.000000) ) ( wartosc_dokladnosc (1.000000) (5.000000) ) ) ( wartosc_od_do (-8.000000) (-8.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (7.000000) (7.000000) ) ( razy ( plus ( wartosc_dokladnosc (6.000000) (4.000000) ) ( podzielic ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (-10.000000) (-5.000000) ) ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-10.000000) (4.000000) ) ) ) ;;
assert (a =. -6.85096153846153832);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (-8.000000) (4.000000) ) ) ) ;;
assert (a =. 60.);;
let a = min_wartosc ( minus ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -9.);;
let a = min_wartosc ( razy ( wartosc_od_do (-9.000000) (7.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. -63.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (-3.000000) (3.000000) ) ) (7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( razy ( wartosc_dokladna (4.000000) ) ( razy ( wartosc_od_do (-10.000000) (2.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (3.000000) ) ( wartosc_od_do (3.000000) (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_od_do (8.000000) (9.000000) ) ) ) ;;
assert (a =. -4.5);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (-2.000000) ) ( minus ( wartosc_dokladnosc (-5.000000) (6.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. 18.4);;
let a = in_wartosc ( podzielic ( wartosc_od_do (5.000000) (8.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) (-10.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( plus ( wartosc_od_do (-10.000000) (-2.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ;;
assert (a =. 62.4);;
let a = in_wartosc ( plus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) (-4.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (2.000000) (7.000000) ) ( wartosc_od_do (1.000000) (6.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-4.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (9.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( minus ( podzielic ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-1.000000) (9.000000) ) ) ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. -1.14285714285714279);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. 12.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( plus ( wartosc_od_do (-9.000000) (-9.000000) ) ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (4.000000) (3.000000) ) ( razy ( wartosc_od_do (1.000000) (6.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (9.000000) ) ( wartosc_dokladnosc (-9.000000) (2.000000) ) ) ;;
assert (a =. -0.617913832199546431);;
let a = sr_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (5.000000) (9.000000) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. -0.600000000000000089);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -3.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert (a =. 1.25);;
let a = min_wartosc ( podzielic ( minus ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( plus ( wartosc_dokladnosc (7.000000) (2.000000) ) ( wartosc_dokladnosc (-2.000000) (9.000000) ) ) ) ;;
assert (a =. 2.99999999999999956);;
let a = in_wartosc ( razy ( minus ( razy ( wartosc_dokladnosc (6.000000) (1.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) (-2.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( minus ( podzielic ( wartosc_od_do (4.000000) (7.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ) ;;
assert (a =. 0.25);;
let a = in_wartosc ( podzielic ( minus ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( podzielic ( plus ( minus ( wartosc_dokladnosc (9.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (1.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ) ( podzielic ( wartosc_od_do (-9.000000) (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ( wartosc_dokladna (-2.000000) ) ) ) ( wartosc_dokladnosc (-7.000000) (7.000000) ) ) ( wartosc_od_do (-4.000000) (9.000000) ) ) (-1.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -0.111111111111111105);;
let a = in_wartosc ( podzielic ( wartosc_od_do (5.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (9.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) (-10.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert (a =. -11.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (4.000000) ) ( wartosc_od_do (-8.000000) (4.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ;;
assert (a =. 8.08);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( razy ( podzielic ( podzielic ( wartosc_od_do (-2.000000) (2.000000) ) ( wartosc_od_do (-10.000000) (-2.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) (-8.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 54.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-1.000000) (1.000000) ) ) (6.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (-6.000000) (-1.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_od_do (-9.000000) (3.000000) ) ) ) ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( podzielic ( plus ( minus ( wartosc_od_do (4.000000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ( wartosc_od_do (-9.000000) (-6.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (4.000000) (8.000000) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-9.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (7.000000) (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (9.000000) ) ( wartosc_dokladnosc (8.000000) (5.000000) ) ) ;;
assert (a =. 0.573684210526315796);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-3.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (4.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (-9.000000) (5.000000) ) ) ;;
assert (a =. -28.3499999999999979);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (2.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ;;
assert (a =. 0.0625);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (7.000000) ) ( wartosc_dokladna (-3.000000) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-2.000000) (8.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) ;;
assert (a =. -9.5);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-3.000000) (7.000000) ) ( razy ( wartosc_od_do (2.000000) (4.000000) ) ( wartosc_dokladnosc (-4.000000) (6.000000) ) ) ) ) ( wartosc_dokladnosc (-3.000000) (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( podzielic ( podzielic ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ( wartosc_od_do (-2.000000) (3.000000) ) ) ( podzielic ( wartosc_od_do (-3.000000) (1.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_dokladnosc (3.000000) (6.000000) ) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ;;
assert (a =. 0.0542404797723946772);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (7.000000) (8.000000) ) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_dokladnosc (8.000000) (3.000000) ) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (9.000000) ) ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ) ;;
assert (a =. 0.103780864197530853);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ) ( wartosc_od_do (-8.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (-2.000000) (5.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) (3.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( plus ( wartosc_dokladna (-10.000000) ) ( minus ( wartosc_od_do (-2.000000) (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. 12.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( razy ( minus ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( minus ( wartosc_dokladna (4.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (3.000000) (4.000000) ) ( razy ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( podzielic ( podzielic ( razy ( wartosc_dokladnosc (-2.000000) (2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ( plus ( plus ( wartosc_dokladnosc (-5.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ) ;;
assert (a =. -1.91000000000000014);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 0.625);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( minus ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-6.000000) ) ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_od_do (3.000000) (9.000000) ) ) ;;
assert (a =. -0.777777777777777679);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (6.000000) ) ( wartosc_dokladna (-8.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (8.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (1.000000) (5.000000) ) ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 10.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladnosc (-10.000000) (8.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (6.000000) (7.000000) ) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (1.000000) ) ( wartosc_dokladna (6.000000) ) ) (4.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert (a =. 3.);;
let a = max_wartosc ( razy ( razy ( razy ( wartosc_od_do (-3.000000) (-1.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_dokladna (-9.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-7.000000) (1.000000) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( plus ( razy ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_od_do (2.000000) (2.000000) ) ) ( wartosc_dokladnosc (-10.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-2.000000) (6.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. -1.5);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (4.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (8.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (-2.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -0.357142857142857095);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ) ) (-4.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) (1.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (4.000000) (3.000000) ) ) ( wartosc_dokladna (2.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-2.000000) (3.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (3.000000) (4.000000) ) ( razy ( wartosc_od_do (-1.000000) (3.000000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (8.000000) ) ) ) ) ;;
assert (a =. -1.46782608695652161);;
let a = min_wartosc ( minus ( wartosc_od_do (8.000000) (9.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) ) ;;
assert (a =. -6.15322580645161388);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ;;
assert (a =. -0.125);;
let a = min_wartosc ( plus ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. -9.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (6.000000) (8.000000) ) ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (-10.000000) (8.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) (-10.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( razy ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (-6.000000) (6.000000) ) ) ( wartosc_dokladnosc (-7.000000) (3.000000) ) ) ( wartosc_od_do (6.000000) (9.000000) ) ) ;;
assert (a =. -54.8556);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (8.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (-5.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 40.);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (8.000000) (9.000000) ) ( wartosc_od_do (-6.000000) (7.000000) ) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) (2.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (4.000000) (3.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 12.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (5.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( minus ( razy ( wartosc_dokladna (-1.000000) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-10.000000) (7.000000) ) ) ) ( plus ( wartosc_od_do (-5.000000) (-2.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ;;
assert (a =. -0.527419354838709609);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( podzielic ( wartosc_od_do (-6.000000) (-3.000000) ) ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ) ;;
assert (a =. 1.16161616161616155);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-2.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (3.000000) ) ( plus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ;;
assert (a =. -3.125);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert (a =. -8.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (9.000000) (1.000000) ) ( minus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ;;
assert (a =. -94.905);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-10.000000) (4.000000) ) ) ;;
assert (a =. 40.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (8.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 1.25);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( razy ( wartosc_od_do (-8.000000) (-3.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-7.000000) (3.000000) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( plus ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (9.000000) ) ( wartosc_od_do (5.000000) (8.000000) ) ) ;;
assert (a =. -33.175);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladna (4.000000) ) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (3.000000) ) ) ) ;;
assert (a =. -2.91408934707903811);;
let a = sr_wartosc ( podzielic ( minus ( minus ( wartosc_od_do (2.000000) (7.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ( wartosc_od_do (2.000000) (4.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-7.000000) (-6.000000) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (-4.000000) (6.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (-4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -8.5);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( razy ( wartosc_od_do (-7.000000) (2.000000) ) ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( minus ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (6.000000) ) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( minus ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladnosc (5.000000) (5.000000) ) ) ( wartosc_od_do (-9.000000) (-1.000000) ) ) ) ) ) ) ;;
assert (a =. 4.72847682119205359);;
let a = in_wartosc ( minus ( wartosc_od_do (3.000000) (9.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) (1.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (9.000000) (9.000000) ) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. 4.8100000000000005);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (8.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (-4.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a =. -7.);;
let a = in_wartosc ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-10.000000) (4.000000) ) ) (1.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladnosc (5.000000) (7.000000) ) ( wartosc_dokladnosc (1.000000) (9.000000) ) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (3.000000) ) ) ;;
assert (a =. 8.97);;
let a = max_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( razy ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) ) ( wartosc_dokladnosc (-2.000000) (8.000000) ) ) ( podzielic ( wartosc_od_do (1.000000) (6.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_od_do (1.000000) (5.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( plus ( minus ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-7.000000) (7.000000) ) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) (8.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-9.000000) (6.000000) ) ( wartosc_od_do (7.000000) (7.000000) ) ) (1.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -5.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (-10.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( razy ( podzielic ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ( razy ( podzielic ( wartosc_od_do (-7.000000) (5.000000) ) ( wartosc_od_do (-1.000000) (9.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) (-6.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -14.);;
let a = min_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( razy ( wartosc_od_do (-9.000000) (1.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (3.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -1.75);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-10.000000) (8.000000) ) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-4.000000) (2.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( podzielic ( wartosc_od_do (5.000000) (5.000000) ) ( wartosc_dokladna (4.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (4.000000) (9.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( podzielic ( podzielic ( podzielic ( plus ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-6.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (2.000000) (0.000000) ) ( razy ( wartosc_od_do (-9.000000) (-7.000000) ) ( podzielic ( plus ( wartosc_od_do (-6.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ) (-5.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-10.000000) (1.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.000000) (7.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ;;
assert (a =. -3.08);;
let a = min_wartosc ( plus ( wartosc_od_do (-9.000000) (-6.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ;;
assert (a =. -1.08);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( razy ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ( wartosc_od_do (3.000000) (4.000000) ) ) ;;
assert (a =. 13.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-6.000000) (-6.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (5.000000) ) ) ) ;;
assert (a =. 16.8);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( minus ( razy ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) ( wartosc_dokladnosc (-10.000000) (2.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (6.000000) (3.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -43.26);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_od_do (-1.000000) (2.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ( minus ( plus ( wartosc_od_do (1.000000) (7.000000) ) ( minus ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (-8.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (7.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (5.000000) (7.000000) ) ( wartosc_od_do (-9.000000) (4.000000) ) ) ( wartosc_od_do (-6.000000) (3.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-10.000000) (8.000000) ) ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (4.000000) (6.000000) ) ) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ) ) ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ;;
assert (a =. -0.945555555555555483);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-1.000000) ) ( minus ( razy ( wartosc_dokladnosc (-3.000000) (1.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ) (-10.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( podzielic ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( podzielic ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_od_do (-6.000000) (1.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( minus ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( wartosc_dokladnosc (-4.000000) (1.000000) ) ) ) ;;
assert (a =. -3.96);;
let a = min_wartosc ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) ;;
assert (a =. 2.63999999999999968);;
let a = max_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( minus ( wartosc_dokladna (9.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( plus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-10.000000) (-1.000000) ) ( razy ( podzielic ( wartosc_od_do (-8.000000) (-6.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) ) ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 13.5);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-5.000000) (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( podzielic ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (9.000000) (6.000000) ) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( plus ( minus ( wartosc_dokladnosc (-10.000000) (7.000000) ) ( wartosc_dokladna (5.000000) ) ) ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( minus ( razy ( wartosc_dokladnosc (5.000000) (6.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( podzielic ( wartosc_od_do (5.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (-2.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 7.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (6.000000) (8.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ;;
assert (a =. -1.3425);;
let a = min_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-5.000000) (3.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (2.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. 0.8575);;
let a = min_wartosc ( razy ( wartosc_od_do (-2.000000) (-1.000000) ) ( minus ( wartosc_dokladnosc (-3.000000) (7.000000) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ) ;;
assert (a =. -6.42);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( plus ( podzielic ( razy ( wartosc_od_do (-3.000000) (6.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ( razy ( razy ( wartosc_od_do (3.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( podzielic ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( minus ( wartosc_od_do (-8.000000) (4.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ) ) ;;
assert (a =. -5.2);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (-7.000000) (9.000000) ) ) (-2.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( wartosc_dokladnosc (-3.000000) (6.000000) ) ) ) ;;
assert (a =. 3.54609929078014208);;
let a = in_wartosc ( podzielic ( plus ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-1.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (-6.000000) (4.000000) ) ) ( podzielic ( razy ( wartosc_dokladnosc (-9.000000) (9.000000) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ) ;;
assert (a =. -3.453875);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) ;;
assert (a =. 11.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-7.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ;;
assert (a =. 2.52403443540012695);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-7.000000) (4.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -14.2800000000000011);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( minus ( wartosc_dokladnosc (-2.000000) (3.000000) ) ( plus ( wartosc_od_do (0.000000) (4.000000) ) ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-7.000000) (2.000000) ) ) ) ) ) ;;
assert (a =. -32.4865889212827952);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (1.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-7.000000) (2.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -14.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( razy ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-5.000000) (2.000000) ) ( razy ( wartosc_od_do (-6.000000) (-4.000000) ) ( wartosc_od_do (-8.000000) (-6.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (-2.000000) (-2.000000) ) ( wartosc_dokladna (1.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (3.000000) (5.000000) ) ) ;;
assert (a =. 1.90476190476190466);;
let a = min_wartosc ( podzielic ( minus ( minus ( podzielic ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ( podzielic ( minus ( wartosc_od_do (7.000000) (9.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ( wartosc_od_do (-9.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-5.000000) (3.000000) ) ( wartosc_dokladna (2.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (-9.000000) (8.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) ;;
assert (a =. -5.5);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ) (-2.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 10.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-2.000000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ( plus ( wartosc_od_do (-10.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (-3.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-9.000000) (9.000000) ) ( wartosc_od_do (-6.000000) (3.000000) ) ) ( wartosc_dokladnosc (9.000000) (6.000000) ) ) ;;
assert (a =. -3.47872340425531901);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -5.30000000000000071);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (1.000000) ) ( plus ( razy ( podzielic ( wartosc_dokladnosc (-9.000000) (5.000000) ) ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (8.000000) (2.000000) ) ( razy ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-8.000000) (6.000000) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( plus ( razy ( wartosc_dokladnosc (-8.000000) (9.000000) ) ( razy ( wartosc_dokladnosc (5.000000) (4.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 130.032);;
let a = max_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 12.);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ( podzielic ( minus ( wartosc_dokladnosc (7.000000) (6.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_od_do (-8.000000) (3.000000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (6.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -30.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (1.000000) (4.000000) ) ) ;;
assert (a =. -20.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ;;
assert (a =. 6.);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (-9.000000) (-2.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( razy ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (3.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 1.66666666666666652);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( podzielic ( minus ( wartosc_od_do (-7.000000) (-5.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ( minus ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( wartosc_od_do (1.000000) (5.000000) ) ) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) ( wartosc_od_do (-5.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -15.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. 12.);;
let a = min_wartosc ( podzielic ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-7.000000) ) ) ( podzielic ( plus ( wartosc_dokladnosc (8.000000) (7.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ) ;;
assert (a =. -23.364485981308416);;
let a = in_wartosc ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (3.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_od_do (-8.000000) (-5.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( podzielic ( podzielic ( wartosc_dokladnosc (6.000000) (8.000000) ) ( wartosc_dokladnosc (6.000000) (4.000000) ) ) ( wartosc_od_do (-2.000000) (2.000000) ) ) ( razy ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (6.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -0.2);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_od_do (-9.000000) (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( wartosc_od_do (6.000000) (6.000000) ) ) ) (-1.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -7.57);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ( minus ( wartosc_dokladnosc (1.000000) (3.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) ) ;;
assert (a =. 21.09);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( razy ( minus ( wartosc_dokladnosc (-8.000000) (4.000000) ) ( minus ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( razy ( razy ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (-5.000000) (2.000000) ) ) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ( podzielic ( podzielic ( wartosc_od_do (-9.000000) (-8.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( razy ( podzielic ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ) ) ( wartosc_dokladnosc (-7.000000) (3.000000) ) ) ;;
assert (a =. -7.21);;
let a = in_wartosc ( plus ( wartosc_od_do (9.000000) (9.000000) ) ( wartosc_od_do (-8.000000) (-5.000000) ) ) (9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (-9.000000) (7.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( podzielic ( podzielic ( wartosc_dokladnosc (5.000000) (7.000000) ) ( wartosc_dokladnosc (3.000000) (8.000000) ) ) ( plus ( wartosc_od_do (-9.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( plus ( podzielic ( plus ( wartosc_dokladnosc (5.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ( wartosc_od_do (5.000000) (9.000000) ) ) ) ;;
assert (a =. 0.423011844331641296);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) (7.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-7.000000) (5.000000) ) ( razy ( minus ( wartosc_dokladnosc (1.000000) (1.000000) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ( wartosc_dokladnosc (4.000000) (8.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ;;
assert (a =. -4.85);;
let a = min_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -20.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ;;
assert (a =. 8.00080008000800191);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. -7.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ;;
assert (a =. -2.25);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (2.000000) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-7.000000) (-5.000000) ) ) (7.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_dokladna (-2.000000) ) ( minus ( wartosc_dokladna (-6.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( podzielic ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-4.000000) (8.000000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (2.000000) (4.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-7.000000) (3.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (5.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. -2.66666666666666652);;
let a = sr_wartosc ( minus ( wartosc_od_do (-5.000000) (-1.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ;;
assert (a =. -7.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) (8.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( razy ( wartosc_dokladna (7.000000) ) ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 24.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (7.000000) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( podzielic ( plus ( wartosc_od_do (-8.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( razy ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ) ( wartosc_dokladnosc (5.000000) (6.000000) ) ) ;;
assert (a =. -0.0800215829640908843);;
let a = min_wartosc ( plus ( wartosc_od_do (-5.000000) (-4.000000) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ;;
assert (a =. -15.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) ;;
assert (a =. -30.2999999999999972);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-8.000000) (4.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (2.000000) (2.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (-7.000000) (-4.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (3.000000) (4.000000) ) ( plus ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (8.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ) ( razy ( wartosc_dokladnosc (0.000000) (1.000000) ) ( razy ( wartosc_dokladnosc (-4.000000) (3.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 2.5);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.700000000000000067);;
let a = max_wartosc ( plus ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( plus ( minus ( wartosc_od_do (-7.000000) (4.000000) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ;;
assert (a =. -96.02);;
let a = in_wartosc ( minus ( razy ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_od_do (-7.000000) (7.000000) ) ) (4.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 56.4000000000000057);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (5.000000) (2.000000) ) ) ;;
assert (a =. 0.714285714285714191);;
let a = max_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -18.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (2.000000) (1.000000) ) ( wartosc_od_do (-9.000000) (4.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ) ;;
assert (a =. 1.33333333333333326);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (3.000000) ) ( wartosc_od_do (-7.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (9.000000) (1.000000) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (2.000000) (6.000000) ) ( minus ( wartosc_od_do (6.000000) (8.000000) ) ( wartosc_dokladnosc (-7.000000) (4.000000) ) ) ) ;;
assert (a =. -10.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 9.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( wartosc_od_do (-1.000000) (5.000000) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) (5.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (8.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. 8.32);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( wartosc_dokladnosc (1.000000) (3.000000) ) ) ;;
assert (a =. -7.5705);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 7.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-2.000000) (4.000000) ) ) ;;
assert (a =. -1.92);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( podzielic ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ( wartosc_dokladnosc (6.000000) (7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (2.000000) ) ( wartosc_dokladnosc (-6.000000) (7.000000) ) ) ;;
assert (a =. -0.335443674002612768);;
let a = min_wartosc ( plus ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (8.000000) (5.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. -1.125);;
let a = in_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (-9.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. -2.5);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladnosc (-3.000000) (4.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 4.23);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (7.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) (-1.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-4.000000) ) ( razy ( wartosc_dokladna (-8.000000) ) ( minus ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) ) ) ) ;;
assert (a =. -0.341227226075972667);;
let a = max_wartosc ( plus ( razy ( wartosc_dokladnosc (-7.000000) (8.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -35.1999999999999957);;
let a = min_wartosc ( razy ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ( wartosc_od_do (-3.000000) (-1.000000) ) ) ;;
assert (a =. -15.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -12.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -7.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-10.000000) (8.000000) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ;;
assert (a =. -17.8);;
let a = max_wartosc ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-5.000000) (-5.000000) ) ) ) ;;
assert (a =. 0.2);;
let a = min_wartosc ( minus ( wartosc_od_do (-1.000000) (3.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 9.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. -0.201555555555555543);;
let a = in_wartosc ( razy ( podzielic ( podzielic ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (4.000000) (8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (-8.000000) (2.000000) ) ) ;;
assert (a =. -32.64);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( razy ( podzielic ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-8.000000) (-3.000000) ) ) ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( wartosc_od_do (-2.000000) (8.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( plus ( wartosc_od_do (-6.000000) (-5.000000) ) ( wartosc_dokladnosc (-9.000000) (6.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -17.5);;
let a = sr_wartosc ( razy ( wartosc_od_do (-2.000000) (2.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (3.000000) (3.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (6.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. 1.20857142857142863);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-3.000000) (9.000000) ) ) ;;
assert (a =. -2.75229357798165131);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( minus ( wartosc_od_do (-7.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ) (4.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( razy ( wartosc_od_do (2.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (4.000000) (9.000000) ) ( wartosc_od_do (-4.000000) (7.000000) ) ) ;;
assert (a =. 2.5);;
let a = max_wartosc ( minus ( wartosc_od_do (1.000000) (8.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 3.);;
let a = min_wartosc ( razy ( razy ( wartosc_od_do (-6.000000) (4.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -8.);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. -10.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (3.000000) (2.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (2.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -5.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_od_do (-6.000000) (-3.000000) ) ( wartosc_od_do (-3.000000) (4.000000) ) ) ;;
assert (a =. -10.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (1.000000) (5.000000) ) ( minus ( wartosc_od_do (1.000000) (2.000000) ) ( wartosc_od_do (9.000000) (9.000000) ) ) ) ;;
assert (a =. -0.125);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. -3.5);;
let a = max_wartosc ( podzielic ( wartosc_od_do (9.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-1.000000) (2.000000) ) ( minus ( wartosc_od_do (-1.000000) (1.000000) ) ( wartosc_od_do (-4.000000) (6.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_od_do (3.000000) (7.000000) ) ) ;;
assert (a =. -0.238095238095238082);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (-7.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (4.000000) (7.000000) ) ( minus ( plus ( wartosc_od_do (1.000000) (5.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ) ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( wartosc_od_do (-8.000000) (3.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -9.);;
let a = max_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-10.000000) ) ( plus ( wartosc_dokladnosc (4.000000) (9.000000) ) ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ) (-3.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( podzielic ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-9.000000) (7.000000) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (2.000000) ) ( wartosc_dokladnosc (1.000000) (8.000000) ) ) ;;
assert (a =. -10.8695652173913047);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (-8.000000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -0.4);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 10.);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 9.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (-3.000000) (6.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. -8.5);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (3.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. -16.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (2.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( podzielic ( razy ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (8.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-10.000000) (-6.000000) ) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( podzielic ( wartosc_od_do (-4.000000) (6.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 11.);;
let a = min_wartosc ( minus ( wartosc_od_do (1.000000) (4.000000) ) ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( minus ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( minus ( wartosc_od_do (-7.000000) (1.000000) ) ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( minus ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (-4.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( minus ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (4.000000) (9.000000) ) ) ( wartosc_od_do (-7.000000) (3.000000) ) ) ;;
assert (a =. 7.);;
let a = max_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-8.000000) (9.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( minus ( plus ( minus ( wartosc_dokladna (8.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( minus ( wartosc_dokladna (-5.000000) ) ( minus ( podzielic ( minus ( wartosc_dokladnosc (8.000000) (9.000000) ) ( podzielic ( wartosc_dokladna (-9.000000) ) ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ) ( wartosc_od_do (-8.000000) (9.000000) ) ) ( plus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 28.);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (6.000000) ) ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. 7.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (9.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 9.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-1.000000) (-1.000000) ) ( minus ( razy ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_dokladnosc (-10.000000) (5.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. -0.0103092783505154637);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( wartosc_dokladnosc (6.000000) (5.000000) ) ) (-2.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ;;
assert (a =. 0.96);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-2.000000) (3.000000) ) ) ;;
assert (a =. 0.5);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) (1.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( razy ( razy ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ( wartosc_od_do (-10.000000) (-1.000000) ) ) ;;
assert (a =. 1200.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (4.000000) (2.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( plus ( plus ( podzielic ( wartosc_dokladnosc (-4.000000) (4.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) ) ) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladnosc (-3.000000) (2.000000) ) ) ;;
assert (a =. -0.510204081632653073);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. 1.33333333333333326);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) (7.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (1.000000) (2.000000) ) ) ;;
assert (a =. -10.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (6.000000) ) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) ;;
assert (a =. 1.12481203007518804);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (2.000000) (6.000000) ) ( wartosc_dokladnosc (-8.000000) (2.000000) ) ) ;;
assert (a =. -6.);;
let a = min_wartosc ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (3.000000) (9.000000) ) ) ;;
assert (a =. -13.27);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (9.000000) ) ( razy ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( wartosc_dokladnosc (-2.000000) (3.000000) ) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-7.000000) (-5.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-7.000000) (1.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( minus ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (7.000000) (8.000000) ) ) ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( razy ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( podzielic ( minus ( plus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-7.000000) (-6.000000) ) ) ) ( podzielic ( minus ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_od_do (-5.000000) (8.000000) ) ) ) ( wartosc_od_do (-9.000000) (1.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) ;;
assert (a =. 0.417777777777777748);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (-10.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ( wartosc_dokladna (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (-2.000000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (4.000000) ) ( wartosc_dokladna (3.000000) ) ) ) (-7.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (2.000000) (3.000000) ) ( wartosc_dokladnosc (-8.000000) (2.000000) ) ) ;;
assert (a =. -5.5);;
let a = max_wartosc ( razy ( wartosc_od_do (-1.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-7.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (8.000000) ) ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ) ;;
assert (a =. 5.43478260869565322);;
let a = in_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (7.000000) ) ) (-9.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ;;
assert (a =. -9.);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_dokladnosc (-9.000000) (9.000000) ) ) ( wartosc_dokladnosc (9.000000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-8.000000) (1.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (9.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_od_do (-1.000000) (5.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) ;;
assert (a =. 3.);;
let a = min_wartosc ( minus ( plus ( podzielic ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ( podzielic ( wartosc_od_do (-1.000000) (5.000000) ) ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 3.);;
let a = min_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( podzielic ( razy ( wartosc_od_do (-8.000000) (1.000000) ) ( wartosc_od_do (-5.000000) (-4.000000) ) ) ( plus ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. 4.5);;
let a = sr_wartosc ( minus ( wartosc_od_do (-9.000000) (-6.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 1.5);;
let a = min_wartosc ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -2.);;
let a = max_wartosc ( minus ( wartosc_od_do (7.000000) (8.000000) ) ( wartosc_od_do (-8.000000) (-5.000000) ) ) ;;
assert (a =. 16.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (7.000000) (7.000000) ) ) ;;
assert (a =. 1.07526881720430123);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (4.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) (7.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (9.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_od_do (-1.000000) (6.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 3.);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_od_do (-8.000000) (-2.000000) ) ( razy ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (5.000000) ) ( wartosc_dokladnosc (7.000000) (8.000000) ) ) (1.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-8.000000) (3.000000) ) ) ) (-8.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 72.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -0.25);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (4.000000) ) ( razy ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) (-6.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (-6.000000) ) ( minus ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ) ( wartosc_od_do (-6.000000) (-5.000000) ) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 4.5);;
let a = max_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( razy ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (3.000000) ) ) ( razy ( podzielic ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (-3.000000) ) ( wartosc_od_do (-1.000000) (8.000000) ) ) ) ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ) ) ;;
assert (a =. 56.8888888888888857);;
let a = min_wartosc ( minus ( wartosc_od_do (2.000000) (4.000000) ) ( wartosc_dokladnosc (-10.000000) (1.000000) ) ) ;;
assert (a =. 11.9);;
let a = min_wartosc ( razy ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( minus ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (-9.000000) (7.000000) ) ) ( wartosc_dokladnosc (9.000000) (7.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_dokladnosc (3.000000) (3.000000) ) ) ;;
assert (a =. -0.209999999999999964);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ;;
assert (a =. 6.91);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.66666666666666663);;
let a = in_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (9.000000) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (4.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ( podzielic ( wartosc_od_do (5.000000) (9.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) ) ;;
assert (a =. -4.33825746156165337);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (2.000000) (6.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 3.5);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) ;;
assert (a =. 15.);;
let a = max_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (3.000000) (1.000000) ) ) ;;
assert (a =. 1.0299999999999998);;
let a = min_wartosc ( plus ( podzielic ( minus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( minus ( wartosc_od_do (2.000000) (9.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ) ;;
assert (a =. 48.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (2.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-8.000000) (2.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (5.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( plus ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( wartosc_od_do (5.000000) (9.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.000000) (9.000000) ) ) ) ;;
assert (a =. -4.58715596330275233);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-2.000000) ) ) ;;
assert (a =. -2.);;
let a = sr_wartosc ( plus ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (1.000000) (4.000000) ) ) ( wartosc_od_do (-6.000000) (1.000000) ) ) ;;
assert (a =. -9.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (4.000000) ) ( razy ( wartosc_od_do (4.000000) (9.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-3.000000) (6.000000) ) ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( wartosc_od_do (-1.000000) (9.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ( podzielic ( wartosc_dokladnosc (-8.000000) (6.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ) ;;
assert (a =. 2.872);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( plus ( wartosc_od_do (2.000000) (8.000000) ) ( wartosc_od_do (5.000000) (9.000000) ) ) (7.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-8.000000) (-2.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( razy ( minus ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_dokladnosc (3.000000) (1.000000) ) ( wartosc_od_do (3.000000) (7.000000) ) ) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ) ;;
assert (a =. 2.05999999999999872);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-9.000000) (-6.000000) ) ) ;;
assert (a =. -0.5);;
let a = in_wartosc ( podzielic ( minus ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( razy ( wartosc_dokladnosc (7.000000) (2.000000) ) ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( razy ( wartosc_dokladnosc (5.000000) (6.000000) ) ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( plus ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ) ) ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (-3.000000) (8.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_od_do (-7.000000) (-1.000000) ) ) ;;
assert (a =. -5.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (6.000000) ) ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (8.000000) ) ( wartosc_od_do (-10.000000) (-1.000000) ) ) ;;
assert (a =. -8.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (7.000000) (8.000000) ) ( minus ( wartosc_dokladna (6.000000) ) ( razy ( minus ( wartosc_dokladna (-2.000000) ) ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ( wartosc_od_do (-4.000000) (1.000000) ) ) ) ) (2.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_od_do (-3.000000) (-1.000000) ) ( razy ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-3.000000) (4.000000) ) ) ( podzielic ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (3.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-2.000000) (2.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 5.5);;
let a = sr_wartosc ( plus ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (6.000000) (3.000000) ) ) ( wartosc_od_do (-9.000000) (4.000000) ) ) ;;
assert (a =. -2.5);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (6.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-9.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (5.000000) ) ( wartosc_dokladnosc (9.000000) (9.000000) ) ) ) ( wartosc_od_do (-10.000000) (-8.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( razy ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (8.000000) ) ( plus ( wartosc_od_do (-10.000000) (-7.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -8.);;
let a = in_wartosc ( plus ( wartosc_od_do (-6.000000) (9.000000) ) ( wartosc_od_do (-6.000000) (6.000000) ) ) (7.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (-6.000000) (6.000000) ) ) ;;
assert (a =. 10.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ;;
assert (a =. 1.27884615384615374);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (4.000000) (0.000000) ) ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-4.000000) (8.000000) ) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-7.000000) (1.000000) ) ) ) ;;
assert (a =. 3.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( plus ( razy ( wartosc_dokladna (-8.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_dokladna (7.000000) ) ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-6.000000) (5.000000) ) ) ) ) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (6.000000) (6.000000) ) ) ;;
assert (a =. -1.66666666666666652);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ;;
assert (a =. -0.490196078431372528);;
let a = sr_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 9.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( podzielic ( wartosc_dokladnosc (3.000000) (8.000000) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( plus ( wartosc_dokladna (2.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) ) ) ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ;;
assert (a =. -5.55922836287799882);;
let a = max_wartosc ( plus ( wartosc_od_do (4.000000) (5.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -2.);;
let a = sr_wartosc ( podzielic ( podzielic ( plus ( minus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( razy ( wartosc_od_do (-3.000000) (6.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (4.000000) (7.000000) ) ) ;;
assert (a =. -5.28);;
let a = in_wartosc ( plus ( wartosc_od_do (-3.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) (-1.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (-8.000000) (-7.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_od_do (1.000000) (5.000000) ) ) ;;
assert (a =. 2.0625);;
let a = min_wartosc ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (4.000000) ) ) ( wartosc_dokladnosc (6.000000) (3.000000) ) ) ;;
assert (a =. -24.72);;
let a = sr_wartosc ( razy ( minus ( wartosc_od_do (-4.000000) (9.000000) ) ( minus ( minus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (8.000000) ) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ) ( wartosc_dokladnosc (-9.000000) (8.000000) ) ) ;;
assert (a =. -111.11760000000001);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 40.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 1.66666666666666652);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (1.000000) (1.000000) ) ) ;;
assert (a =. 5.05);;
let a = min_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (-4.000000) (-3.000000) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (7.000000) ) ( razy ( wartosc_od_do (-9.000000) (-5.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ) ;;
assert (a =. 0.253866666666666685);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (7.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ;;
assert (a =. -3.42);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( minus ( wartosc_dokladnosc (-8.000000) (3.000000) ) ( wartosc_od_do (-10.000000) (-3.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_od_do (3.000000) (9.000000) ) ) (7.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) (-2.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-8.000000) (-7.000000) ) ) ) ( wartosc_dokladnosc (-1.000000) (4.000000) ) ) ;;
assert (a =. 163.04);;
let a = max_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( podzielic ( podzielic ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( plus ( wartosc_dokladnosc (2.000000) (7.000000) ) ( wartosc_od_do (-5.000000) (8.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_dokladna (-8.000000) ) ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (4.000000) (8.000000) ) ) ) ;;
assert (a =. 26.5600000000000023);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.111111111111111105);;
let a = min_wartosc ( razy ( wartosc_od_do (-5.000000) (1.000000) ) ( wartosc_od_do (-10.000000) (7.000000) ) ) ;;
assert (a =. -35.);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ( wartosc_od_do (-6.000000) (5.000000) ) ) ;;
assert (a =. 5.80000000000000071);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (5.000000) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ;;
assert (a =. -1.25);;
let a = max_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-4.000000) (1.000000) ) ) ;;
assert (a =. 8.04);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-5.000000) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ) ( wartosc_dokladnosc (-7.000000) (9.000000) ) ) ;;
assert (a =. -0.823733465560838818);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (9.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( plus ( podzielic ( podzielic ( plus ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( minus ( minus ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ( wartosc_dokladnosc (3.000000) (4.000000) ) ) ) ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (-6.000000) (5.000000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) (1.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (2.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( razy ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (4.000000) (7.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_od_do (2.000000) (7.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (7.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. 0.0617283950617283916);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (9.000000) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) (-8.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. -5.);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-4.000000) (6.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_od_do (-8.000000) (9.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( podzielic ( podzielic ( wartosc_od_do (-9.000000) (7.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (4.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ) ;;
assert (a =. -18.5833333333333357);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( podzielic ( podzielic ( minus ( plus ( podzielic ( podzielic ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( wartosc_od_do (4.000000) (9.000000) ) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ( podzielic ( plus ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ) ( minus ( wartosc_dokladnosc (-6.000000) (6.000000) ) ( wartosc_od_do (4.000000) (6.000000) ) ) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( razy ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ( wartosc_od_do (-6.000000) (-4.000000) ) ) ( plus ( wartosc_od_do (-6.000000) (5.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ) ;;
assert (a =. 6.07);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) (-1.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -7.35999999999999943);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (-2.000000) ) ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-3.000000) ) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-7.000000) (-4.000000) ) ( plus ( plus ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (8.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( plus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-10.000000) (6.000000) ) ) ;;
assert (a =. -0.957446808510638347);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (6.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (8.000000) (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (9.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (9.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ) ;;
assert (a =. -17.64);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (-10.000000) ) ) (1.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-4.000000) (8.000000) ) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-8.000000) (2.000000) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (6.000000) ) ( plus ( wartosc_dokladnosc (3.000000) (5.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( razy ( razy ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ) ) ) ( wartosc_od_do (-4.000000) (-4.000000) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (7.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -0.650000000000000355);;
let a = max_wartosc ( minus ( wartosc_od_do (1.000000) (2.000000) ) ( minus ( wartosc_dokladna (-4.000000) ) ( podzielic ( minus ( podzielic ( wartosc_dokladnosc (6.000000) (0.000000) ) ( razy ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (4.000000) (9.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ) (-8.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.700000000000000067);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (8.000000) ) ) (2.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ;;
assert (a =. 1.575);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ( minus ( plus ( podzielic ( wartosc_od_do (-8.000000) (3.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( razy ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (-4.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ;;
assert (a =. -9.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( plus ( wartosc_od_do (-5.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (-8.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( plus ( wartosc_dokladnosc (-8.000000) (8.000000) ) ( wartosc_dokladna (8.000000) ) ) ) (-4.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (5.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-7.000000) (1.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (-7.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( plus ( wartosc_od_do (8.000000) (9.000000) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ;;
assert (a =. 20.);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladnosc (6.000000) (1.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (-10.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-8.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_od_do (-9.000000) (-6.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( razy ( podzielic ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (5.000000) ) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_od_do (-9.000000) (-4.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( podzielic ( razy ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ) ( plus ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( wartosc_od_do (5.000000) (7.000000) ) ) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. -6.59656250000000099);;
let a = in_wartosc ( podzielic ( plus ( podzielic ( plus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-10.000000) (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (2.000000) ) ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ) ;;
assert (a =. 1.6333333333333333);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (5.000000) (4.000000) ) ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (7.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ) ) ;;
assert (a =. 4.8);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (5.000000) (9.000000) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (3.000000) (8.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( plus ( podzielic ( minus ( wartosc_od_do (1.000000) (4.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ;;
assert (a =. 7.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_dokladnosc (-4.000000) (8.000000) ) ) ;;
assert (a =. -2.01449275362318847);;
let a = min_wartosc ( plus ( wartosc_od_do (-5.000000) (-2.000000) ) ( plus ( razy ( razy ( wartosc_od_do (-8.000000) (7.000000) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ;;
assert (a =. -138.52);;
let a = min_wartosc ( plus ( minus ( wartosc_dokladnosc (-3.000000) (7.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (9.000000) (6.000000) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (2.000000) (4.000000) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( plus ( wartosc_od_do (6.000000) (9.000000) ) ( wartosc_dokladna (3.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (6.000000) (8.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -40.);;
let a = min_wartosc ( razy ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ;;
assert (a =. 6.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) (2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-5.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (6.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 21.);;
let a = min_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = min_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (8.000000) (4.000000) ) ) ;;
assert (a =. -0.320000000000000284);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-7.000000) (1.000000) ) ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (4.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( minus ( wartosc_od_do (-1.000000) (8.000000) ) ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) ) ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( minus ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_od_do (-10.000000) (-1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (8.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 0.46);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (7.000000) ) ( plus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (7.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( minus ( wartosc_od_do (-8.000000) (0.000000) ) ( podzielic ( plus ( podzielic ( wartosc_dokladna (7.000000) ) ( minus ( razy ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) ( razy ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 45.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-3.000000) (1.000000) ) ( plus ( wartosc_od_do (-6.000000) (-2.000000) ) ( minus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ) ;;
assert (a =. -3.03);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 0.166666666666666657);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) ;;
assert (a =. -2.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( podzielic ( wartosc_od_do (-1.000000) (5.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 5.5);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (2.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-4.000000) (-1.000000) ) ) ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -9.);;
let a = in_wartosc ( razy ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (6.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_od_do (2.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 6.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-3.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ;;
assert (a =. 7.);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (3.000000) (6.000000) ) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ;;
assert (a =. 2.01);;
let a = sr_wartosc ( razy ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. -30.);;
let a = min_wartosc ( minus ( wartosc_od_do (8.000000) (9.000000) ) ( wartosc_od_do (-8.000000) (-1.000000) ) ) ;;
assert (a =. 9.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) ) ;;
assert (a =. -3.5);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (2.000000) ) ( wartosc_dokladna (7.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ;;
assert (a =. -17.72);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (4.000000) (5.000000) ) ) (2.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( minus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (1.000000) ) ) ) (-2.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (3.000000) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-10.000000) (-1.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -3.48936170212765973);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (6.000000) (8.000000) ) ) ;;
assert (a =. -0.25);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-6.000000) (8.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ( minus ( razy ( wartosc_dokladnosc (-2.000000) (3.000000) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) ( podzielic ( wartosc_od_do (-9.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-7.000000) (-4.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 1.42857142857142838);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a =. 3.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (1.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -0.1);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (7.000000) ) ( wartosc_dokladnosc (-6.000000) (9.000000) ) ) ;;
assert (a =. 0.568807339449541205);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (5.000000) (2.000000) ) ( wartosc_dokladnosc (-10.000000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.000000) (8.000000) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ;;
assert (a =. -0.432900432900432952);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ( wartosc_od_do (1.000000) (6.000000) ) ) ;;
assert (a =. -2.66666666666666652);;
let a = in_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) (8.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. 2.71999999999999975);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (5.000000) (2.000000) ) ( wartosc_dokladnosc (-6.000000) (8.000000) ) ) ;;
assert (a =. 11.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( minus ( wartosc_dokladnosc (-2.000000) (2.000000) ) ( podzielic ( minus ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (-1.000000) (7.000000) ) ( plus ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ;;
assert (a =. 19.);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) ;;
assert (a =. 13.120000000000001);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (3.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_od_do (-9.000000) (8.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 10.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-7.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-3.000000) (7.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (2.000000) ) ) ) (-6.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 31.5);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (7.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ;;
assert (a =. -14.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (-7.000000) ) ) ( razy ( wartosc_od_do (-4.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (1.000000) (4.000000) ) ( wartosc_od_do (2.000000) (9.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( minus ( minus ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (3.000000) ) ) ( podzielic ( wartosc_od_do (5.000000) (8.000000) ) ( wartosc_dokladnosc (-6.000000) (8.000000) ) ) ) ( wartosc_od_do (-3.000000) (4.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 9.);;
let a = max_wartosc ( minus ( wartosc_od_do (9.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( plus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) (5.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (1.000000) (7.000000) ) ( wartosc_dokladnosc (7.000000) (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. 1.0309278350515465);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (8.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( minus ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( minus ( minus ( razy ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( minus ( wartosc_dokladnosc (8.000000) (7.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (2.000000) (4.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ( plus ( wartosc_dokladna (3.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (3.000000) (3.000000) ) ) ) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (8.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) (2.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( razy ( wartosc_dokladnosc (2.000000) (5.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. -17.2999999999999972);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( podzielic ( razy ( wartosc_dokladnosc (-6.000000) (7.000000) ) ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) ( wartosc_dokladnosc (-3.000000) (9.000000) ) ) (-1.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (8.000000) (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (7.000000) (1.000000) ) ( wartosc_dokladna (-7.000000) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (1.000000) ) ( plus ( razy ( wartosc_dokladnosc (-8.000000) (1.000000) ) ( wartosc_dokladnosc (-3.000000) (2.000000) ) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) ) ) ;;
assert (a =. 6.92999551971326166);;
let a = in_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-5.000000) (4.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ( wartosc_od_do (1.000000) (8.000000) ) ) ;;
assert (a =. -8.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (1.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (-7.000000) (-6.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.470430107526881747);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( minus ( wartosc_od_do (-10.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( plus ( wartosc_od_do (-5.000000) (1.000000) ) ( wartosc_dokladnosc (3.000000) (4.000000) ) ) ( wartosc_od_do (1.000000) (3.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (-5.000000) (8.000000) ) ( razy ( wartosc_od_do (1.000000) (8.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ;;
assert (a =. -16.5);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (8.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (-9.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( podzielic ( razy ( plus ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (5.000000) ) ( wartosc_dokladnosc (7.000000) (5.000000) ) ) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( plus ( wartosc_od_do (-9.000000) (-9.000000) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (8.000000) ) ( wartosc_dokladnosc (-6.000000) (3.000000) ) ) ) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (1.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-8.000000) (-8.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (8.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert (a =. 0.75);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-8.000000) (1.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (9.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-3.000000) (4.000000) ) ) ) ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (4.000000) ) ( wartosc_dokladnosc (-6.000000) (9.000000) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -0.285714285714285698);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-6.000000) (-1.000000) ) ) ;;
assert (a =. -1.16666666666666652);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( razy ( minus ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (1.000000) ) ( wartosc_dokladna (3.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (5.000000) (1.000000) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ;;
assert (a =. 14.77);;
let a = in_wartosc ( minus ( wartosc_od_do (-8.000000) (8.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) (6.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( podzielic ( podzielic ( wartosc_od_do (7.000000) (9.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_dokladnosc (1.000000) (5.000000) ) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ;;
assert (a =. 10.2450980392156854);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( podzielic ( plus ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (1.000000) (8.000000) ) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ( wartosc_od_do (-4.000000) (-1.000000) ) ) ;;
assert (a =. 4.58152173913043459);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (1.000000) (4.000000) ) ( podzielic ( wartosc_od_do (-2.000000) (-1.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (1.000000) ) ( minus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -0.166666666666666657);;
let a = sr_wartosc ( plus ( wartosc_od_do (-3.000000) (7.000000) ) ( minus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (2.000000) ) ( plus ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ) ) ;;
assert (a =. 3.05825242718446599);;
let a = sr_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. 31.5);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -1.66666666666666652);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 24.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-6.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_od_do (-3.000000) (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 3.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (1.000000) (7.000000) ) ( minus ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-5.000000) (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( podzielic ( podzielic ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ( wartosc_dokladnosc (-3.000000) (1.000000) ) ) ( wartosc_od_do (-2.000000) (7.000000) ) ) ) ;;
assert (a =. -6.52080344332855066);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( plus ( razy ( wartosc_od_do (-5.000000) (8.000000) ) ( razy ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_od_do (-5.000000) (1.000000) ) ) ) ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( plus ( razy ( wartosc_dokladnosc (-10.000000) (3.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( minus ( minus ( wartosc_od_do (-9.000000) (9.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-4.000000) (5.000000) ) ) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. -2.3041353383458647);;
let a = in_wartosc ( plus ( razy ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (8.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ) ( wartosc_od_do (-5.000000) (4.000000) ) ) (-4.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_od_do (-10.000000) (-1.000000) ) ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-7.000000) (-1.000000) ) ) ) ;;
assert (a =. -9.);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( razy ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (4.000000) (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( minus ( wartosc_od_do (3.000000) (5.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (6.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (1.000000) ) ( wartosc_dokladna (-8.000000) ) ) (-4.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (4.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_od_do (-7.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (-7.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_od_do (-5.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-4.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( plus ( wartosc_od_do (-9.000000) (8.000000) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) ( razy ( podzielic ( podzielic ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (1.000000) (6.000000) ) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ( wartosc_dokladnosc (-7.000000) (2.000000) ) ) ) ;;
assert (a =. -5.9116981132075459);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ( razy ( podzielic ( wartosc_dokladnosc (6.000000) (2.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -18.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( minus ( razy ( wartosc_od_do (-3.000000) (3.000000) ) ( podzielic ( wartosc_od_do (4.000000) (8.000000) ) ( razy ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (4.000000) ) ) ) ) ( wartosc_dokladna (8.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (5.000000) (8.000000) ) ( wartosc_od_do (-2.000000) (2.000000) ) ) ;;
assert (a =. 6.5);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -0.700000000000000067);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-8.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladnosc (4.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-7.000000) (9.000000) ) ) ;;
assert (a =. 4.35999999999999943);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_od_do (3.000000) (9.000000) ) ) (-5.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-9.000000) (7.000000) ) ) ;;
assert (a =. 15.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_od_do (-1.000000) (2.000000) ) ) ;;
assert (a =. 7.5);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. 4.5);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. -2.66666666666666652);;
let a = min_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (4.000000) ) ( minus ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( razy ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ) ;;
assert (a =. 0.0931677018633540466);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (7.000000) ) ) ( razy ( podzielic ( wartosc_od_do (-6.000000) (7.000000) ) ( minus ( wartosc_od_do (-8.000000) (-2.000000) ) ( wartosc_od_do (-6.000000) (-5.000000) ) ) ) ( wartosc_od_do (-7.000000) (-6.000000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( plus ( plus ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (4.000000) ) ( wartosc_dokladnosc (5.000000) (5.000000) ) ) ;;
assert (a =. 0.84210526315789469);;
let a = max_wartosc ( razy ( minus ( wartosc_od_do (-2.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ( razy ( wartosc_od_do (-7.000000) (4.000000) ) ( wartosc_od_do (-3.000000) (5.000000) ) ) ) ;;
assert (a =. 70.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_dokladna (8.000000) ) ) (5.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( razy ( wartosc_od_do (-7.000000) (-1.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( minus ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( razy ( wartosc_dokladnosc (-3.000000) (8.000000) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (-5.000000) (4.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -3.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( plus ( minus ( podzielic ( wartosc_od_do (-9.000000) (-2.000000) ) ( wartosc_od_do (7.000000) (8.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) ( razy ( wartosc_dokladnosc (3.000000) (2.000000) ) ( razy ( wartosc_od_do (-7.000000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (5.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ) ) (-4.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (-7.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-5.000000) (2.000000) ) ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ( minus ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ( plus ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 30.);;
let a = max_wartosc ( podzielic ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( razy ( plus ( wartosc_od_do (6.000000) (6.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ( wartosc_dokladnosc (-7.000000) (8.000000) ) ) ;;
assert (a =. 1.24223602484472062);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-6.000000) (6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (2.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (4.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -28.);;
let a = in_wartosc ( minus ( wartosc_od_do (-8.000000) (-1.000000) ) ( razy ( podzielic ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (8.000000) ) ( wartosc_dokladnosc (-4.000000) (8.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) (-3.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-8.000000) (-5.000000) ) ) ) ) ;;
assert (a =. -18.);;
let a = max_wartosc ( minus ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (3.000000) (3.000000) ) ) ) ;;
assert (a =. -5.7);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (-10.000000) (4.000000) ) ) ;;
assert (a =. 10.);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( minus ( podzielic ( wartosc_od_do (-10.000000) (-4.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( plus ( minus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ) ;;
assert (a =. -0.5);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-1.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( minus ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (-5.000000) (7.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (-5.000000) (5.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ) ( wartosc_dokladna (1.000000) ) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( plus ( minus ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ( wartosc_dokladnosc (-4.000000) (7.000000) ) ) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-8.000000) (4.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (6.000000) (7.000000) ) ( razy ( wartosc_od_do (-7.000000) (5.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (5.000000) (9.000000) ) ( razy ( razy ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (-9.000000) (-1.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (2.000000) ) ) ) ) ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ) ;;
assert (a =. 4.55);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -5.);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-4.000000) (-1.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (-7.000000) (-5.000000) ) ) ;;
assert (a =. -0.34285714285714286);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-8.000000) (-1.000000) ) ) ;;
assert (a =. 5.0625);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (5.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -0.66666666666666663);;
let a = min_wartosc ( podzielic ( razy ( wartosc_od_do (1.000000) (2.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) ;;
assert (a =. -0.340136054421768697);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ;;
assert (a =. 9.);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (3.000000) ) ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (1.000000) ) ) (-1.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ;;
assert (a =. 48.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -1.75);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (2.000000) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ;;
assert (a =. 1.09890109890109877);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (4.000000) (9.000000) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -0.20761904761904762);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( plus ( wartosc_od_do (-8.000000) (-2.000000) ) ( wartosc_dokladnosc (3.000000) (2.000000) ) ) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-3.000000) (6.000000) ) ) ) (3.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. 0.970000000000000195);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (7.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-4.000000) (-4.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -0.66666666666666663);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (-6.000000) (2.000000) ) ) ) ;;
assert (a =. 8.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-7.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-8.000000) (-1.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_od_do (-8.000000) (-5.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-6.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-3.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) (-2.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (3.000000) (7.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 10.);;
let a = max_wartosc ( razy ( wartosc_od_do (-3.000000) (4.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_dokladnosc (-3.000000) (9.000000) ) ) ( wartosc_od_do (1.000000) (5.000000) ) ) ;;
assert (a =. 22.027);;
let a = sr_wartosc ( plus ( wartosc_od_do (8.000000) (9.000000) ) ( podzielic ( plus ( minus ( wartosc_od_do (3.000000) (7.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. 8.75);;
let a = max_wartosc ( minus ( podzielic ( wartosc_od_do (-10.000000) (-10.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. 1.11111111111111116);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (-1.000000) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-2.000000) (-2.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladnosc (9.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. -1.8);;
let a = min_wartosc ( razy ( wartosc_dokladna (-2.000000) ) ( minus ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( podzielic ( minus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (5.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ) ( minus ( podzielic ( podzielic ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (4.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( minus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) (1.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-7.000000) (9.000000) ) ) ;;
assert (a =. -9.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. 0.214285714285714302);;
let a = sr_wartosc ( minus ( minus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ) ( wartosc_od_do (-5.000000) (4.000000) ) ) ;;
assert (a =. -13.405);;
let a = max_wartosc ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-4.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-1.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (-1.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (-9.000000) (9.000000) ) ) ;;
assert (a =. 0.0113263110205006224);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-5.000000) ) ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-9.000000) (1.000000) ) ) ) ;;
assert (a =. -90.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (3.000000) (4.000000) ) ( minus ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ) ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ) ) ;;
assert (a =. 1.68027690963470766);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ( razy ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. -9.36231884057971);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -6.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( razy ( razy ( wartosc_dokladnosc (3.000000) (8.000000) ) ( razy ( podzielic ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ) ( wartosc_dokladna (1.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( minus ( plus ( minus ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ( plus ( podzielic ( wartosc_dokladnosc (9.000000) (2.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( plus ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( plus ( wartosc_od_do (6.000000) (6.000000) ) ( plus ( wartosc_dokladna (6.000000) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -7.);;
let a = min_wartosc ( minus ( plus ( wartosc_od_do (-10.000000) (-2.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ;;
assert (a =. -6.42);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (-8.000000) (-1.000000) ) ) ( razy ( wartosc_dokladnosc (9.000000) (2.000000) ) ( wartosc_dokladnosc (-9.000000) (4.000000) ) ) ) ;;
assert (a =. 0.104980263710422433);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) (8.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (4.000000) ) ) ;;
assert (a =. -15.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (1.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-2.000000) (9.000000) ) ( razy ( wartosc_od_do (-4.000000) (9.000000) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ) (1.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ;;
assert (a =. -12.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladnosc (8.000000) (1.000000) ) ( plus ( wartosc_dokladna (-3.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (1.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ) ( wartosc_dokladna (-7.000000) ) ) (-8.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ( minus ( plus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ;;
assert (a =. 0.0386847195357833684);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (-2.000000) (4.000000) ) ) ) ;;
assert (a =. 3.92);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-5.000000) (9.000000) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( plus ( razy ( razy ( wartosc_od_do (-2.000000) (5.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( razy ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ) ) ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (3.000000) ) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (6.000000) ) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (1.000000) (5.000000) ) ( minus ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (-9.000000) (-4.000000) ) ( wartosc_dokladna (4.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( plus ( wartosc_dokladna (-10.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (6.000000) (9.000000) ) ) ) ) ;;
assert (a =. 11.5);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (5.000000) (5.000000) ) ( wartosc_dokladnosc (-3.000000) (8.000000) ) ) (1.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -14.4);;
let a = max_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-10.000000) (4.000000) ) ) ;;
assert (a =. 19.);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (1.000000) (1.000000) ) ( wartosc_od_do (-8.000000) (8.000000) ) ) ;;
assert (a =. -7.01);;
let a = min_wartosc ( plus ( wartosc_od_do (-8.000000) (-5.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. -3.);;
let a = min_wartosc ( plus ( podzielic ( wartosc_od_do (-6.000000) (8.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ( wartosc_dokladnosc (5.000000) (9.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) ( podzielic ( wartosc_od_do (-7.000000) (-5.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -19.5);;
let a = max_wartosc ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 6.);;
let a = max_wartosc ( podzielic ( plus ( minus ( minus ( wartosc_dokladnosc (6.000000) (8.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( podzielic ( wartosc_od_do (4.000000) (5.000000) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (4.000000) ) ( wartosc_dokladna (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (-9.000000) (-1.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( podzielic ( plus ( wartosc_dokladnosc (-5.000000) (5.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ( razy ( podzielic ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ) ) ( podzielic ( podzielic ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-7.000000) (6.000000) ) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (6.000000) ) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) ;;
assert (a =. 8.);;
let a = max_wartosc ( minus ( wartosc_od_do (5.000000) (9.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. 17.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) (2.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-7.000000) (5.000000) ) ( razy ( wartosc_dokladnosc (4.000000) (2.000000) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladnosc (1.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-5.000000) (1.000000) ) ) ;;
assert (a =. -5.004);;
let a = sr_wartosc ( plus ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( razy ( wartosc_od_do (4.000000) (9.000000) ) ( wartosc_dokladnosc (7.000000) (5.000000) ) ) ) ;;
assert (a =. 46.375);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladnosc (3.000000) (8.000000) ) ( wartosc_od_do (-9.000000) (6.000000) ) ) ( razy ( wartosc_od_do (-9.000000) (5.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ) ;;
assert (a =. -84.24);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (8.000000) (0.000000) ) ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ) ;;
assert (a =. 17.5);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) (-3.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (0.000000) ) ( podzielic ( plus ( wartosc_dokladna (8.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ;;
assert (a =. -13.15);;
let a = sr_wartosc ( plus ( razy ( minus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_od_do (2.000000) (6.000000) ) ) ( wartosc_dokladnosc (-3.000000) (9.000000) ) ) ;;
assert (a =. -27.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (-1.000000) (5.000000) ) ) ;;
assert (a =. -3.15789473684210531);;
let a = min_wartosc ( plus ( wartosc_od_do (2.000000) (6.000000) ) ( podzielic ( minus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_dokladnosc (1.000000) (3.000000) ) ) ) ;;
assert (a =. -0.0618556701030930078);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -12.);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (-5.000000) (7.000000) ) ) ) ) ( plus ( wartosc_dokladna (-3.000000) ) ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) (-1.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (4.000000) (7.000000) ) ( minus ( razy ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-4.000000) ) ( wartosc_dokladnosc (-5.000000) (9.000000) ) ) ;;
assert (a =. 1.53846153846153832);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( wartosc_dokladnosc (-8.000000) (6.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-5.000000) (6.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ;;
assert (a =. -11.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -1.125);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ) ;;
assert (a =. 1.29411764705882359);;
let a = sr_wartosc ( plus ( razy ( wartosc_od_do (-9.000000) (8.000000) ) ( wartosc_dokladna (1.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-1.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -0.125);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ;;
assert (a =. -2.52525252525252553);;
let a = sr_wartosc ( razy ( plus ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( wartosc_dokladnosc (-2.000000) (4.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (8.000000) ) ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (6.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (8.000000) ) ( wartosc_od_do (4.000000) (5.000000) ) ) ;;
assert (a =. -1.62);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.000000) (6.000000) ) ( wartosc_od_do (-7.000000) (-3.000000) ) ) (-2.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (-10.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert (a =. -4.5);;
let a = sr_wartosc ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( razy ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_od_do (-1.000000) (2.000000) ) ) ;;
assert (a =. 14.);;
let a = max_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( minus ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -27.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ) ;;
assert (a =. -0.5);;
let a = max_wartosc ( razy ( wartosc_od_do (-3.000000) (5.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 25.);;
let a = max_wartosc ( minus ( wartosc_od_do (-4.000000) (-1.000000) ) ( wartosc_od_do (3.000000) (7.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.253292806484295807);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-8.000000) (4.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -8.32);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (5.000000) (4.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 25.);;
let a = max_wartosc ( plus ( plus ( wartosc_dokladnosc (3.000000) (3.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 1.08999999999999986);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (1.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ;;
assert (a =. 6.52173913043478226);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-8.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-4.000000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( razy ( wartosc_dokladnosc (1.000000) (4.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a =. 0.500801282051282);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( podzielic ( wartosc_od_do (5.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-1.000000) (6.000000) ) ( wartosc_od_do (-7.000000) (9.000000) ) ) ;;
assert (a =. 1.5);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (4.000000) ) ( razy ( wartosc_od_do (2.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (7.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (2.000000) ) ) ;;
assert (a =. 3.06);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) ;;
assert (a =. 2.34375);;
let a = max_wartosc ( razy ( wartosc_od_do (-10.000000) (6.000000) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ) ;;
assert (a =. 10.6382978723404253);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (5.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -68.4);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (3.000000) (8.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 5.24);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (6.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 5.82);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 0.285714285714285698);;
let a = max_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ;;
assert (a =. -8.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-6.000000) ) ( minus ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-6.000000) (7.000000) ) ) ( plus ( wartosc_dokladnosc (1.000000) (1.000000) ) ( wartosc_od_do (-7.000000) (-2.000000) ) ) ) ) ) ;;
assert (a =. 2.57571428571428385);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (5.000000) (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) ) ) ) ( wartosc_dokladnosc (-10.000000) (1.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_od_do (-9.000000) (-4.000000) ) ( wartosc_dokladnosc (-3.000000) (1.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( razy ( wartosc_od_do (-9.000000) (-3.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ( minus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (2.000000) (7.000000) ) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) (9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (3.000000) ) ) ( wartosc_dokladnosc (-2.000000) (1.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.224444444444444446);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (-2.000000) (8.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( podzielic ( wartosc_dokladna (7.000000) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( wartosc_od_do (-8.000000) (-6.000000) ) ) ;;
assert (a =. 1.23666666666666658);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-7.000000) ) ( minus ( wartosc_dokladnosc (1.000000) (1.000000) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ) ;;
assert (a =. -1.40280561122244474);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_od_do (-4.000000) (7.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( razy ( wartosc_od_do (-3.000000) (-1.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (-10.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. -90.);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (-6.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ( razy ( wartosc_od_do (-4.000000) (7.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ) ( wartosc_od_do (-4.000000) (6.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (7.000000) (7.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (-5.000000) (8.000000) ) ) ) ) (-1.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.000000) (4.000000) ) ( wartosc_dokladna (8.000000) ) ) (-2.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-6.000000) (-2.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -6.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (2.000000) (4.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_od_do (5.000000) (6.000000) ) ) ) ;;
assert (a =. 11.04);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-5.000000) (6.000000) ) ( wartosc_od_do (1.000000) (2.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (8.000000) (9.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-10.000000) (4.000000) ) ) ( podzielic ( wartosc_dokladnosc (8.000000) (7.000000) ) ( minus ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( podzielic ( wartosc_od_do (-7.000000) (2.000000) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-6.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ;;
assert (a =. -1.26262626262626276);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (-6.000000) (9.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( minus ( razy ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( wartosc_dokladnosc (-2.000000) (3.000000) ) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) (8.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) (1.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. -1.5);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (4.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ;;
assert (a =. 0.52083333333333337);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (6.000000) (6.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 45.12);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-5.000000) (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. -9.);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-10.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( minus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (8.000000) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) ) ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (-8.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-3.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -0.857142857142857095);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ;;
assert (a =. -0.612244897959183576);;
let a = max_wartosc ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. 12.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (1.000000) (5.000000) ) ( wartosc_dokladnosc (-2.000000) (3.000000) ) ) ;;
assert (a =. -1.06);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( podzielic ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ( wartosc_dokladnosc (1.000000) (9.000000) ) ) ) ;;
assert (a =. -6.29670329670329654);;
let a = in_wartosc ( podzielic ( wartosc_od_do (3.000000) (5.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (-8.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( razy ( wartosc_od_do (-8.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( razy ( plus ( wartosc_dokladnosc (7.000000) (5.000000) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) ( wartosc_dokladnosc (-3.000000) (6.000000) ) ) ) ) ( razy ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( razy ( wartosc_od_do (-7.000000) (2.000000) ) ( plus ( razy ( wartosc_od_do (-8.000000) (-1.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.44444444444444442);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (6.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-9.000000) (8.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_od_do (4.000000) (8.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( wartosc_od_do (-10.000000) (-7.000000) ) ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. -48.5);;
let a = max_wartosc ( minus ( wartosc_od_do (-4.000000) (-4.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( plus ( wartosc_od_do (-1.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ) (2.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) (2.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (3.000000) (5.000000) ) ) ;;
assert (a =. -7.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (7.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-3.000000) (-2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-4.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (7.000000) ) ) ) ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (-5.000000) ) ) ) ) ) ;;
assert (a =. -0.93000000000000016);;
let a = sr_wartosc ( plus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ) ;;
assert (a =. 8.5);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-4.000000) (-1.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (6.000000) ) ) ;;
assert (a =. 0.11792452830188678);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -0.8);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ;;
assert (a =. -1.66666666666666652);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (6.000000) ) ) (2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. 0.35);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (9.000000) ) ( wartosc_dokladnosc (4.000000) (3.000000) ) ) ) ;;
assert (a =. -2.52835051546391787);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (9.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -0.125);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (-5.000000) (7.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ( wartosc_dokladnosc (-7.000000) (2.000000) ) ) ;;
assert (a =. 53.3358);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( wartosc_dokladnosc (2.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (9.000000) ) ( wartosc_od_do (-5.000000) (-4.000000) ) ) ;;
assert (a =. 0.545);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (5.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -2.625);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 1.25);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) (7.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_od_do (-9.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (2.000000) ) ( wartosc_dokladna (-5.000000) ) ) ) ;;
assert (a =. -10.428);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (-4.000000) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-8.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( podzielic ( razy ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ( podzielic ( wartosc_od_do (-8.000000) (-3.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) ) (-8.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( plus ( razy ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (5.000000) ) ) ( wartosc_od_do (-8.000000) (-3.000000) ) ) ( podzielic ( wartosc_od_do (-3.000000) (2.000000) ) ( minus ( wartosc_dokladnosc (-5.000000) (3.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ) (1.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( podzielic ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 3.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (8.000000) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) ;;
assert (a =. 0.551020408163265363);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-8.000000) (5.000000) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( minus ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) ( wartosc_dokladnosc (-2.000000) (2.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) (6.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (3.000000) (7.000000) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( razy ( plus ( wartosc_dokladnosc (-6.000000) (2.000000) ) ( wartosc_dokladnosc (-1.000000) (7.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (7.000000) (1.000000) ) ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( plus ( razy ( podzielic ( wartosc_dokladnosc (-1.000000) (1.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ( wartosc_dokladnosc (4.000000) (8.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (9.000000) ) ) ( wartosc_dokladnosc (7.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (8.000000) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (8.000000) (7.000000) ) ) ;;
assert (a =. 0.251231032057079695);;
let a = in_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (4.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( razy ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_od_do (6.000000) (7.000000) ) ) (-7.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 5.);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( plus ( razy ( wartosc_od_do (-6.000000) (1.000000) ) ( plus ( wartosc_od_do (-10.000000) (-7.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ) ( wartosc_od_do (-5.000000) (2.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) ;;
assert (a =. -0.515463917525773252);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( razy ( podzielic ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-7.000000) (2.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (2.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (-3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-4.000000) (7.000000) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (4.000000) (5.000000) ) ) ) ;;
assert (a =. -0.282965478211658183);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( razy ( razy ( wartosc_dokladnosc (-1.000000) (3.000000) ) ( razy ( razy ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) ;;
assert (a =. 7.);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladnosc (3.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( razy ( podzielic ( razy ( podzielic ( wartosc_dokladna (-10.000000) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (6.000000) (8.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( minus ( plus ( plus ( wartosc_od_do (-3.000000) (6.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (5.000000) (9.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. -6.9780219780219781);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( podzielic ( podzielic ( razy ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-6.000000) (1.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ( wartosc_od_do (-4.000000) (-1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (-2.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -2.);;
let a = max_wartosc ( plus ( wartosc_od_do (-10.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ;;
assert (a =. 7.5);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 33.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-3.000000) (1.000000) ) ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 1.0299999999999998);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (4.000000) ) ( wartosc_dokladnosc (-7.000000) (7.000000) ) ) ;;
assert (a =. 1.27803379416282659);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (-7.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -60.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (-3.000000) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -13.);;
let a = min_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-7.000000) (-1.000000) ) ) ;;
assert (a =. -8.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (-8.000000) (-6.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( wartosc_od_do (-9.000000) (-1.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (9.000000) ) ) ( plus ( razy ( wartosc_od_do (-4.000000) (-1.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ) ;;
assert (a =. -20.5);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-5.000000) ) ( plus ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_dokladnosc (6.000000) (6.000000) ) ) ) ;;
assert (a =. -0.692307692307692291);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (6.000000) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (7.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( minus ( minus ( plus ( wartosc_od_do (3.000000) (5.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (1.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (-7.000000) (3.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) (-10.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -2.);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( podzielic ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ( podzielic ( wartosc_od_do (-7.000000) (-6.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ) ;;
assert (a =. -30.4);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. -0.94);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (7.000000) ) ) ;;
assert (a =. -11.5);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-3.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ) (-10.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ;;
assert (a =. 0.515);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (8.000000) ) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (7.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -0.66666666666666663);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (8.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (4.000000) (7.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (8.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (6.000000) (8.000000) ) ) ;;
assert (a =. -15.);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( razy ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) ) ) ( wartosc_dokladnosc (-3.000000) (6.000000) ) ) ;;
assert (a =. -0.0728522336769759499);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (-3.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-5.000000) (6.000000) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (8.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (7.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (8.000000) ) ( razy ( razy ( wartosc_dokladna (1.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (1.000000) (4.000000) ) ) ) ( wartosc_od_do (-6.000000) (7.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. 10.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 3.51999999999999957);;
let a = max_wartosc ( podzielic ( podzielic ( podzielic ( plus ( wartosc_od_do (-6.000000) (2.000000) ) ( wartosc_dokladna (9.000000) ) ) ( razy ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( podzielic ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ( wartosc_dokladna (5.000000) ) ) ) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. -24.5);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (3.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -13.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (3.000000) (7.000000) ) ) ;;
assert (a =. 28.);;
let a = min_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( podzielic ( podzielic ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (-6.000000) (9.000000) ) ) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (9.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ;;
assert (a =. 4.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -64.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. 13.);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( minus ( plus ( razy ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (-5.000000) (1.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (7.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ;;
assert (a =. -4.92);;
let a = min_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-9.000000) (6.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 2.33333333333333304);;
let a = in_wartosc ( minus ( minus ( wartosc_od_do (9.000000) (9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) (4.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (2.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( razy ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( podzielic ( wartosc_od_do (6.000000) (9.000000) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ;;
assert (a =. 91.96);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-5.000000) (2.000000) ) ( razy ( minus ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (2.000000) ) ( wartosc_dokladnosc (-10.000000) (5.000000) ) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) ;;
assert (a =. -72.9473684210526301);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ) ;;
assert (a =. -13.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( minus ( wartosc_dokladna (-1.000000) ) ( plus ( plus ( plus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-5.000000) (3.000000) ) ) ) ( plus ( plus ( minus ( wartosc_dokladna (7.000000) ) ( plus ( wartosc_dokladnosc (4.000000) (6.000000) ) ( podzielic ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( podzielic ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ( podzielic ( podzielic ( wartosc_od_do (-1.000000) (3.000000) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ( razy ( wartosc_dokladnosc (7.000000) (7.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) (3.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ;;
assert (a =. 8.00320128051220436);;
let a = max_wartosc ( minus ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. 33.);;
let a = max_wartosc ( razy ( wartosc_dokladna (6.000000) ) ( minus ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ) ;;
assert (a =. 6.42);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (3.000000) (5.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 8.15);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( plus ( minus ( razy ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ) ;;
assert (a =. -0.75);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (5.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (2.000000) ) ( minus ( wartosc_od_do (-7.000000) (-5.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-2.000000) (8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-8.000000) (-4.000000) ) ( plus ( wartosc_dokladnosc (2.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (9.000000) (9.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) ;;
assert (a =. 3.13999999999999968);;
let a = sr_wartosc ( minus ( razy ( wartosc_od_do (-10.000000) (2.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ( minus ( wartosc_od_do (-8.000000) (5.000000) ) ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (1.000000) (9.000000) ) ) ) ) ;;
assert (a =. 1.01999999999999957);;
let a = min_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (7.000000) (3.000000) ) ) ;;
assert (a =. 11.79);;
let a = in_wartosc ( podzielic ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (6.000000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (8.000000) ) ) ) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (-6.000000) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( podzielic ( podzielic ( podzielic ( wartosc_od_do (-10.000000) (-6.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( podzielic ( wartosc_dokladnosc (4.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (5.000000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) (4.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( razy ( wartosc_od_do (-6.000000) (3.000000) ) ( minus ( wartosc_dokladnosc (7.000000) (7.000000) ) ( wartosc_od_do (-4.000000) (9.000000) ) ) ) ;;
assert (a =. -17.235);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 0.5625);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -14.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 10.);;
let a = max_wartosc ( plus ( wartosc_od_do (-1.000000) (5.000000) ) ( minus ( wartosc_od_do (-7.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ;;
assert (a =. 9.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( minus ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( plus ( wartosc_dokladnosc (-7.000000) (4.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (-4.000000) (9.000000) ) ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) (1.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_od_do (2.000000) (4.000000) ) ) (-8.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (3.000000) (9.000000) ) ( wartosc_dokladnosc (-2.000000) (1.000000) ) ) (-7.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (-7.000000) (7.000000) ) ) ;;
assert (a =. -0.537634408602150615);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (-2.000000) ) ) ( podzielic ( wartosc_od_do (-3.000000) (7.000000) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( plus ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (4.000000) (3.000000) ) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ) ;;
assert (a =. 39.7966019417475749);;
let a = min_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (4.000000) (5.000000) ) ) ;;
assert (a =. 2.8);;
let a = sr_wartosc ( plus ( wartosc_od_do (2.000000) (6.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 11.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (1.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (2.000000) (6.000000) ) ( wartosc_od_do (1.000000) (4.000000) ) ) (6.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( plus ( minus ( podzielic ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (1.000000) (3.000000) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ( razy ( wartosc_od_do (-10.000000) (-10.000000) ) ( plus ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (3.000000) (3.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -0.0555555555555555525);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 0.5625);;
let a = sr_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. 0.125);;
let a = in_wartosc ( plus ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) (-3.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-8.000000) (3.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -1.37333333333333329);;
let a = max_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-7.000000) (7.000000) ) ) ) ;;
assert (a =. 7.86648865153538068);;
let a = min_wartosc ( plus ( wartosc_od_do (-5.000000) (-1.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -8.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (5.000000) (3.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -1.66866666666666674);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. -5.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (7.000000) (8.000000) ) ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( plus ( wartosc_od_do (-1.000000) (2.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ) ;;
assert (a =. -3.5600000000000005);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( podzielic ( razy ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( wartosc_od_do (-5.000000) (8.000000) ) ) ( wartosc_od_do (-10.000000) (1.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -9.);;
let a = in_wartosc ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) (9.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (8.000000) (5.000000) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) ;;
assert (a =. 3.99999999999999956);;
let a = max_wartosc ( plus ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_dokladnosc (-2.000000) (5.000000) ) ) ;;
assert (a =. 1.1);;
let a = min_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 7.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (1.000000) (8.000000) ) ( minus ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ;;
assert (a =. -9.72);;
let a = max_wartosc ( minus ( wartosc_od_do (-6.000000) (-2.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( minus ( razy ( wartosc_od_do (-3.000000) (6.000000) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ( wartosc_dokladnosc (1.000000) (9.000000) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( wartosc_dokladna (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( minus ( wartosc_od_do (-7.000000) (-6.000000) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -10.35);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (2.000000) (1.000000) ) ( wartosc_od_do (-2.000000) (7.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (4.000000) (8.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( razy ( wartosc_od_do (-7.000000) (-2.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ( wartosc_dokladna (6.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ( podzielic ( minus ( razy ( wartosc_od_do (-8.000000) (1.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-1.000000) (4.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) ;;
assert (a =. -5.05);;
let a = sr_wartosc ( razy ( wartosc_od_do (-9.000000) (-2.000000) ) ( wartosc_dokladnosc (-9.000000) (1.000000) ) ) ;;
assert (a =. 49.815);;
let a = min_wartosc ( razy ( minus ( wartosc_dokladna (-9.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (3.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) ;;
assert (a =. 60.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (-2.000000) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-10.000000) (3.000000) ) ) ) ;;
assert (a =. 4.19166666666666643);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) (2.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-10.000000) (2.000000) ) ( plus ( wartosc_dokladnosc (-4.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 40.04);;
let a = sr_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (1.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ;;
assert (a =. 6.88);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (6.000000) ) ( wartosc_dokladnosc (8.000000) (3.000000) ) ) ;;
assert (a =. 0.773195876288659933);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (8.000000) (7.000000) ) ( wartosc_od_do (6.000000) (8.000000) ) ) ;;
assert (a =. 56.56);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (9.000000) ) ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (3.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.646666666666666612);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.000000) (4.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. 0.125);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. -0.285714285714285698);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (8.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -0.36000000000000032);;
let a = max_wartosc ( plus ( wartosc_od_do (1.000000) (4.000000) ) ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-8.000000) ) ) (-4.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (6.000000) (4.000000) ) ( wartosc_dokladna (-2.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( minus ( minus ( wartosc_dokladnosc (9.000000) (2.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( razy ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (2.000000) (1.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-7.000000) (2.000000) ) ) ) ) ;;
assert (a =. 1.5998319327731092);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (3.000000) ) ( wartosc_od_do (-6.000000) (-1.000000) ) ) ;;
assert (a =. 1.15000000000000036);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (4.000000) (3.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (4.000000) ) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-1.000000) (2.000000) ) ) (2.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_od_do (5.000000) (8.000000) ) ) (-8.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) (2.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (6.000000) (3.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ( wartosc_od_do (-6.000000) (-3.000000) ) ) ) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (7.000000) (7.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) (4.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (-1.000000) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) ) ;;
assert (a =. -10.92);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (-4.000000) ) ( plus ( wartosc_od_do (-9.000000) (-8.000000) ) ( razy ( plus ( plus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( minus ( wartosc_od_do (-10.000000) (6.000000) ) ( wartosc_dokladnosc (-10.000000) (6.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ;;
assert (a =. 0.53472222222222221);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladnosc (5.000000) (3.000000) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 26.52);;
let a = min_wartosc ( minus ( wartosc_od_do (-10.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -10.);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladnosc (-6.000000) (4.000000) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (6.000000) (2.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (1.000000) (4.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( wartosc_dokladnosc (-8.000000) (4.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 4.5);;
let a = in_wartosc ( minus ( wartosc_od_do (-5.000000) (4.000000) ) ( razy ( wartosc_dokladnosc (1.000000) (8.000000) ) ( wartosc_dokladnosc (2.000000) (7.000000) ) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (7.000000) (5.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (6.000000) ) ( wartosc_dokladna (4.000000) ) ) (7.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladnosc (9.000000) (5.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 7.89);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (9.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -56.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( minus ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ( wartosc_od_do (-9.000000) (1.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (2.000000) (9.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ( razy ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-6.000000) (-3.000000) ) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (8.000000) (9.000000) ) ( wartosc_dokladna (6.000000) ) ) (9.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( plus ( wartosc_od_do (2.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( razy ( plus ( wartosc_od_do (-9.000000) (-5.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ( plus ( wartosc_dokladna (-1.000000) ) ( razy ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) (5.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( razy ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) ( wartosc_od_do (-5.000000) (5.000000) ) ) ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ;;
assert (a =. -35.);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-1.000000) (1.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -0.0277777777777777762);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (5.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-8.000000) (6.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -42.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (7.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 12.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( minus ( razy ( podzielic ( razy ( wartosc_dokladnosc (8.000000) (9.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( wartosc_od_do (-2.000000) (3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-9.000000) (8.000000) ) ) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (2.000000) (9.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -16.38);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -0.66666666666666663);;
let a = sr_wartosc ( minus ( wartosc_od_do (5.000000) (7.000000) ) ( wartosc_od_do (-8.000000) (-3.000000) ) ) ;;
assert (a =. 11.5);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 1.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (1.000000) (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -0.5);;
let a = in_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (1.000000) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (3.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_od_do (-4.000000) (-3.000000) ) ( wartosc_dokladnosc (6.000000) (6.000000) ) ) ;;
assert (a =. 3.36000000000000032);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_od_do (-10.000000) (1.000000) ) ) ;;
assert (a =. -11.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( razy ( wartosc_od_do (6.000000) (9.000000) ) ( wartosc_od_do (-6.000000) (2.000000) ) ) ( wartosc_od_do (2.000000) (4.000000) ) ) ;;
assert (a =. -52.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (8.000000) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (5.000000) (5.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-8.000000) (8.000000) ) ( minus ( wartosc_dokladnosc (-8.000000) (2.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ) ;;
assert (a =. 104.102400000000017);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 8.);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ;;
assert (a =. -9.72);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.000000) (-2.000000) ) ( minus ( wartosc_od_do (7.000000) (9.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ;;
assert (a =. -17.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( razy ( wartosc_od_do (4.000000) (9.000000) ) ( podzielic ( minus ( wartosc_od_do (-7.000000) (-2.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_dokladna (-10.000000) ) ) ) ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ;;
assert (a =. -0.787500000000000089);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. 2.5);;
let a = min_wartosc ( razy ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (7.000000) ) ( podzielic ( podzielic ( podzielic ( podzielic ( podzielic ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (5.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-3.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-9.000000) (-2.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_od_do (-7.000000) (-5.000000) ) ( wartosc_od_do (-5.000000) (2.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 16.);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( plus ( wartosc_od_do (2.000000) (8.000000) ) ( wartosc_od_do (-8.000000) (-1.000000) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( podzielic ( podzielic ( minus ( wartosc_od_do (-2.000000) (2.000000) ) ( plus ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -0.22222222222222221);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladnosc (2.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-1.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-6.000000) (8.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) (-6.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 28.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ( razy ( wartosc_dokladna (-10.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (-6.000000) (8.000000) ) ( razy ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ) ;;
assert (a =. 64.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-7.000000) (2.000000) ) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-10.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ;;
assert (a =. -0.5);;
let a = max_wartosc ( podzielic ( razy ( plus ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ( wartosc_od_do (-3.000000) (-2.000000) ) ) ;;
assert (a =. -3.19999999999999973);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) ( minus ( wartosc_od_do (-4.000000) (6.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (3.000000) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) ;;
assert (a =. -0.143430003580379523);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (6.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (-4.000000) (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ) ;;
assert (a =. -3.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (3.000000) ) ) ( wartosc_od_do (-3.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (8.000000) (7.000000) ) ) ;;
assert (a =. -74.3999999999999915);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -1.28571428571428559);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. -1.5);;
let a = max_wartosc ( podzielic ( wartosc_od_do (3.000000) (6.000000) ) ( wartosc_od_do (8.000000) (9.000000) ) ) ;;
assert (a =. 0.75);;
let a = in_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-1.000000) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ) ;;
assert (a =. 6.4925000000000006);;
let a = min_wartosc ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -6.);;
let a = min_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (7.000000) (8.000000) ) ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-7.000000) (4.000000) ) ) ) ) ;;
assert (a =. -63.0368000000000066);;
let a = min_wartosc ( razy ( wartosc_od_do (-3.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (7.000000) (1.000000) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) (6.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -24.);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (2.000000) ) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (-5.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (3.000000) (9.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. -10.7016);;
let a = in_wartosc ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (7.000000) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-4.000000) (4.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) (-9.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-4.000000) (7.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -70.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (2.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (8.000000) ) ) ) ;;
assert (a =. -8.16);;
let a = min_wartosc ( podzielic ( wartosc_od_do (6.000000) (8.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ;;
assert (a =. -10.3);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. 0.66666666666666663);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( wartosc_od_do (-10.000000) (1.000000) ) ( razy ( wartosc_od_do (6.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (-1.000000) (4.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( plus ( razy ( minus ( wartosc_od_do (-8.000000) (-3.000000) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) ( wartosc_od_do (-3.000000) (-1.000000) ) ) ( wartosc_dokladnosc (-5.000000) (8.000000) ) ) (5.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( plus ( minus ( wartosc_od_do (-6.000000) (-4.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( razy ( wartosc_od_do (-3.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (5.000000) (2.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. -14.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-8.000000) (2.000000) ) ) ;;
assert (a =. -39.2);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (1.000000) (7.000000) ) ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-6.000000) (7.000000) ) ) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-10.000000) (-5.000000) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (4.000000) (5.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 1.84);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (7.000000) (1.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 0.929999999999999938);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -0.714285714285714191);;
let a = sr_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 13.);;
let a = max_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (7.000000) ) ( wartosc_od_do (1.000000) (6.000000) ) ) ;;
assert (a =. 1.085);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 23.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-5.000000) ) ( wartosc_dokladna (6.000000) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( minus ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (8.000000) (4.000000) ) ) ;;
assert (a =. -8.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) ;;
assert (a =. -3.51264552388598927);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (5.000000) (6.000000) ) ) ;;
assert (a =. -5.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (1.000000) ) ( wartosc_od_do (-6.000000) (-3.000000) ) ) (-10.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( plus ( wartosc_dokladna (-7.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -5.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (6.000000) ) ( razy ( plus ( wartosc_dokladna (-8.000000) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ) (7.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (2.000000) ) ( wartosc_dokladnosc (3.000000) (4.000000) ) ) ;;
assert (a =. -3.47222222222222232);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -0.66666666666666663);;
let a = max_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (2.000000) (6.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( plus ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-7.000000) (9.000000) ) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( plus ( razy ( wartosc_dokladna (-7.000000) ) ( plus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (-2.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ;;
assert (a =. 0.0476190476190476164);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladna (0.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-9.000000) (-1.000000) ) ) ;;
assert (a =. -9.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (4.000000) ) ( wartosc_od_do (2.000000) (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-3.000000) (6.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) ;;
assert (a =. 11.05);;
let a = min_wartosc ( plus ( wartosc_od_do (-4.000000) (-2.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (3.000000) (5.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( plus ( wartosc_od_do (-2.000000) (-1.000000) ) ( wartosc_dokladna (-5.000000) ) ) ) ) ( wartosc_dokladna (-8.000000) ) ) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) ;;
assert (a =. -452.52525252525254);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (-5.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (-3.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladna (-10.000000) ) ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( podzielic ( plus ( razy ( podzielic ( podzielic ( wartosc_od_do (-3.000000) (-1.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -1.0234375);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (4.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.924444444444444402);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (8.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a =. -10.8);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( razy ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ) ) (5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( minus ( wartosc_od_do (-4.000000) (3.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (2.000000) ) ( podzielic ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (3.000000) (6.000000) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( minus ( wartosc_od_do (-5.000000) (-5.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) (-10.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 3.);;
let a = max_wartosc ( razy ( wartosc_od_do (-3.000000) (-2.000000) ) ( minus ( razy ( razy ( wartosc_od_do (5.000000) (7.000000) ) ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-3.000000) (9.000000) ) ) ) ( wartosc_dokladnosc (3.000000) (2.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ) ;;
assert (a =. 207.1302);;
let a = sr_wartosc ( razy ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_od_do (6.000000) (7.000000) ) ) ;;
assert (a =. 0.142857142857142849);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-10.000000) (3.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( razy ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. 0.166666666666666657);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-6.000000) (6.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (8.000000) (7.000000) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) ;;
assert (a =. 0.439999999999999503);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (9.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-8.000000) (-7.000000) ) ) ( wartosc_od_do (-3.000000) (8.000000) ) ) ( wartosc_dokladnosc (-4.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_od_do (2.000000) (8.000000) ) ( wartosc_od_do (4.000000) (8.000000) ) ) (-1.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( razy ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-2.000000) (2.000000) ) ) ( minus ( razy ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ( wartosc_dokladnosc (1.000000) (5.000000) ) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. -15.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( plus ( minus ( wartosc_dokladnosc (2.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. -5.14000000000000057);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (1.000000) (8.000000) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (9.000000) ) ) ( wartosc_od_do (-9.000000) (2.000000) ) ) ( plus ( wartosc_dokladnosc (9.000000) (1.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ) (-3.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( podzielic ( podzielic ( razy ( wartosc_od_do (-10.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (-1.000000) ) ) ( wartosc_od_do (-4.000000) (-4.000000) ) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert (a =. 4.);;
let a = min_wartosc ( podzielic ( plus ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ( wartosc_dokladnosc (7.000000) (3.000000) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. 0.31);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (8.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ;;
assert (a =. 4.71428571428571441);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-1.000000) (8.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-2.000000) (-1.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (8.000000) ) ( wartosc_od_do (-9.000000) (6.000000) ) ) ;;
assert (a =. 0.5);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 13.06);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) ;;
assert (a =. 6.86);;
let a = max_wartosc ( razy ( podzielic ( wartosc_od_do (-6.000000) (-5.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_od_do (-8.000000) (7.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 1.5);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (-10.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-4.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-1.000000) (6.000000) ) ) ;;
assert (a =. -6.0600000000000005);;
let a = min_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -56.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ;;
assert (a =. 1.02040816326530592);;
let a = min_wartosc ( podzielic ( razy ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (6.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_od_do (-7.000000) (4.000000) ) ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (8.000000) ) ) ) (-6.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( razy ( wartosc_dokladna (9.000000) ) ( plus ( wartosc_od_do (-2.000000) (4.000000) ) ( wartosc_od_do (-7.000000) (7.000000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ;;
assert (a =. 8.14999999999999858);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_od_do (-4.000000) (7.000000) ) ) ;;
assert (a =. 3.06);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. -1.5);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( minus ( wartosc_od_do (-8.000000) (9.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ( podzielic ( wartosc_dokladnosc (7.000000) (7.000000) ) ( plus ( wartosc_od_do (-9.000000) (-2.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (4.000000) (9.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) (-9.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (1.000000) (9.000000) ) ( wartosc_od_do (3.000000) (4.000000) ) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (1.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.396);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (8.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (1.000000) ) ) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ;;
assert (a =. 1.05);;
let a = max_wartosc ( podzielic ( razy ( plus ( wartosc_dokladnosc (-7.000000) (4.000000) ) ( minus ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (4.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (6.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( wartosc_od_do (-5.000000) (1.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) (1.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ;;
assert (a =. -5.98);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (-5.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-4.000000) (4.000000) ) ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (4.000000) (6.000000) ) ) ) ;;
assert (a =. 2.27272727272727293);;
let a = min_wartosc ( minus ( wartosc_od_do (-9.000000) (-3.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ;;
assert (a =. -10.07);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (1.000000) (5.000000) ) ) ;;
assert (a =. 1.2);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (6.000000) (7.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (-6.000000) ) ) ) ;;
assert (a =. 3.21);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (6.000000) (1.000000) ) ( wartosc_od_do (-8.000000) (-7.000000) ) ) ;;
assert (a =. -41.5800000000000054);;
let a = sr_wartosc ( plus ( minus ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_dokladnosc (-1.000000) (4.000000) ) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ;;
assert (a =. -0.999999999999999556);;
let a = sr_wartosc ( razy ( wartosc_od_do (-8.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (-9.000000) ) ( plus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. -45.);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (-2.000000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (1.000000) (6.000000) ) ) ;;
assert (a =. -5.5);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 8.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( minus ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ( wartosc_dokladna (3.000000) ) ) (-10.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (8.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ;;
assert (a =. 0.300000000000000044);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -64.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-5.000000) (9.000000) ) ) ;;
assert (a =. 1.6513761467889907);;
let a = in_wartosc ( minus ( minus ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ( wartosc_od_do (-10.000000) (4.000000) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (1.000000) ) ( wartosc_od_do (2.000000) (4.000000) ) ) ;;
assert (a =. 1.485);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 18.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. 3.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 30.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (3.000000) (8.000000) ) ) ;;
assert (a =. -0.5);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( plus ( wartosc_od_do (-2.000000) (6.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ( wartosc_dokladnosc (9.000000) (4.000000) ) ) (4.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (-8.000000) (5.000000) ) ) ;;
assert (a =. 0.657894736842105199);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladnosc (6.000000) (7.000000) ) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ;;
assert (a =. 5.5327102803738315);;
let a = min_wartosc ( podzielic ( plus ( plus ( wartosc_dokladnosc (-3.000000) (9.000000) ) ( wartosc_dokladnosc (8.000000) (7.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 2.434);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 7.);;
let a = max_wartosc ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ;;
assert (a =. 6.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (2.000000) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (-3.000000) ) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( razy ( wartosc_od_do (-9.000000) (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-2.000000) (-2.000000) ) ( wartosc_dokladnosc (-4.000000) (8.000000) ) ) ;;
assert (a =. 1.68000000000000016);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladnosc (8.000000) (6.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( minus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ;;
assert (a =. -13.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. 8.);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (8.000000) ) ( plus ( wartosc_dokladnosc (-9.000000) (5.000000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-9.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (5.000000) (2.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-9.000000) (-2.000000) ) ) ;;
assert (a =. 0.333333333333333315);;
let a = sr_wartosc ( razy ( wartosc_od_do (4.000000) (8.000000) ) ( wartosc_od_do (-4.000000) (7.000000) ) ) ;;
assert (a =. 12.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (-1.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -0.333333333333333315);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -1.75);;
let a = min_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (-9.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ( wartosc_dokladnosc (-2.000000) (4.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-3.000000) (-1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (8.000000) ) ) ;;
assert (a =. -1.5);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( minus ( wartosc_od_do (-10.000000) (9.000000) ) ( wartosc_dokladna (4.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (-4.000000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (8.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 38.64);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (8.000000) ) ( plus ( wartosc_dokladnosc (9.000000) (2.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. -6.82);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (2.000000) (5.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (8.000000) ) ) (-2.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 9.);;
let a = min_wartosc ( minus ( wartosc_od_do (6.000000) (7.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (5.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (8.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (6.000000) (4.000000) ) ) ;;
assert (a =. -0.320512820512820484);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (-3.000000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (4.000000) (5.000000) ) ( wartosc_od_do (-5.000000) (-5.000000) ) ) (-7.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( minus ( wartosc_od_do (-1.000000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (2.000000) ) ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ) ) ( wartosc_od_do (-9.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (4.000000) (6.000000) ) ) ;;
assert (a =. 3.76);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. -0.183673469387755084);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-6.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_od_do (-9.000000) (-1.000000) ) ( wartosc_dokladna (9.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (3.000000) ) ( plus ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (3.000000) (5.000000) ) ) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ) ;;
assert (a =. -28.);;
let a = sr_wartosc ( podzielic ( razy ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-5.000000) (-3.000000) ) ( wartosc_dokladnosc (2.000000) (4.000000) ) ) ) ( plus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ( wartosc_od_do (9.000000) (9.000000) ) ) ;;
assert (a =. 1.80493233618233662);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-1.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 0.25);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (4.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( razy ( wartosc_od_do (-10.000000) (6.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-10.000000) (-6.000000) ) ) ;;
assert (a =. -11.6666666666666661);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (1.000000) ) ( minus ( minus ( wartosc_dokladna (-10.000000) ) ( plus ( wartosc_od_do (-1.000000) (3.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_od_do (-9.000000) (-1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 7.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 7.);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (9.000000) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (5.000000) (5.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -3.75);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 1.33333333333333326);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-9.000000) (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ( wartosc_od_do (-4.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (6.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. -3.76);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-1.000000) (9.000000) ) ( razy ( wartosc_dokladnosc (9.000000) (0.000000) ) ( minus ( wartosc_od_do (-6.000000) (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladna (-2.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( plus ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ;;
assert (a =. 11.0088832487309638);;
let a = max_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-9.000000) (-3.000000) ) ) ;;
assert (a =. 10.);;
let a = in_wartosc ( razy ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ( wartosc_dokladna (2.000000) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ( wartosc_dokladnosc (-4.000000) (5.000000) ) ) ) ) ;;
assert (a =. 18.16);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (2.000000) (2.000000) ) ( wartosc_dokladnosc (-9.000000) (2.000000) ) ) ;;
assert (a =. -17.64);;
let a = in_wartosc ( razy ( wartosc_od_do (-4.000000) (-2.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (7.000000) ) ( wartosc_dokladna (1.000000) ) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( plus ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) ( wartosc_od_do (-8.000000) (2.000000) ) ) ;;
assert (a =. -13.18);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (9.000000) (3.000000) ) ) ;;
assert (a =. 0.229095074455899189);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (5.000000) ) ) ;;
assert (a =. -35.);;
let a = max_wartosc ( razy ( wartosc_od_do (-9.000000) (-2.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 63.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( razy ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (3.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (-1.000000) ) ( wartosc_od_do (-6.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -36.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-9.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( minus ( wartosc_od_do (-8.000000) (-2.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -8.);;
let a = max_wartosc ( minus ( razy ( wartosc_od_do (-6.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( podzielic ( wartosc_od_do (-7.000000) (8.000000) ) ( wartosc_od_do (2.000000) (9.000000) ) ) ) ;;
assert (a =. 3.5);;
let a = max_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -13.);;
let a = in_wartosc ( razy ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( plus ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( razy ( wartosc_od_do (-3.000000) (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. -21.);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( razy ( minus ( wartosc_od_do (-2.000000) (5.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_od_do (-6.000000) (2.000000) ) ) ) ;;
assert (a =. -14.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -35.);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-9.000000) (8.000000) ) ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-6.000000) (6.000000) ) ) ;;
assert (a =. 44.52);;
let a = min_wartosc ( razy ( wartosc_od_do (-3.000000) (3.000000) ) ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) ;;
assert (a =. -120.);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. -9.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ;;
assert (a =. -12.5);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( razy ( podzielic ( razy ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_dokladnosc (-4.000000) (8.000000) ) ) ) ( wartosc_dokladna (-7.000000) ) ) (3.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( razy ( podzielic ( wartosc_dokladnosc (3.000000) (5.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_od_do (-6.000000) (6.000000) ) ) ( wartosc_od_do (5.000000) (6.000000) ) ) ;;
assert (a =. -8.3625);;
let a = in_wartosc ( minus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( minus ( minus ( razy ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (2.000000) (8.000000) ) ( wartosc_dokladna (1.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( minus ( podzielic ( wartosc_dokladnosc (-6.000000) (6.000000) ) ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( wartosc_od_do (1.000000) (5.000000) ) ) ;;
assert (a =. 11.25);;
let a = sr_wartosc ( minus ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( razy ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (7.000000) (7.000000) ) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( razy ( wartosc_od_do (-3.000000) (8.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( minus ( wartosc_od_do (-10.000000) (-6.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (8.000000) (3.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ;;
assert (a =. 0.75);;
let a = in_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (2.000000) ) ) ;;
assert (a =. 16.32);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ;;
assert (a =. 0.921739130434782727);;
let a = in_wartosc ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-5.000000) (4.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( wartosc_dokladnosc (6.000000) (5.000000) ) ) (-2.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (2.000000) ) ( wartosc_od_do (-7.000000) (-5.000000) ) ) ;;
assert (a =. -1.428);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (1.000000) ) ( plus ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladna (6.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (-5.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.000000) (-3.000000) ) ( wartosc_od_do (8.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.000000) (8.000000) ) ( wartosc_od_do (5.000000) (9.000000) ) ) ;;
assert (a =. 1.6);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-10.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (-10.000000) (-9.000000) ) ( wartosc_dokladna (-5.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. -7.5);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (2.000000) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ) ( wartosc_dokladnosc (3.000000) (9.000000) ) ) ;;
assert (a =. -9.06242496998799396);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (7.000000) (6.000000) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (7.000000) (1.000000) ) ( wartosc_dokladnosc (8.000000) (9.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( minus ( wartosc_od_do (-9.000000) (6.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ) (6.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (8.000000) ) ( plus ( podzielic ( wartosc_od_do (1.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ;;
assert (a =. 16.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (7.000000) ) ) ;;
assert (a =. 0.71684587813620082);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (-6.000000) ) ( podzielic ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-7.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (6.000000) (1.000000) ) ( wartosc_dokladna (6.000000) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (-3.000000) (5.000000) ) ( razy ( wartosc_od_do (-4.000000) (7.000000) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. -0.375);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 0.2);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ) ;;
assert (a =. 1.000100010001);;
let a = max_wartosc ( plus ( plus ( wartosc_od_do (-1.000000) (2.000000) ) ( razy ( wartosc_dokladnosc (4.000000) (1.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 1.08);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (3.000000) ) ) ;;
assert (a =. 17.5);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladna (-1.000000) ) ( razy ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert (a =. 54.);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 10.6666666666666661);;
let a = max_wartosc ( plus ( wartosc_od_do (-5.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) ;;
assert (a =. 8.);;
let a = in_wartosc ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (-3.000000) ) ) (-3.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (6.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert (a =. -15.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 9.);;
let a = max_wartosc ( plus ( plus ( wartosc_od_do (-3.000000) (-1.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ( plus ( razy ( minus ( razy ( podzielic ( wartosc_dokladnosc (-4.000000) (1.000000) ) ( minus ( razy ( wartosc_dokladnosc (1.000000) (2.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ( plus ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-8.000000) (6.000000) ) ) ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -130.787692307692311);;
let a = in_wartosc ( minus ( minus ( wartosc_od_do (-10.000000) (6.000000) ) ( wartosc_dokladnosc (-1.000000) (9.000000) ) ) ( wartosc_dokladna (5.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-9.000000) (-8.000000) ) ( razy ( wartosc_od_do (-9.000000) (1.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ) (5.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( razy ( wartosc_od_do (-10.000000) (4.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ) ) ( wartosc_od_do (-4.000000) (9.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (-10.000000) (9.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 12.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-10.000000) (4.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-10.000000) (8.000000) ) ( wartosc_dokladnosc (7.000000) (5.000000) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( razy ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 1.5);;
let a = min_wartosc ( podzielic ( minus ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( razy ( podzielic ( wartosc_dokladnosc (3.000000) (9.000000) ) ( razy ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.367980884109916306);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( minus ( wartosc_dokladnosc (8.000000) (7.000000) ) ( wartosc_dokladnosc (3.000000) (5.000000) ) ) ) ;;
assert (a =. 2.71000000000000085);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (-10.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 40.);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (9.000000) ) ( minus ( wartosc_od_do (-9.000000) (5.000000) ) ( plus ( wartosc_dokladnosc (8.000000) (2.000000) ) ( minus ( razy ( wartosc_od_do (1.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ) ) ) ;;
assert (a =. -0.159090909090909088);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (2.000000) (5.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (1.000000) ) ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( razy ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_dokladnosc (-5.000000) (1.000000) ) ) ( wartosc_od_do (-6.000000) (7.000000) ) ) (5.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-4.000000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (4.000000) ) ( wartosc_dokladnosc (-6.000000) (5.000000) ) ) ) ;;
assert (a =. 3.84761904761904772);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 0.75);;
let a = sr_wartosc ( podzielic ( plus ( podzielic ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( minus ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -72.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (8.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) (1.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( wartosc_dokladnosc (5.000000) (6.000000) ) ) ;;
assert (a =. -23.3);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a =. -14.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-2.000000) (8.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( minus ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ) ( razy ( wartosc_dokladna (-3.000000) ) ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ) ) ) ;;
assert (a =. 2.625);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_dokladna (-10.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( razy ( minus ( razy ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( wartosc_dokladnosc (2.000000) (2.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-5.000000) (9.000000) ) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (1.000000) (8.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (4.000000) (9.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( minus ( wartosc_od_do (-8.000000) (-7.000000) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ( minus ( wartosc_od_do (-8.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.000000) (2.000000) ) ( wartosc_dokladnosc (5.000000) (2.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-6.000000) ) ( minus ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( plus ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ( wartosc_dokladnosc (5.000000) (4.000000) ) ) ) ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (-2.000000) (5.000000) ) ) ;;
assert (a =. -1.5);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-3.000000) (1.000000) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) ( wartosc_od_do (-8.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 7.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (8.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ( wartosc_dokladnosc (-9.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (3.000000) (7.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( podzielic ( plus ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_od_do (-8.000000) (4.000000) ) ) ( wartosc_dokladnosc (5.000000) (4.000000) ) ) ) ) ( wartosc_od_do (-5.000000) (1.000000) ) ) ;;
assert (a =. -27.25);;
let a = in_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (-6.000000) ) ) (-4.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (1.000000) ) ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( podzielic ( podzielic ( podzielic ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (-4.000000) (1.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (3.000000) (8.000000) ) ) ) (-7.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-10.000000) (-2.000000) ) ( minus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-6.000000) (5.000000) ) ) ) (-7.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 0.5);;
let a = in_wartosc ( podzielic ( razy ( wartosc_od_do (2.000000) (4.000000) ) ( wartosc_dokladnosc (2.000000) (5.000000) ) ) ( wartosc_od_do (-7.000000) (-3.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-2.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-4.000000) (8.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (1.000000) (4.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. 3.96);;
let a = min_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 9.);;
let a = min_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 9.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (3.000000) (7.000000) ) ) ;;
assert (a =. -2.33333333333333304);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) ;;
assert (a =. -10.);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) (1.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (5.000000) (6.000000) ) ( wartosc_dokladna (2.000000) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ( wartosc_dokladnosc (-9.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( minus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) ( podzielic ( wartosc_dokladnosc (-8.000000) (6.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert (a =. 8.81142857142857139);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) (8.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-3.000000) (-2.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( minus ( razy ( wartosc_dokladnosc (-2.000000) (4.000000) ) ( wartosc_dokladnosc (-8.000000) (5.000000) ) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ) ;;
assert (a =. -19.592);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) (-8.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( razy ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( razy ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-2.000000) (2.000000) ) ) ( podzielic ( razy ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ) ) (9.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ( wartosc_od_do (-8.000000) (8.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( minus ( wartosc_od_do (-5.000000) (6.000000) ) ( wartosc_dokladnosc (3.000000) (9.000000) ) ) (-1.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (2.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -11.76);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -0.623052959501557591);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (7.000000) (8.000000) ) ) ;;
assert (a =. 0.75);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (2.000000) ) ( minus ( plus ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (2.000000) (9.000000) ) ( wartosc_dokladnosc (-6.000000) (3.000000) ) ) ;;
assert (a =. -55.62);;
let a = sr_wartosc ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( minus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) ;;
assert (a =. 2.5);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-8.000000) (-6.000000) ) ) ) ;;
assert (a =. 48.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( minus ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 3.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( plus ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ;;
assert (a =. 1.21528662420382161);;
let a = in_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (-9.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( minus ( podzielic ( podzielic ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( plus ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ( podzielic ( wartosc_dokladna (-5.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (3.000000) ) ( wartosc_od_do (-8.000000) (3.000000) ) ) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) ;;
assert (a =. 5.84);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (6.000000) ) ) ( wartosc_od_do (-1.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-3.000000) (2.000000) ) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) (6.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (7.000000) (6.000000) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (-10.000000) (-5.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (7.000000) ) ( wartosc_od_do (-1.000000) (1.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -1.66666666666666652);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ) ( wartosc_dokladna (2.000000) ) ) (-4.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -12.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (4.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. -8.64);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-1.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( plus ( wartosc_od_do (-7.000000) (-6.000000) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) ) ;;
assert (a =. -0.297475589098070536);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (7.000000) (6.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_od_do (4.000000) (6.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 13.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. -30.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( podzielic ( wartosc_od_do (-8.000000) (-2.000000) ) ( minus ( wartosc_od_do (-5.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 0.5);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (1.000000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (5.000000) (9.000000) ) ) (5.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( wartosc_od_do (-2.000000) (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) (4.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -0.428571428571428548);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (6.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladnosc (8.000000) (9.000000) ) ) ;;
assert (a =. 9.72);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( minus ( wartosc_od_do (-10.000000) (-10.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (-5.000000) (-5.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( minus ( wartosc_od_do (-6.000000) (5.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_od_do (-4.000000) (7.000000) ) ) ;;
assert (a =. -8.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (2.000000) (7.000000) ) ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-9.000000) (1.000000) ) ) ) ;;
assert (a =. 0.376583682832159317);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) ;;
assert (a =. -15.);;
let a = sr_wartosc ( minus ( podzielic ( razy ( wartosc_dokladnosc (4.000000) (4.000000) ) ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (-10.000000) (-3.000000) ) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ) ( wartosc_od_do (4.000000) (5.000000) ) ) ;;
assert (a =. -4.72222222222222232);;
let a = in_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-2.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (7.000000) (7.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. 3.5);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) ( wartosc_dokladnosc (-10.000000) (1.000000) ) ) ;;
assert (a =. -0.0727272727272728);;
let a = sr_wartosc ( minus ( wartosc_od_do (-7.000000) (-2.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. -8.5);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (4.000000) (6.000000) ) ) ( minus ( wartosc_od_do (-10.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) (1.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladna (3.000000) ) ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ) ( minus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-6.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (-6.000000) (3.000000) ) ) ;;
assert (a =. 61.8);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (4.000000) (6.000000) ) ) ( minus ( wartosc_od_do (-10.000000) (-6.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( razy ( wartosc_od_do (-7.000000) (-2.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_od_do (-5.000000) (-2.000000) ) ) ) ( wartosc_od_do (-5.000000) (3.000000) ) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( razy ( wartosc_od_do (4.000000) (9.000000) ) ( wartosc_dokladnosc (9.000000) (7.000000) ) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-10.000000) (-9.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (-4.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (3.000000) (9.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( plus ( minus ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ) ( wartosc_od_do (5.000000) (8.000000) ) ) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (4.000000) ) ( razy ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ) ) ;;
assert (a =. 15.0000000000000018);;
let a = sr_wartosc ( razy ( wartosc_od_do (-7.000000) (1.000000) ) ( podzielic ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ;;
assert (a =. -0.900000000000000244);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 0.875);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (-7.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (7.000000) ) ) ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. 4.5);;
let a = min_wartosc ( podzielic ( razy ( podzielic ( wartosc_od_do (-10.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( wartosc_od_do (-3.000000) (4.000000) ) ) ( plus ( wartosc_od_do (2.000000) (5.000000) ) ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-8.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_dokladna (-5.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (4.000000) ) ( podzielic ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ( wartosc_od_do (3.000000) (6.000000) ) ) ) ;;
assert (a =. -0.66666666666666663);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) ( razy ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ( wartosc_dokladnosc (9.000000) (3.000000) ) ) ) (-2.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. -16.);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-9.000000) (-4.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (5.000000) ) ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-5.000000) (9.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (-2.000000) ) ) (-9.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) ;;
assert (a =. 3.125);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-6.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (-8.000000) (4.000000) ) ) ;;
assert (a =. -8.32);;
let a = in_wartosc ( podzielic ( wartosc_od_do (2.000000) (7.000000) ) ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladnosc (6.000000) (6.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (4.000000) ) ( wartosc_dokladnosc (7.000000) (7.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( razy ( wartosc_od_do (-1.000000) (5.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ) (-3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (6.000000) ) ( podzielic ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( plus ( wartosc_od_do (-7.000000) (9.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-10.000000) (2.000000) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ;;
assert (a =. 62.424);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (4.000000) (6.000000) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (7.000000) (5.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) (6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ( wartosc_dokladnosc (-6.000000) (6.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-2.000000) (7.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (7.000000) ) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ) (7.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-10.000000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (-7.000000) ) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (5.000000) ) ) ;;
assert (a =. -5.25);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( razy ( wartosc_od_do (-9.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (3.000000) ) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ;;
assert (a =. 0.343642611683848798);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (1.000000) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) ;;
assert (a =. -0.578465063001145419);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (7.000000) ) ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (-7.000000) (3.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( razy ( razy ( wartosc_od_do (-4.000000) (-2.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ) ;;
assert (a =. -24.);;
let a = in_wartosc ( podzielic ( podzielic ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (3.000000) ) ) ;;
assert (a =. 1.09223300970873782);;
let a = sr_wartosc ( podzielic ( minus ( podzielic ( wartosc_od_do (-5.000000) (2.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( minus ( podzielic ( wartosc_od_do (-4.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-4.000000) (-1.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -4.5);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (3.000000) ) ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ;;
assert (a =. 0.485);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ;;
assert (a =. 8.);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( wartosc_dokladnosc (3.000000) (1.000000) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (7.000000) (8.000000) ) ) ;;
assert (a =. 8.);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (5.000000) (6.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ;;
assert (a =. 6.6);;
let a = in_wartosc ( plus ( razy ( minus ( minus ( wartosc_od_do (-1.000000) (2.000000) ) ( podzielic ( wartosc_od_do (3.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (8.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (5.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (6.000000) ) ( minus ( wartosc_od_do (-1.000000) (8.000000) ) ( razy ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (9.000000) (5.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. 0.333333333333333315);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.000000) (1.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -9.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-10.000000) (2.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -18.8);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-5.000000) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) ;;
assert (a =. 0.992063492063492);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-7.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ) (-1.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_od_do (-5.000000) (8.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (-3.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) ) ;;
assert (a =. 6.06060606060606055);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-6.000000) (3.000000) ) ) ;;
assert (a =. -18.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.333333333333333315);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-6.000000) (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( minus ( wartosc_od_do (-10.000000) (7.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. -11.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-2.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 0.4);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (7.000000) ) ) ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( plus ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-7.000000) (8.000000) ) ) ) ) ) ) ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (5.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (1.000000) (6.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 12.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-6.000000) (-6.000000) ) ) ;;
assert (a =. 42.);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (-2.000000) (3.000000) ) ) ( razy ( wartosc_od_do (4.000000) (8.000000) ) ( wartosc_od_do (-8.000000) (-5.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-4.000000) (9.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( razy ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( razy ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (7.000000) ) ) ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( razy ( podzielic ( minus ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) ;;
assert (a =. -5.62875);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -1.6);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( podzielic ( wartosc_od_do (-8.000000) (-5.000000) ) ( wartosc_od_do (-7.000000) (-2.000000) ) ) ) ;;
assert (a =. 28.);;
let a = min_wartosc ( razy ( razy ( wartosc_od_do (5.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-7.000000) (-1.000000) ) ) ;;
assert (a =. -1.5);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladna (9.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-9.000000) ) ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ) ( razy ( wartosc_dokladnosc (-7.000000) (4.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ) ;;
assert (a =. -8.33395492148450145);;
let a = max_wartosc ( podzielic ( razy ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -3.52800000000000047);;
let a = sr_wartosc ( razy ( wartosc_od_do (3.000000) (9.000000) ) ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a =. -4.5);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. -18.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -11.76);;
let a = in_wartosc ( podzielic ( wartosc_od_do (3.000000) (4.000000) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ;;
assert (a =. -3.71999999999999975);;
let a = max_wartosc ( razy ( wartosc_od_do (2.000000) (8.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) ;;
assert (a =. 40.4);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (2.000000) (2.000000) ) ( wartosc_dokladnosc (4.000000) (6.000000) ) ) ;;
assert (a =. 5.72);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladna (-3.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. -2.59999999999999964);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( razy ( wartosc_dokladnosc (-9.000000) (8.000000) ) ( minus ( minus ( minus ( wartosc_od_do (-6.000000) (-4.000000) ) ( razy ( plus ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (8.000000) ) ) ( plus ( plus ( wartosc_od_do (-8.000000) (9.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (-6.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ( wartosc_od_do (2.000000) (6.000000) ) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_od_do (-10.000000) (2.000000) ) ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (5.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-4.000000) (4.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -0.66666666666666663);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-9.000000) (1.000000) ) ( razy ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ) ;;
assert (a =. 0.716845878136200709);;
let a = min_wartosc ( razy ( razy ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-7.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( plus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (1.000000) ) ) ) ;;
assert (a =. -0.196428571428571425);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (-2.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (8.000000) ) ( wartosc_dokladnosc (4.000000) (5.000000) ) ) ;;
assert (a =. -1.13684210526315788);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-1.000000) (1.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (3.000000) (6.000000) ) ) ;;
assert (a =. 3.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (-10.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (-4.000000) (6.000000) ) ) ;;
assert (a =. -3.76);;
let a = min_wartosc ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-9.000000) (4.000000) ) ) ;;
assert (a =. -8.36);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (9.000000) (4.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) (-7.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( wartosc_dokladna (-10.000000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( plus ( minus ( wartosc_od_do (-5.000000) (3.000000) ) ( razy ( wartosc_dokladnosc (6.000000) (4.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) (-1.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) (-10.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. 13.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (2.000000) (9.000000) ) ( razy ( wartosc_dokladnosc (8.000000) (4.000000) ) ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. 54.4128000000000043);;
let a = max_wartosc ( plus ( wartosc_dokladna (-9.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -9.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (3.000000) (6.000000) ) ) ;;
assert (a =. -0.18000000000000016);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladnosc (0.000000) (2.000000) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (2.000000) (6.000000) ) ) ) ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (6.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (-10.000000) (-1.000000) ) ) ;;
assert (a =. -0.5);;
let a = max_wartosc ( plus ( wartosc_od_do (-1.000000) (9.000000) ) ( minus ( minus ( wartosc_od_do (5.000000) (8.000000) ) ( podzielic ( wartosc_od_do (3.000000) (8.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. 14.);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (-10.000000) (1.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladna (9.000000) ) ( razy ( wartosc_od_do (4.000000) (5.000000) ) ( plus ( razy ( podzielic ( minus ( wartosc_dokladnosc (8.000000) (3.000000) ) ( wartosc_dokladna (3.000000) ) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ( plus ( razy ( wartosc_od_do (-1.000000) (8.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ( wartosc_dokladnosc (-1.000000) (5.000000) ) ) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -1914.25);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (4.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (4.000000) (8.000000) ) ) (2.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) ;;
assert (a =. 20.2);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) ;;
assert (a =. -0.701754385964912242);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.000000) (3.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. -9.);;
let a = in_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) (-8.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (2.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ;;
assert (a =. -5.5);;
let a = sr_wartosc ( plus ( podzielic ( plus ( minus ( wartosc_od_do (-3.000000) (8.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( podzielic ( wartosc_dokladnosc (7.000000) (9.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ) ( wartosc_dokladna (-6.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (8.000000) ) ) ) ;;
assert (a =. 0.316666666666666652);;
let a = min_wartosc ( plus ( wartosc_od_do (-9.000000) (-3.000000) ) ( wartosc_dokladnosc (4.000000) (3.000000) ) ) ;;
assert (a =. -5.12);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (6.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a =. -4.7);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_dokladnosc (-4.000000) (8.000000) ) ) ;;
assert (a =. -0.815217391304347783);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -7.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_od_do (-6.000000) (6.000000) ) ( razy ( wartosc_od_do (-6.000000) (-5.000000) ) ( wartosc_od_do (-10.000000) (3.000000) ) ) ) ;;
assert (a =. 24.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_od_do (-6.000000) (-4.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. 6.5);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-6.000000) (1.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 7.575);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (-1.000000) ) ( razy ( wartosc_od_do (-8.000000) (5.000000) ) ( wartosc_dokladnosc (7.000000) (4.000000) ) ) ) ;;
assert (a =. -364.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (1.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (-3.000000) ) ( podzielic ( wartosc_od_do (3.000000) (5.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (-10.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ) ) ) ;;
assert (a =. 0.560747663551401931);;
let a = max_wartosc ( minus ( podzielic ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ( minus ( wartosc_od_do (-5.000000) (-4.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (9.000000) (9.000000) ) ) ) ;;
assert (a =. 0.0246913580246913567);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (1.000000) (2.000000) ) ) ;;
assert (a =. 6.);;
let a = in_wartosc ( minus ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-1.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (-10.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (-5.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-9.000000) (7.000000) ) ( wartosc_dokladnosc (-10.000000) (7.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (-9.000000) (1.000000) ) ) ;;
assert (a =. -0.555611116667222293);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (9.000000) ) ( wartosc_dokladna (-10.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( podzielic ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladnosc (-9.000000) (4.000000) ) ) ) ;;
assert (a =. 11.3370726495726508);;
let a = sr_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 3.);;
let a = min_wartosc ( plus ( wartosc_od_do (-10.000000) (-9.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (-9.000000) (3.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_od_do (-5.000000) (8.000000) ) ( wartosc_dokladna (9.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (3.000000) ) ( razy ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( wartosc_od_do (5.000000) (9.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-5.000000) (4.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (4.000000) ) ( plus ( wartosc_od_do (-4.000000) (-3.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) (8.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( plus ( wartosc_od_do (-7.000000) (-5.000000) ) ( wartosc_dokladnosc (6.000000) (8.000000) ) ) ) ;;
assert (a =. -5.52);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( razy ( wartosc_dokladnosc (6.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (4.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (5.000000) (8.000000) ) ( plus ( wartosc_od_do (-1.000000) (9.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) ;;
assert (a =. -2.54444444444444429);;
let a = sr_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (2.000000) (4.000000) ) ) ;;
assert (a =. 10.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. 0.142857142857142849);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( minus ( wartosc_od_do (-1.000000) (8.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ;;
assert (a =. -1.33333333333333326);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( plus ( wartosc_od_do (-10.000000) (-2.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. -3.5);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (8.000000) (3.000000) ) ) ;;
assert (a =. 1.0309278350515465);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.000000) (6.000000) ) ( wartosc_dokladna (-8.000000) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladnosc (5.000000) (5.000000) ) ( plus ( wartosc_od_do (-5.000000) (2.000000) ) ( wartosc_dokladnosc (-5.000000) (8.000000) ) ) ) ( wartosc_dokladnosc (-1.000000) (4.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ;;
assert (a =. 36.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (6.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (-6.000000) (3.000000) ) ) ;;
assert (a =. 0.5);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.333333333333333315);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (7.000000) (6.000000) ) ( plus ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ( wartosc_dokladnosc (1.000000) (1.000000) ) ) ) ;;
assert (a =. 8.675);;
let a = min_wartosc ( plus ( podzielic ( razy ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (-1.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ( wartosc_dokladnosc (-7.000000) (4.000000) ) ) ;;
assert (a =. -7.09812500000000046);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_od_do (6.000000) (9.000000) ) ( wartosc_dokladnosc (5.000000) (9.000000) ) ) ( plus ( wartosc_dokladnosc (2.000000) (7.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ;;
assert (a =. -6.45137614678899);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (4.000000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (3.000000) (3.000000) ) ) ) ) ( wartosc_od_do (3.000000) (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ( razy ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-1.000000) ) ) ) ;;
assert (a =. 0.333333333333333315);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladnosc (-8.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (4.000000) (5.000000) ) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (5.000000) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (4.000000) ) ) (-2.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -4.65);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( minus ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_od_do (-8.000000) (9.000000) ) ) (-7.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_od_do (-7.000000) (-2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-4.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 5.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-1.000000) (4.000000) ) ) ;;
assert (a =. -8.01282051282051277);;
let a = min_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-7.000000) (8.000000) ) ) ;;
assert (a =. -2.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( minus ( minus ( plus ( minus ( wartosc_dokladnosc (4.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-3.000000) (-3.000000) ) ) ( wartosc_od_do (-5.000000) (2.000000) ) ) ( razy ( plus ( razy ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_dokladnosc (3.000000) (5.000000) ) ) ( wartosc_od_do (-3.000000) (-2.000000) ) ) ( wartosc_dokladnosc (8.000000) (4.000000) ) ) ) ) ;;
assert (a =. 63.063999999999993);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-2.000000) (-1.000000) ) ( wartosc_dokladna (-4.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (7.000000) (1.000000) ) ( plus ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. 6.93);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. -5.5);;
let a = in_wartosc ( plus ( wartosc_od_do (2.000000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (-3.000000) (-1.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. 0.428571428571428548);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ;;
assert (a =. 4.15);;
let a = max_wartosc ( razy ( plus ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ( wartosc_dokladnosc (4.000000) (9.000000) ) ) ;;
assert (a =. 34.88);;
let a = max_wartosc ( razy ( wartosc_od_do (-10.000000) (1.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 70.);;
let a = min_wartosc ( podzielic ( minus ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (4.000000) (8.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ( plus ( podzielic ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. -0.1);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladnosc (1.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( wartosc_dokladnosc (3.000000) (1.000000) ) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_od_do (-1.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (7.000000) ) ) ;;
assert (a =. 0.460829493087557607);;
let a = sr_wartosc ( razy ( wartosc_od_do (3.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (2.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -7.42);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (7.000000) (8.000000) ) ) ;;
assert (a =. -0.857142857142857095);;
let a = sr_wartosc ( plus ( minus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( razy ( wartosc_od_do (1.000000) (5.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ) ) ( razy ( wartosc_dokladnosc (-8.000000) (1.000000) ) ( wartosc_od_do (-6.000000) (-1.000000) ) ) ) ;;
assert (a =. 18.4500000000000028);;
let a = in_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( minus ( wartosc_od_do (-8.000000) (1.000000) ) ( wartosc_dokladnosc (-8.000000) (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. 9.24);;
let a = min_wartosc ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-8.000000) (6.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. -0.31800000000000006);;
let a = min_wartosc ( minus ( wartosc_od_do (-9.000000) (1.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. -9.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -3.15);;
let a = max_wartosc ( plus ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (-7.000000) (-7.000000) ) ) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 5.57142857142857117);;
let a = sr_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (-8.000000) ) ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-7.000000) (3.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) ;;
assert (a =. 0.705882352941176516);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (3.000000) ) ( minus ( razy ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (1.000000) (3.000000) ) ) ) ;;
assert (a =. -4.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.000000) (4.000000) ) ( wartosc_dokladnosc (-9.000000) (8.000000) ) ) ;;
assert (a =. 0.241545893719806781);;
let a = min_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 56.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) (3.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. -4.5);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ) ) (3.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( razy ( podzielic ( minus ( wartosc_od_do (-8.000000) (6.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (9.000000) ) ( wartosc_dokladnosc (1.000000) (8.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (9.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ( razy ( wartosc_od_do (-10.000000) (-2.000000) ) ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (3.000000) (9.000000) ) ( wartosc_dokladna (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (7.000000) (9.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ;;
assert (a =. 50.96);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (-2.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (-6.000000) (8.000000) ) ( wartosc_od_do (1.000000) (1.000000) ) ) ( wartosc_od_do (-10.000000) (-10.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( minus ( podzielic ( plus ( plus ( plus ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( plus ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) ( podzielic ( minus ( wartosc_od_do (3.000000) (9.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ( wartosc_od_do (-5.000000) (-2.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) (3.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. -1.9);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (-1.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-9.000000) (2.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. -6.5);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) ( wartosc_dokladna (7.000000) ) ) (4.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( razy ( plus ( wartosc_od_do (-7.000000) (7.000000) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) ( minus ( wartosc_dokladna (9.000000) ) ( plus ( razy ( wartosc_dokladna (7.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( wartosc_od_do (-10.000000) (1.000000) ) ) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (1.000000) (7.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) ;;
assert (a =. -7.52);;
let a = max_wartosc ( plus ( wartosc_od_do (-4.000000) (-2.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -5.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 9.);;
let a = max_wartosc ( plus ( wartosc_od_do (5.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ;;
assert (a =. 15.);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladna (-6.000000) ) ( razy ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (9.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -9.);;
let a = sr_wartosc ( razy ( wartosc_od_do (4.000000) (9.000000) ) ( podzielic ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( wartosc_dokladnosc (8.000000) (3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.000000) (6.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a =. -8.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (3.000000) (4.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( wartosc_dokladnosc (-1.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (4.000000) ) ( podzielic ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-9.000000) (4.000000) ) ( wartosc_dokladnosc (-7.000000) (9.000000) ) ) ;;
assert (a =. -2.37);;
let a = sr_wartosc ( minus ( wartosc_od_do (-9.000000) (1.000000) ) ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.000000) (7.000000) ) ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 1.6);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -1.5);;
let a = sr_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( podzielic ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. -2.625);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (-5.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-7.000000) (2.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( minus ( wartosc_od_do (-9.000000) (3.000000) ) ( wartosc_od_do (-6.000000) (2.000000) ) ) ) ) ;;
assert (a =. -12.5999999999999979);;
let a = min_wartosc ( minus ( wartosc_od_do (4.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. -0.428571428571428548);;
let a = in_wartosc ( plus ( wartosc_od_do (-1.000000) (6.000000) ) ( razy ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ;;
assert (a =. 9.98);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( podzielic ( plus ( wartosc_od_do (-4.000000) (-2.000000) ) ( wartosc_od_do (-10.000000) (7.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -18.);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (6.000000) ) ( podzielic ( wartosc_dokladna (-9.000000) ) ( podzielic ( minus ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( podzielic ( plus ( plus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (2.000000) ) ) ( minus ( wartosc_dokladna (-10.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( plus ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_od_do (-8.000000) (9.000000) ) ) ) ) ) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-3.000000) (4.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 1.12);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (6.000000) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -11.);;
let a = in_wartosc ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) (6.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (2.000000) (3.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ;;
assert (a =. 5.27);;
let a = min_wartosc ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-3.000000) ) ( razy ( wartosc_dokladnosc (5.000000) (3.000000) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) ) ) ;;
assert (a =. -9.06797326384955227);;
let a = max_wartosc ( razy ( plus ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ( plus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( razy ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ;;
assert (a =. 240.);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( podzielic ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladnosc (6.000000) (6.000000) ) ) (-5.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-6.000000) (4.000000) ) ) ;;
assert (a =. 9.);;
let a = min_wartosc ( podzielic ( plus ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( razy ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (2.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( razy ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (4.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (1.000000) ) ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. -14.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (1.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (6.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ( wartosc_dokladnosc (5.000000) (5.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_od_do (-7.000000) (5.000000) ) ( wartosc_dokladnosc (6.000000) (4.000000) ) ) ;;
assert (a =. 31.2000000000000028);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (1.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.88888888888888884);;
let a = max_wartosc ( razy ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (2.000000) (1.000000) ) ( wartosc_dokladnosc (2.000000) (5.000000) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (-4.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( minus ( wartosc_od_do (-7.000000) (-7.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (8.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) ;;
assert (a =. -0.857142857142857095);;
let a = in_wartosc ( minus ( wartosc_od_do (1.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ;;
assert (a =. -3.7224);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (1.000000) (5.000000) ) ( wartosc_od_do (-2.000000) (9.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladnosc (8.000000) (4.000000) ) ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-2.000000) (3.000000) ) ) ) ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -61.44);;
let a = max_wartosc ( razy ( wartosc_od_do (2.000000) (7.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. -20.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (9.000000) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ;;
assert (a =. 0.2725);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (7.000000) (6.000000) ) ( minus ( wartosc_od_do (-10.000000) (9.000000) ) ( razy ( wartosc_dokladna (7.000000) ) ( podzielic ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ) ) ) ;;
assert (a =. -158.9);;
let a = in_wartosc ( minus ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_od_do (-6.000000) (9.000000) ) ) ( plus ( razy ( wartosc_od_do (-6.000000) (1.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (8.000000) ) ( wartosc_dokladnosc (9.000000) (7.000000) ) ) ) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (9.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ;;
assert (a =. -36.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ;;
assert (a =. -0.800320128051220436);;
let a = max_wartosc ( razy ( wartosc_od_do (-5.000000) (5.000000) ) ( wartosc_dokladnosc (-10.000000) (6.000000) ) ) ;;
assert (a =. 53.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (9.000000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. 2.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (4.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (6.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-8.000000) (-6.000000) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-9.000000) (-6.000000) ) ( minus ( plus ( plus ( wartosc_dokladna (-3.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_od_do (-3.000000) (2.000000) ) ( wartosc_dokladnosc (-9.000000) (1.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( razy ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_dokladnosc (-3.000000) (5.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -5.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-10.000000) (-6.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 9.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( wartosc_od_do (-9.000000) (6.000000) ) ) ;;
assert (a =. 4.1);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (8.000000) (5.000000) ) ) ) ;;
assert (a =. -5.25);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a =. 0.375);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (1.000000) ) ( wartosc_od_do (-3.000000) (4.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( razy ( podzielic ( wartosc_dokladnosc (7.000000) (8.000000) ) ( wartosc_dokladna (2.000000) ) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ) ) ) ;;
assert (a =. 10.0733333333333341);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (9.000000) ) ( podzielic ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (-5.000000) (-5.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-7.000000) (-5.000000) ) ( wartosc_od_do (-3.000000) (7.000000) ) ) ;;
assert (a =. -4.);;
let a = max_wartosc ( razy ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-6.000000) (-4.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 192.);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( minus ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) ;;
assert (a =. 0.52691867124856806);;
let a = min_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( plus ( wartosc_od_do (-1.000000) (3.000000) ) ( wartosc_dokladnosc (5.000000) (9.000000) ) ) ) ;;
assert (a =. -7.44999999999999929);;
let a = sr_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (-2.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_od_do (2.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (-1.000000) (9.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (6.000000) ) ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (-2.000000) (3.000000) ) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (5.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( minus ( wartosc_od_do (7.000000) (9.000000) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (2.000000) (3.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( razy ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( minus ( wartosc_dokladna (-10.000000) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-7.000000) (6.000000) ) ) ) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( podzielic ( minus ( wartosc_dokladnosc (2.000000) (2.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (-8.000000) (-3.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ) ;;
assert (a =. 6.3022466039707421);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (9.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) ) ;;
assert (a =. 0.5);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (2.000000) (8.000000) ) ( plus ( razy ( podzielic ( plus ( minus ( wartosc_od_do (-4.000000) (4.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_od_do (4.000000) (9.000000) ) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( podzielic ( wartosc_od_do (1.000000) (4.000000) ) ( wartosc_od_do (3.000000) (7.000000) ) ) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-2.000000) (8.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( razy ( wartosc_od_do (6.000000) (7.000000) ) ( wartosc_dokladna (1.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (2.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) (9.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-10.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (4.000000) ) ) ;;
assert (a =. -20.);;
let a = min_wartosc ( minus ( podzielic ( minus ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( razy ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ) ( podzielic ( wartosc_od_do (-7.000000) (9.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-2.000000) (2.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( razy ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_od_do (-1.000000) (8.000000) ) ( wartosc_od_do (-6.000000) (-1.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( wartosc_dokladnosc (2.000000) (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.117777777777777773);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( minus ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_dokladnosc (5.000000) (7.000000) ) ) ;;
assert (a =. -0.5);;
let a = max_wartosc ( minus ( wartosc_od_do (-8.000000) (-5.000000) ) ( minus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ( wartosc_od_do (-4.000000) (7.000000) ) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ;;
assert (a =. -12.);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-7.000000) (9.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( plus ( wartosc_od_do (7.000000) (7.000000) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (3.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-5.000000) (9.000000) ) ) ;;
assert (a =. -0.201633229156164939);;
let a = max_wartosc ( minus ( wartosc_od_do (-10.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a =. 0.437142857142857111);;
let a = sr_wartosc ( razy ( wartosc_od_do (3.000000) (8.000000) ) ( wartosc_dokladnosc (-2.000000) (5.000000) ) ) ;;
assert (a =. -11.25);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( razy ( plus ( podzielic ( wartosc_od_do (6.000000) (8.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-4.000000) (1.000000) ) ( podzielic ( wartosc_od_do (-5.000000) (2.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a =. -2.85714285714285676);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) ) ( wartosc_od_do (-1.000000) (1.000000) ) ) (-3.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( plus ( plus ( wartosc_dokladna (-2.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (7.000000) ) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (5.000000) (7.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( plus ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_od_do (-8.000000) (5.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( podzielic ( plus ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_od_do (7.000000) (9.000000) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( minus ( wartosc_od_do (-8.000000) (-1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert (a =. 2.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (8.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-9.000000) (7.000000) ) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-2.000000) (7.000000) ) ) ;;
assert (a =. -3.5);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (-7.000000) (-1.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (-3.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( minus ( wartosc_od_do (6.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 7.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (3.000000) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ;;
assert (a =. 44.6782000000000039);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (2.000000) ) ( wartosc_dokladnosc (-1.000000) (6.000000) ) ) ;;
assert (a =. 4.32480000000000064);;
let a = in_wartosc ( minus ( wartosc_od_do (-10.000000) (-2.000000) ) ( plus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-3.000000) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (3.000000) (4.000000) ) ) ) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-8.000000) (3.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -31.04);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladnosc (-7.000000) (8.000000) ) ) ( minus ( plus ( wartosc_od_do (-1.000000) (9.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( razy ( podzielic ( plus ( wartosc_od_do (0.000000) (2.000000) ) ( plus ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( plus ( wartosc_dokladna (7.000000) ) ( plus ( minus ( wartosc_od_do (-8.000000) (-7.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( wartosc_dokladnosc (-7.000000) (2.000000) ) ) ) ) ) ( podzielic ( wartosc_od_do (-8.000000) (-7.000000) ) ( podzielic ( wartosc_dokladnosc (5.000000) (9.000000) ) ( wartosc_od_do (-7.000000) (-7.000000) ) ) ) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (6.000000) (7.000000) ) ( wartosc_dokladnosc (-10.000000) (2.000000) ) ) ;;
assert (a =. -0.588235294117647189);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ;;
assert (a =. -5.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -15.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( plus ( wartosc_od_do (-6.000000) (7.000000) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) ) ;;
assert (a =. 0.840000000000000746);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( minus ( wartosc_od_do (-5.000000) (4.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( razy ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ( minus ( wartosc_od_do (6.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -1.0133333333333332);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_od_do (-6.000000) (3.000000) ) ) ;;
assert (a =. 13.);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( plus ( razy ( razy ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (-3.000000) (8.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ;;
assert (a =. 3.76);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( razy ( wartosc_dokladnosc (6.000000) (2.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (-1.000000) (8.000000) ) ( razy ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ( wartosc_od_do (-8.000000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (2.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (1.000000) (8.000000) ) ) ) (-9.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-3.000000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ) ( wartosc_dokladnosc (7.000000) (3.000000) ) ) ;;
assert (a =. 0.11112143786550753);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( minus ( wartosc_od_do (-10.000000) (0.000000) ) ( plus ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (2.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( minus ( razy ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_od_do (-10.000000) (-7.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -1.32500000000000018);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-6.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) ;;
assert (a =. 0.99009900990099009);;
let a = sr_wartosc ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( plus ( razy ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_od_do (-2.000000) (9.000000) ) ) ) ;;
assert (a =. -342.);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (-3.000000) (4.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( razy ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (6.000000) ) ( wartosc_dokladnosc (3.000000) (9.000000) ) ) (-9.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.1);;
let a = in_wartosc ( minus ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_dokladna (-2.000000) ) ) (-2.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-7.000000) (-1.000000) ) ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-10.000000) (6.000000) ) ) ) (1.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( podzielic ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ( wartosc_od_do (-5.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladna (2.000000) ) ( plus ( wartosc_od_do (6.000000) (6.000000) ) ( wartosc_dokladnosc (-10.000000) (6.000000) ) ) ) ( wartosc_dokladnosc (-1.000000) (7.000000) ) ) ;;
assert (a =. -1.36478260869565204);;
let a = max_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (2.000000) ) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (5.000000) ) ) ;;
assert (a =. -3.15);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. 14.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( razy ( wartosc_dokladnosc (6.000000) (8.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a =. 0.483091787439613563);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (1.000000) ) ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (3.000000) (2.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( minus ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( plus ( wartosc_od_do (-1.000000) (5.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) ) ;;
assert (a =. -9.09500000000000242);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (8.000000) ) ( wartosc_dokladnosc (4.000000) (5.000000) ) ) ;;
assert (a =. -6.992);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -9.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -1.16666666666666652);;
let a = max_wartosc ( plus ( wartosc_od_do (-3.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (5.000000) ) ( minus ( razy ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (9.000000) (3.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -0.8);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -1.11111111111111116);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (4.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (1.000000) (4.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (1.000000) (5.000000) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( plus ( razy ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ( razy ( podzielic ( wartosc_dokladnosc (1.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( plus ( wartosc_od_do (7.000000) (8.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ( minus ( plus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (3.000000) ) ) ( plus ( wartosc_od_do (-9.000000) (-4.000000) ) ( wartosc_dokladna (-5.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-1.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (4.000000) ) ( wartosc_dokladnosc (-1.000000) (8.000000) ) ) ;;
assert (a =. -5.72);;
let a = in_wartosc ( razy ( razy ( minus ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (6.000000) (7.000000) ) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 7.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (3.000000) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ;;
assert (a =. -5.85);;
let a = sr_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. 13.5);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (5.000000) (5.000000) ) ) ) ;;
assert (a =. -5.75);;
let a = max_wartosc ( plus ( razy ( razy ( wartosc_od_do (-9.000000) (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( plus ( wartosc_dokladna (6.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (-6.000000) ) ) ) ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (-9.000000) (9.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( plus ( plus ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ;;
assert (a =. 1.42857142857142883);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( plus ( minus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (-6.000000) ) ) ( wartosc_od_do (2.000000) (9.000000) ) ) ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (6.000000) (8.000000) ) ) ( wartosc_dokladnosc (7.000000) (3.000000) ) ) ;;
assert (a =. -7.17645833333333272);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (9.000000) ) ( razy ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( podzielic ( wartosc_od_do (-2.000000) (-1.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-5.000000) (3.000000) ) ( wartosc_od_do (1.000000) (8.000000) ) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ;;
assert (a =. -7.87812500000000071);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) ( podzielic ( wartosc_od_do (-8.000000) (-2.000000) ) ( wartosc_od_do (-8.000000) (-8.000000) ) ) ) ;;
assert (a =. 215.);;
let a = max_wartosc ( podzielic ( plus ( plus ( wartosc_od_do (-5.000000) (-3.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. -0.157894736842105254);;
let a = max_wartosc ( razy ( wartosc_od_do (3.000000) (4.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. 36.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-8.000000) (-1.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. -4.5);;
let a = sr_wartosc ( razy ( podzielic ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ( podzielic ( wartosc_dokladnosc (1.000000) (8.000000) ) ( wartosc_od_do (-10.000000) (-1.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-8.000000) (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladna (-2.000000) ) ( minus ( wartosc_od_do (-1.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-1.000000) (9.000000) ) ) (5.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (5.000000) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) ;;
assert (a =. -9.5);;
let a = in_wartosc ( minus ( plus ( wartosc_od_do (-9.000000) (-5.000000) ) ( wartosc_dokladnosc (7.000000) (3.000000) ) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (-7.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) (-3.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( minus ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_od_do (-3.000000) (6.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 24.);;
let a = sr_wartosc ( podzielic ( podzielic ( razy ( minus ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-2.000000) (4.000000) ) ) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ( wartosc_dokladnosc (4.000000) (7.000000) ) ) ( wartosc_od_do (-1.000000) (-1.000000) ) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. -5.71009615384615365);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladnosc (-6.000000) (7.000000) ) ) ;;
assert (a =. 6.4);;
let a = min_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 0.166666666666666657);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (-4.000000) (7.000000) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (9.000000) (4.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (3.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) ;;
assert (a =. 1.20000000000000018);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (8.000000) ) ( wartosc_od_do (3.000000) (8.000000) ) ) ;;
assert (a =. -1.6625);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-9.000000) (-6.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) (-10.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( razy ( plus ( wartosc_od_do (2.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) ( wartosc_dokladnosc (1.000000) (1.000000) ) ) ;;
assert (a =. -53.0503050305030541);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( razy ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (-1.000000) ) ) ;;
assert (a =. -5.);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (3.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-10.000000) (-2.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (9.000000) ) ) ( razy ( wartosc_dokladnosc (3.000000) (6.000000) ) ( wartosc_od_do (3.000000) (6.000000) ) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. 65.2628571428571291);;
let a = sr_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_od_do (2.000000) (3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (6.000000) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (1.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ) ) ;;
assert (a =. 6.11832611832611839);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-3.000000) ) ( wartosc_dokladna (7.000000) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (1.000000) (3.000000) ) ( wartosc_dokladnosc (1.000000) (8.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (3.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.000000) (2.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (2.000000) (1.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. -1.02);;
let a = in_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-5.000000) (-4.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( plus ( razy ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( podzielic ( wartosc_od_do (8.000000) (9.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ) ( wartosc_dokladna (-10.000000) ) ) ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( podzielic ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-10.000000) (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-9.000000) (-1.000000) ) ) ) ( wartosc_od_do (5.000000) (7.000000) ) ) ;;
assert (a =. 1.40000000000000013);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-6.000000) ) ( minus ( minus ( podzielic ( podzielic ( podzielic ( podzielic ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ( wartosc_od_do (-5.000000) (1.000000) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-1.000000) (6.000000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (3.000000) (3.000000) ) ( wartosc_od_do (-1.000000) (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_od_do (5.000000) (6.000000) ) ( plus ( podzielic ( wartosc_dokladna (1.000000) ) ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-5.000000) (5.000000) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) ;;
assert (a =. -3.01);;
let a = min_wartosc ( razy ( wartosc_od_do (-5.000000) (-3.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -30.);;
let a = max_wartosc ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-6.000000) (8.000000) ) ) ;;
assert (a =. 64.8000000000000114);;
let a = sr_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) (-4.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ;;
assert (a =. 6.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (-3.000000) (3.000000) ) ) ;;
assert (a =. -0.0809061488673139262);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( razy ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ( wartosc_dokladnosc (6.000000) (4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 16.);;
let a = min_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( minus ( wartosc_od_do (1.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ;;
assert (a =. 8.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (8.000000) (4.000000) ) ) ) ;;
assert (a =. 1.67999999999999972);;
let a = min_wartosc ( razy ( razy ( wartosc_od_do (-5.000000) (-5.000000) ) ( wartosc_dokladnosc (3.000000) (5.000000) ) ) ( wartosc_od_do (-8.000000) (3.000000) ) ) ;;
assert (a =. -47.25);;
let a = max_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. 1.6);;
let a = min_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -56.);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (6.000000) (8.000000) ) ) (2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladna (5.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ( razy ( plus ( podzielic ( wartosc_dokladnosc (2.000000) (7.000000) ) ( wartosc_dokladnosc (9.000000) (4.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ( minus ( wartosc_dokladnosc (4.000000) (2.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ) ) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 20.2709101735236104);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_od_do (-6.000000) (2.000000) ) ) ;;
assert (a =. 5.0600000000000005);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-7.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (-8.000000) (3.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (-10.000000) (8.000000) ) ) ;;
assert (a =. -54.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (8.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( plus ( podzielic ( wartosc_dokladnosc (-4.000000) (4.000000) ) ( wartosc_dokladnosc (-6.000000) (6.000000) ) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (5.000000) (7.000000) ) ) ) ;;
assert (a =. 10.7331759960754027);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-10.000000) (8.000000) ) ( wartosc_dokladna (-9.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. 12.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (5.000000) ) ( wartosc_od_do (1.000000) (7.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_dokladna (-1.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (8.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -1.20000000000000018);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ;;
assert (a =. -0.285714285714285698);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_dokladnosc (-7.000000) (2.000000) ) ) ( wartosc_od_do (9.000000) (9.000000) ) ) (-2.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-9.000000) (4.000000) ) ) (-6.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) ;;
assert (a =. 12.);;
let a = min_wartosc ( podzielic ( minus ( podzielic ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (-2.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( plus ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (-3.000000) (1.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -0.714285714285714191);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (3.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-6.000000) (5.000000) ) ) (-7.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladnosc (2.000000) (6.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 0.857142857142857095);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (3.000000) (3.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( razy ( wartosc_dokladnosc (-4.000000) (5.000000) ) ( podzielic ( wartosc_od_do (6.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-2.000000) (2.000000) ) ) ) ) ( podzielic ( wartosc_dokladnosc (2.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (-9.000000) (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -7.);;
let a = in_wartosc ( podzielic ( podzielic ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( wartosc_dokladna (2.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( minus ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( minus ( razy ( wartosc_od_do (0.000000) (2.000000) ) ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-9.000000) (2.000000) ) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ) ) ;;
assert (a =. 0.17114914425427874);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( podzielic ( minus ( podzielic ( wartosc_od_do (-10.000000) (-5.000000) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ( minus ( wartosc_dokladna (2.000000) ) ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ) ( wartosc_dokladnosc (-9.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-7.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (1.000000) (2.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-9.000000) (7.000000) ) ) (-3.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (7.000000) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-8.000000) (3.000000) ) ) ;;
assert (a =. -30.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 3.33333333333333304);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (9.000000) ) ( wartosc_od_do (1.000000) (5.000000) ) ) ;;
assert (a =. -3.27);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (-4.000000) (1.000000) ) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) (5.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladnosc (9.000000) (8.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ;;
assert (a =. 10.);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladna (-4.000000) ) ( minus ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( wartosc_dokladnosc (9.000000) (9.000000) ) ) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 10.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-4.000000) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (1.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ;;
assert (a =. -10.91);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -6.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (-9.000000) (3.000000) ) ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert (a =. 5.);;
let a = min_wartosc ( razy ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 28.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (7.000000) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_od_do (-9.000000) (-5.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. -4.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ;;
assert (a =. 7.16);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( wartosc_od_do (-7.000000) (-3.000000) ) ) ;;
assert (a =. -0.0816326530612244833);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (-6.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (7.000000) (9.000000) ) ) ;;
assert (a =. -42.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (4.000000) ) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (8.000000) (9.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( wartosc_dokladnosc (5.000000) (6.000000) ) ) ) ;;
assert (a =. 2.60869565217391308);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (3.000000) (9.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (8.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (2.000000) ) ) (7.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-4.000000) (6.000000) ) ) ;;
assert (a =. 7.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -14.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (9.000000) (2.000000) ) ( wartosc_od_do (-7.000000) (5.000000) ) ) ;;
assert (a =. -64.2599999999999909);;
let a = in_wartosc ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (7.000000) ) ) (-3.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( podzielic ( razy ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( razy ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (-5.000000) ) ) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 37.5674999999999955);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-8.000000) ) ( minus ( wartosc_od_do (1.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ;;
assert (a =. -5.66666666666666696);;
let a = in_wartosc ( plus ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( razy ( razy ( wartosc_dokladna (-4.000000) ) ( plus ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ) ) ( minus ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( minus ( podzielic ( wartosc_dokladnosc (5.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (4.000000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 17.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 1.11111111111111116);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ) ;;
assert (a =. 2.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (8.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( plus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (8.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (-2.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (5.000000) ) ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (-9.000000) (9.000000) ) ) ) (-1.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-3.000000) (6.000000) ) ) ;;
assert (a =. 8.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ( razy ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( plus ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) ) ;;
assert (a =. 3.20123076923076955);;
let a = in_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( razy ( wartosc_dokladnosc (2.000000) (1.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ) (4.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( podzielic ( razy ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (4.000000) (5.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.000000) (3.000000) ) ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (2.000000) (4.000000) ) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-6.000000) (6.000000) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_dokladna (8.000000) ) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) ;;
assert (a =. -0.503220611916264104);;
let a = max_wartosc ( razy ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( plus ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ( wartosc_od_do (3.000000) (5.000000) ) ) ;;
assert (a =. 45.3000000000000043);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladna (9.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (2.000000) ) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (7.000000) ) ( minus ( wartosc_od_do (0.000000) (5.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (7.000000) (9.000000) ) ( wartosc_od_do (-3.000000) (4.000000) ) ) ;;
assert (a =. 3.37);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (3.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ) ( wartosc_dokladna (-3.000000) ) ) (-7.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-7.000000) (7.000000) ) ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( minus ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( razy ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) ;;
assert (a =. -48.);;
let a = min_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-8.000000) (8.000000) ) ) ;;
assert (a =. -9.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-7.000000) ) ( wartosc_dokladnosc (-2.000000) (5.000000) ) ) ;;
assert (a =. 4.29824561403508731);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) (8.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (9.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (6.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ) (-3.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.000000) (-2.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-9.000000) (6.000000) ) ) ;;
assert (a =. 0.354609929078014141);;
let a = in_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-1.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( minus ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-2.000000) (3.000000) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( minus ( minus ( plus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (3.000000) (1.000000) ) ( wartosc_od_do (-2.000000) (7.000000) ) ) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( razy ( wartosc_od_do (-6.000000) (3.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (1.000000) (8.000000) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) ;;
assert (a =. 0.0800000000000000711);;
let a = sr_wartosc ( razy ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladnosc (4.000000) (8.000000) ) ) ;;
assert (a =. 4.32);;
let a = sr_wartosc ( razy ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) (7.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.000000) (3.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 1.66666666666666652);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( razy ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ) ) ;;
assert (a =. -0.145585837409736768);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (8.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_od_do (3.000000) (4.000000) ) ( wartosc_od_do (-7.000000) (-3.000000) ) ) ) ;;
assert (a =. 6.16666666666666696);;
let a = max_wartosc ( minus ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( minus ( podzielic ( minus ( plus ( plus ( razy ( minus ( podzielic ( wartosc_od_do (-6.000000) (-6.000000) ) ( plus ( wartosc_dokladna (4.000000) ) ( razy ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (-7.000000) (-1.000000) ) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (6.000000) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (8.000000) (8.000000) ) ) ) ) ( minus ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (1.000000) (2.000000) ) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ) ( razy ( wartosc_od_do (-3.000000) (5.000000) ) ( razy ( wartosc_dokladna (-6.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ) ) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ( wartosc_dokladna (3.000000) ) ) (-4.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( podzielic ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ( minus ( wartosc_od_do (-6.000000) (-5.000000) ) ( razy ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) ) ;;
assert (a =. -6.06060606060606055);;
let a = sr_wartosc ( razy ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( minus ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (5.000000) (6.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( minus ( plus ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (8.000000) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ( wartosc_dokladnosc (5.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( minus ( wartosc_dokladna (-1.000000) ) ( minus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ( wartosc_od_do (4.000000) (7.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (7.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 2.47999999999999954);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-6.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladna (-1.000000) ) ( razy ( minus ( wartosc_od_do (1.000000) (2.000000) ) ( wartosc_dokladnosc (-10.000000) (3.000000) ) ) ( podzielic ( wartosc_dokladnosc (6.000000) (7.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. -7.4632499999999995);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (5.000000) (5.000000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-1.000000) (8.000000) ) ) (-8.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( razy ( podzielic ( minus ( wartosc_dokladnosc (-1.000000) (8.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (6.000000) (9.000000) ) ) ) ;;
assert (a =. -15.1199999999999974);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (6.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (-1.000000) (4.000000) ) ( podzielic ( wartosc_od_do (-5.000000) (5.000000) ) ( podzielic ( wartosc_od_do (1.000000) (6.000000) ) ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (6.000000) (7.000000) ) ) ) ) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (3.000000) (9.000000) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.000000) (5.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (1.000000) ) ( razy ( wartosc_od_do (-7.000000) (-1.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (5.000000) ) ( wartosc_od_do (-4.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (-3.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-9.000000) (7.000000) ) ) (-1.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) (-2.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-3.000000) (1.000000) ) ) (3.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladna (9.000000) ) ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-6.000000) (5.000000) ) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. 10.9285714285714288);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_od_do (-9.000000) (6.000000) ) ( plus ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_dokladnosc (-10.000000) (8.000000) ) ) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. 6.25000000000000355);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. 1.5);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_od_do (-3.000000) (7.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 8.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-9.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( minus ( wartosc_dokladna (8.000000) ) ( razy ( wartosc_dokladnosc (-3.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (7.000000) ) ( wartosc_dokladna (6.000000) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. 1.11111111111111116);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (4.000000) (9.000000) ) ( wartosc_dokladnosc (2.000000) (7.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-7.000000) (9.000000) ) ( wartosc_dokladnosc (2.000000) (7.000000) ) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) (5.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 36.);;
let a = in_wartosc ( minus ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_dokladnosc (-9.000000) (9.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. -8.37362637362637408);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (1.000000) (7.000000) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-3.000000) (4.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_od_do (-5.000000) (9.000000) ) ( wartosc_dokladnosc (-9.000000) (1.000000) ) ) ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ) ) ;;
assert (a =. 0.525833228914461381);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (-9.000000) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( razy ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_od_do (2.000000) (2.000000) ) ) ) (5.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.000000) (6.000000) ) ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) ) ;;
assert (a =. 3.60000000000000053);;
let a = in_wartosc ( razy ( podzielic ( podzielic ( minus ( wartosc_dokladnosc (-1.000000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (8.000000) ) ) ( minus ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-1.000000) (8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (9.000000) ) ) ( minus ( wartosc_dokladnosc (3.000000) (3.000000) ) ( plus ( wartosc_dokladnosc (-5.000000) (7.000000) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ) ) (-8.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (3.000000) ) ) (5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (-1.000000) ) ) ;;
assert (a =. 0.588);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.000000) (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 1.5);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -0.1875);;
let a = min_wartosc ( razy ( wartosc_od_do (-9.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. -7.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-5.000000) ) ( plus ( wartosc_dokladna (1.000000) ) ( podzielic ( razy ( wartosc_od_do (3.000000) (4.000000) ) ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ) (-2.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (-6.000000) ) ) ;;
assert (a =. 28.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (4.000000) ) ( wartosc_dokladnosc (-4.000000) (1.000000) ) ) ;;
assert (a =. -2.13861386138613874);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -3.5);;
let a = max_wartosc ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. -8.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-5.000000) (5.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladnosc (-9.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (1.000000) (2.000000) ) ) ;;
assert (a =. -4.5);;
let a = max_wartosc ( plus ( plus ( podzielic ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-9.000000) (6.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( razy ( razy ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ( plus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (2.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( minus ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-6.000000) (9.000000) ) ) ) ( wartosc_dokladna (-8.000000) ) ) ( plus ( plus ( wartosc_od_do (-8.000000) (7.000000) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ) ;;
assert (a =. -16.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.166666666666666657);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (6.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 1.48000000000000043);;
let a = min_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -16.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-6.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-2.000000) (4.000000) ) ( razy ( wartosc_od_do (-10.000000) (-7.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( minus ( wartosc_dokladnosc (-5.000000) (7.000000) ) ( wartosc_dokladnosc (-6.000000) (9.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( razy ( wartosc_od_do (-4.000000) (-3.000000) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( wartosc_dokladna (9.000000) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (-9.000000) ) ( minus ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_dokladnosc (8.000000) (5.000000) ) ) ) ;;
assert (a =. 1.40000000000000036);;
let a = in_wartosc ( razy ( wartosc_od_do (-4.000000) (9.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) (5.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( minus ( wartosc_dokladna (2.000000) ) ( podzielic ( razy ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (7.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ) ) ( wartosc_od_do (-3.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (6.000000) (5.000000) ) ( wartosc_dokladnosc (5.000000) (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-2.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 8.);;
let a = max_wartosc ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (7.000000) (5.000000) ) ) ) ;;
assert (a =. -16.65);;
let a = sr_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-4.000000) (-1.000000) ) ) ) ;;
assert (a =. 2.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_dokladna (-8.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( razy ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ) ) ( plus ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_od_do (-1.000000) (-1.000000) ) ) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-5.000000) (1.000000) ) ) ;;
assert (a =. 50.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ;;
assert (a =. -1.5);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -7.);;
let a = min_wartosc ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. 3.);;
let a = max_wartosc ( minus ( podzielic ( minus ( wartosc_od_do (-3.000000) (4.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladnosc (-1.000000) (9.000000) ) ) ;;
assert (a =. 2.465);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-5.000000) (9.000000) ) ( wartosc_od_do (-8.000000) (-1.000000) ) ) ;;
assert (a =. -9.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-7.000000) (-5.000000) ) ( wartosc_od_do (2.000000) (8.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ;;
assert (a =. -6.07);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (8.000000) (4.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) (8.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. -4.5);;
let a = max_wartosc ( podzielic ( podzielic ( plus ( wartosc_od_do (-9.000000) (-2.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ( podzielic ( wartosc_dokladnosc (1.000000) (8.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_od_do (1.000000) (9.000000) ) ) ( razy ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ) (5.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (5.000000) (1.000000) ) ( wartosc_dokladnosc (-2.000000) (4.000000) ) ) ;;
assert (a =. 6.87);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladnosc (6.000000) (8.000000) ) ( wartosc_od_do (1.000000) (2.000000) ) ) ( plus ( podzielic ( wartosc_dokladnosc (4.000000) (1.000000) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (1.000000) (8.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -3.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) ) ;;
assert (a =. -1.02040816326530592);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (7.000000) (9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -31.85);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -0.875);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ) ;;
assert (a =. -10.605);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (3.000000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. -2.97);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-2.000000) ) ( podzielic ( wartosc_od_do (1.000000) (7.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. -1.33333333333333348);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (-3.000000) (8.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( wartosc_dokladna (1.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_dokladnosc (1.000000) (2.000000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) (-2.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( razy ( wartosc_dokladnosc (-7.000000) (9.000000) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( plus ( razy ( wartosc_od_do (4.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ;;
assert (a =. -0.561224489795918435);;
let a = min_wartosc ( minus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (8.000000) ) ( plus ( wartosc_od_do (-2.000000) (3.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. 76.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-10.000000) (-8.000000) ) ) ;;
assert (a =. -0.5);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (7.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -8.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-4.000000) (-1.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -0.125);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( razy ( wartosc_dokladna (-6.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (-4.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (9.000000) ) ( plus ( wartosc_od_do (2.000000) (9.000000) ) ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ) ;;
assert (a =. 13.45);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-6.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( plus ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) ;;
assert (a =. 7.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (1.000000) (7.000000) ) ( razy ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-10.000000) (9.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. 6.5);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -0.13285714285714284);;
let a = max_wartosc ( plus ( wartosc_od_do (-4.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 9.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( podzielic ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-3.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (1.000000) ) ( wartosc_dokladnosc (-10.000000) (5.000000) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (9.000000) ) ) ;;
assert (a =. 9.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (-1.000000) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (-5.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (1.000000) (5.000000) ) ( wartosc_dokladnosc (-3.000000) (2.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( razy ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 102.72);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (1.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. -0.88375);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-9.000000) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( minus ( wartosc_dokladnosc (1.000000) (2.000000) ) ( wartosc_od_do (-10.000000) (-10.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ) ;;
assert (a =. 3.17376);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( minus ( razy ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. 0.103626943005181327);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -0.98);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (9.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 8.91);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (1.000000) ) ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (-7.000000) (4.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -10.5);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) (9.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (8.000000) ) ( wartosc_od_do (-6.000000) (-5.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-2.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (6.000000) (2.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( razy ( podzielic ( wartosc_od_do (-6.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-3.000000) (6.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( minus ( wartosc_od_do (-1.000000) (4.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ;;
assert (a =. 58.5);;
let a = in_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( podzielic ( plus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (6.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( podzielic ( podzielic ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladnosc (-3.000000) (4.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (9.000000) ) ( wartosc_dokladna (-10.000000) ) ) (7.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (4.000000) (5.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ;;
assert (a =. 3.8);;
let a = min_wartosc ( plus ( wartosc_od_do (-8.000000) (7.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) (-4.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (8.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -1.33333333333333326);;
let a = min_wartosc ( podzielic ( wartosc_od_do (3.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -1.33333333333333326);;
let a = sr_wartosc ( podzielic ( podzielic ( podzielic ( minus ( wartosc_dokladna (7.000000) ) ( minus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ) ( plus ( wartosc_od_do (2.000000) (8.000000) ) ( wartosc_od_do (-7.000000) (-1.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-6.000000) ) ) ( razy ( minus ( wartosc_od_do (2.000000) (2.000000) ) ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_dokladnosc (9.000000) (5.000000) ) ) ;;
assert (a =. 10.1115);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( razy ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ( wartosc_dokladna (-8.000000) ) ) ) ;;
assert (a =. 35.6);;
let a = max_wartosc ( plus ( plus ( wartosc_od_do (-6.000000) (3.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ( podzielic ( wartosc_dokladna (7.000000) ) ( minus ( wartosc_dokladnosc (-5.000000) (7.000000) ) ( wartosc_dokladnosc (-10.000000) (2.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-10.000000) (8.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ( podzielic ( podzielic ( plus ( plus ( wartosc_od_do (3.000000) (8.000000) ) ( plus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (5.000000) (8.000000) ) ) ) ) ( podzielic ( wartosc_od_do (-6.000000) (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_od_do (2.000000) (6.000000) ) ( wartosc_od_do (-1.000000) (5.000000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladnosc (3.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (3.000000) (5.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (7.000000) (9.000000) ) ) ) ;;
assert (a =. -0.0549450549450549441);;
let a = max_wartosc ( minus ( razy ( razy ( minus ( podzielic ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladnosc (2.000000) (4.000000) ) ) ( podzielic ( minus ( wartosc_od_do (-9.000000) (2.000000) ) ( minus ( razy ( wartosc_dokladnosc (7.000000) (4.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) ) ( minus ( wartosc_dokladna (-6.000000) ) ( podzielic ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (6.000000) (4.000000) ) ) ( minus ( wartosc_dokladnosc (-5.000000) (6.000000) ) ( podzielic ( wartosc_od_do (1.000000) (2.000000) ) ( wartosc_od_do (6.000000) (9.000000) ) ) ) ) ) ) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ( plus ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( razy ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (5.000000) (8.000000) ) ( minus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ) ;;
assert (a =. 4.4300000000000006);;
let a = in_wartosc ( minus ( minus ( minus ( wartosc_dokladnosc (5.000000) (6.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladnosc (1.000000) (6.000000) ) ) ( wartosc_od_do (2.000000) (5.000000) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.000000) (8.000000) ) ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (0.000000) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_od_do (-10.000000) (-5.000000) ) ( razy ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) (-10.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ;;
assert (a =. 9.7);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-3.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (5.000000) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( razy ( minus ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( minus ( wartosc_dokladna (5.000000) ) ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. 8.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (3.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. 7.);;
let a = in_wartosc ( minus ( plus ( podzielic ( minus ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( wartosc_dokladnosc (9.000000) (9.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) (-9.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ;;
assert (a =. 5.2);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (5.000000) (6.000000) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( minus ( minus ( wartosc_dokladna (9.000000) ) ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. -168.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.000000) (4.000000) ) ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (3.000000) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ;;
assert (a =. -0.709000000000000075);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_od_do (-3.000000) (6.000000) ) ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ) ) ( wartosc_dokladnosc (-3.000000) (9.000000) ) ) ;;
assert (a =. 2.05063291139240533);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) ) (-9.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( plus ( podzielic ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (6.000000) (7.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ;;
assert (a =. 6.75);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (8.000000) ) ( wartosc_dokladnosc (8.000000) (9.000000) ) ) ;;
assert (a =. -1.03846153846153832);;
let a = min_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( minus ( wartosc_od_do (-6.000000) (1.000000) ) ( wartosc_dokladna (9.000000) ) ) (1.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ;;
assert (a =. 1.125);;
let a = min_wartosc ( razy ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (9.000000) ) ) ;;
assert (a =. -81.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) ;;
assert (a =. -0.27777777777777779);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 0.714285714285714191);;
let a = min_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( razy ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (5.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 108.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (6.000000) (9.000000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (3.000000) ) ) ;;
assert (a =. 0.97);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ) ;;
assert (a =. -0.248911014312383327);;
let a = sr_wartosc ( razy ( razy ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( plus ( wartosc_dokladna (-7.000000) ) ( podzielic ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_od_do (-10.000000) (-2.000000) ) ) ) ( wartosc_dokladna (2.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (3.000000) (6.000000) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ;;
assert (a =. -25.44);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (4.000000) ) ) (-5.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (-4.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (4.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.44444444444444442);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( wartosc_dokladna (2.000000) ) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (7.000000) (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (2.000000) (6.000000) ) ) ( podzielic ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) ( wartosc_od_do (2.000000) (4.000000) ) ) ) ) ( wartosc_dokladnosc (-1.000000) (4.000000) ) ) (3.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (-5.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (6.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (3.000000) ) ) ( wartosc_od_do (-7.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -14.);;
let a = in_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (7.000000) (8.000000) ) ) ) (9.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( razy ( wartosc_od_do (-6.000000) (5.000000) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) ;;
assert (a =. -42.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (9.000000) (2.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -9.07);;
let a = max_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -3.);;
let a = sr_wartosc ( plus ( wartosc_od_do (2.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 4.5);;
let a = min_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ;;
assert (a =. -21.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. -2.25);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladnosc (-1.000000) (4.000000) ) ( podzielic ( plus ( minus ( wartosc_od_do (-2.000000) (4.000000) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ( wartosc_dokladnosc (-6.000000) (3.000000) ) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (1.000000) ) ) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( plus ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( wartosc_dokladna (1.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( podzielic ( wartosc_dokladnosc (7.000000) (1.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -62.37);;
let a = sr_wartosc ( minus ( wartosc_od_do (-4.000000) (-4.000000) ) ( minus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (-4.000000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-9.000000) (-5.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ) ;;
assert (a =. -6.79981983785406818);;
let a = min_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (8.000000) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) ;;
assert (a =. 0.341584158415841554);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (-2.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ;;
assert (a =. -9.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (6.000000) (3.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -60.);;
let a = in_wartosc ( plus ( wartosc_od_do (-9.000000) (-2.000000) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (4.000000) ) ( wartosc_od_do (-5.000000) (1.000000) ) ) ) (4.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-10.000000) (4.000000) ) ) ) ;;
assert (a =. 18.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( minus ( wartosc_od_do (-6.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) (1.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( plus ( plus ( podzielic ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (-7.000000) (9.000000) ) ( podzielic ( wartosc_od_do (2.000000) (6.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( minus ( podzielic ( wartosc_dokladna (9.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_od_do (-7.000000) (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) (-6.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( minus ( razy ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ) ;;
assert (a =. 0.0999999999999996447);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (1.000000) (8.000000) ) ( plus ( wartosc_dokladnosc (-10.000000) (7.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. -2.056);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( wartosc_od_do (5.000000) (8.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladnosc (3.000000) (8.000000) ) ) (2.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (-8.000000) (6.000000) ) ( plus ( wartosc_od_do (-8.000000) (1.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a =. 11.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (4.000000) (1.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_od_do (-3.000000) (3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( plus ( wartosc_od_do (-1.000000) (4.000000) ) ( minus ( wartosc_od_do (-1.000000) (1.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (3.000000) (4.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( minus ( wartosc_dokladnosc (6.000000) (7.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -9.81);;
let a = min_wartosc ( podzielic ( razy ( plus ( minus ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( podzielic ( plus ( wartosc_dokladnosc (6.000000) (7.000000) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ( podzielic ( podzielic ( razy ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_od_do (5.000000) (6.000000) ) ( wartosc_dokladnosc (7.000000) (4.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( razy ( wartosc_dokladnosc (2.000000) (2.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) ) ;;
assert (a =. 0.171785886071600363);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 1.25);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (2.000000) ) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) (2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( razy ( wartosc_od_do (-5.000000) (6.000000) ) ( minus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (1.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.000000) (9.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (9.000000) ) ) ) ) (6.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( podzielic ( plus ( plus ( plus ( wartosc_od_do (-5.000000) (6.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ) ( minus ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ) ;;
assert (a =. -3.888);;
let a = max_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 11.);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (-9.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (2.000000) ) ( plus ( razy ( wartosc_od_do (1.000000) (8.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( plus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -7.);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. -9.);;
let a = max_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (-7.000000) (1.000000) ) ( minus ( razy ( minus ( wartosc_od_do (-7.000000) (8.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (-6.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -11.5);;
let a = max_wartosc ( razy ( wartosc_od_do (-4.000000) (-4.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( minus ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-5.000000) (-1.000000) ) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( minus ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (4.000000) (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( plus ( wartosc_dokladnosc (7.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ( minus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert (a =. -3.5600000000000005);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -5.);;
let a = in_wartosc ( minus ( wartosc_od_do (6.000000) (7.000000) ) ( wartosc_od_do (-9.000000) (2.000000) ) ) (7.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (-4.000000) (-2.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (9.000000) (3.000000) ) ) ;;
assert (a =. 0.80183276059564712);;
let a = max_wartosc ( razy ( minus ( wartosc_od_do (-5.000000) (5.000000) ) ( wartosc_od_do (3.000000) (3.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 40.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (8.000000) ) ( wartosc_od_do (-7.000000) (-5.000000) ) ) ;;
assert (a =. -0.52571428571428569);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ;;
assert (a =. -8.);;
let a = max_wartosc ( plus ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ;;
assert (a =. -6.97);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( wartosc_od_do (3.000000) (6.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (4.000000) ) ( wartosc_od_do (-7.000000) (5.000000) ) ) ;;
assert (a =. 1.04);;
let a = sr_wartosc ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -48.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (3.000000) (4.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladnosc (-3.000000) (1.000000) ) ( wartosc_dokladnosc (-8.000000) (3.000000) ) ) ( podzielic ( wartosc_od_do (-8.000000) (4.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (1.000000) ) ( podzielic ( wartosc_dokladnosc (3.000000) (3.000000) ) ( podzielic ( plus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (5.000000) ) ) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( razy ( plus ( wartosc_dokladna (-5.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) (-5.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (6.000000) (2.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( wartosc_dokladnosc (-6.000000) (5.000000) ) ) ) ;;
assert (a =. 6.30421052631578949);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 1.11022302462515654e-16);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (-5.000000) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( razy ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-5.000000) (-3.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (8.000000) (3.000000) ) ( wartosc_od_do (-7.000000) (-3.000000) ) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. -0.240952380952380946);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ;;
assert (a =. -5.1);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-7.000000) (9.000000) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (-3.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) (9.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( minus ( wartosc_dokladna (9.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (-7.000000) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (-1.000000) (9.000000) ) ) (9.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (3.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (-2.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (6.000000) ) ( minus ( podzielic ( wartosc_od_do (-3.000000) (4.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-9.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. -1.42);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 6.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-5.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 36.);;
let a = in_wartosc ( razy ( plus ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_od_do (-10.000000) (-3.000000) ) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( plus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( plus ( minus ( wartosc_dokladnosc (-5.000000) (9.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. -1.22142857142857153);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (1.000000) (8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (6.000000) ) ) (-6.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (-7.000000) (-7.000000) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (5.000000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( minus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ) (-2.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-5.000000) (8.000000) ) ) ;;
assert (a =. -0.55555555555555558);;
let a = in_wartosc ( minus ( wartosc_od_do (-4.000000) (8.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (9.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (6.000000) (6.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 14.64);;
let a = in_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) (-4.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (-1.000000) ) ) ;;
assert (a =. 6.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (4.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_dokladnosc (-8.000000) (5.000000) ) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) (-5.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (4.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 1.59999999999999987);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.000000) (9.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ( wartosc_od_do (-10.000000) (4.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (4.000000) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) ;;
assert (a =. -13.);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-4.000000) (-1.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -10.);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) (5.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( plus ( wartosc_dokladnosc (-9.000000) (7.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. 0.909999999999999809);;
let a = in_wartosc ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-2.000000) (3.000000) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. -6.);;
let a = min_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ) ;;
assert (a =. 13.);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (6.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) ) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladnosc (1.000000) (3.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (7.000000) ) ( wartosc_dokladnosc (7.000000) (8.000000) ) ) ;;
assert (a =. -52.92);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (-8.000000) (6.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-2.000000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (1.000000) ) ( wartosc_od_do (-4.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (0.000000) (6.000000) ) ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ) ( wartosc_dokladnosc (-10.000000) (5.000000) ) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (4.000000) ) ( wartosc_od_do (2.000000) (6.000000) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (-4.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ;;
assert (a =. -51.94);;
let a = in_wartosc ( minus ( razy ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-6.000000) (-2.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ( podzielic ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -0.4);;
let a = sr_wartosc ( minus ( wartosc_od_do (-8.000000) (8.000000) ) ( minus ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (8.000000) ) ) ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( razy ( wartosc_od_do (-9.000000) (-1.000000) ) ( wartosc_dokladnosc (7.000000) (9.000000) ) ) ) ;;
assert (a =. 0.600418949042802241);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (-2.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_od_do (-3.000000) (4.000000) ) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.000000) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladnosc (4.000000) (7.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -1.8);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (-7.000000) (8.000000) ) ) (7.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladnosc (-8.000000) (4.000000) ) ) ( plus ( wartosc_dokladnosc (-8.000000) (5.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( plus ( wartosc_dokladna (9.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) ;;
assert (a =. 1.08);;
let a = max_wartosc ( razy ( minus ( wartosc_od_do (-8.000000) (-2.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (1.000000) (5.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( minus ( wartosc_dokladnosc (4.000000) (8.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (2.000000) (3.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (7.000000) (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (-6.000000) (-2.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -4.25);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-10.000000) (-6.000000) ) ) ;;
assert (a =. 0.933333333333333348);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-2.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ;;
assert (a =. -0.757575757575757569);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (7.000000) ) ( minus ( wartosc_dokladna (-3.000000) ) ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -1.25);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( razy ( podzielic ( wartosc_dokladna (-2.000000) ) ( podzielic ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( minus ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (-6.000000) (-4.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (-4.000000) (9.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( plus ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-3.000000) (1.000000) ) ) ;;
assert (a =. -10.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (4.000000) (7.000000) ) ( plus ( wartosc_od_do (1.000000) (6.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ) (1.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (2.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (-6.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (8.000000) (8.000000) ) ) ;;
assert (a =. 14.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (5.000000) (7.000000) ) ( wartosc_od_do (8.000000) (8.000000) ) ) ;;
assert (a =. -3.34999999999999964);;
let a = sr_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (5.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (2.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( plus ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -9.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (4.000000) (5.000000) ) ( razy ( podzielic ( minus ( razy ( plus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( razy ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (7.000000) (7.000000) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ) ( minus ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-10.000000) (-8.000000) ) ) ) ) ) ) ( podzielic ( wartosc_dokladnosc (-4.000000) (5.000000) ) ( minus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ) ( wartosc_od_do (-5.000000) (-1.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -54.);;
let a = max_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (-9.000000) (3.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( wartosc_dokladnosc (1.000000) (5.000000) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. 6.31578947368421062);;
let a = min_wartosc ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a =. -13.);;
let a = in_wartosc ( razy ( wartosc_dokladna (7.000000) ) ( razy ( wartosc_od_do (-4.000000) (3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) (-10.000000);;
assert (a = true);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (8.000000) (5.000000) ) ( minus ( wartosc_od_do (-6.000000) (-5.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ;;
assert (a =. 22.5);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (7.000000) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) ;;
assert (a =. -1.40000000000000013);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-9.000000) (8.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( podzielic ( wartosc_od_do (-9.000000) (9.000000) ) ( plus ( wartosc_dokladnosc (-8.000000) (2.000000) ) ( razy ( wartosc_dokladna (-6.000000) ) ( plus ( wartosc_od_do (-3.000000) (8.000000) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-4.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (8.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (-3.000000) (5.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-2.000000) (1.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. 2.33333333333333304);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( razy ( wartosc_od_do (5.000000) (7.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladnosc (-6.000000) (6.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (-4.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( minus ( wartosc_od_do (5.000000) (5.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ) ) ( wartosc_dokladna (-7.000000) ) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (-3.000000) (-1.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert (a =. -3.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (7.000000) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ;;
assert (a =. -0.767500000000000071);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (7.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-2.000000) ) ( podzielic ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( wartosc_od_do (-10.000000) (-1.000000) ) ( podzielic ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-6.000000) (-6.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -0.88888888888888884);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-8.000000) (3.000000) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) ( wartosc_dokladnosc (2.000000) (7.000000) ) ) ;;
assert (a =. 3.08387170675830458);;
let a = min_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) ;;
assert (a =. 19.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-10.000000) (2.000000) ) ) ;;
assert (a =. 18.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 0.714285714285714191);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( razy ( razy ( wartosc_dokladna (-6.000000) ) ( razy ( wartosc_dokladna (-5.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (3.000000) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) ) ) ( wartosc_od_do (1.000000) (1.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( podzielic ( razy ( wartosc_dokladna (5.000000) ) ( minus ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( razy ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ) ( wartosc_dokladna (9.000000) ) ) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ) ) ;;
assert (a =. -62.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( plus ( minus ( wartosc_dokladnosc (-1.000000) (8.000000) ) ( wartosc_dokladnosc (-1.000000) (9.000000) ) ) ( wartosc_od_do (2.000000) (4.000000) ) ) ) ;;
assert (a =. -0.406926917482407502);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (5.000000) (7.000000) ) ( minus ( podzielic ( wartosc_od_do (-7.000000) (-2.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( minus ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-5.000000) (-2.000000) ) ) ( minus ( wartosc_dokladnosc (-6.000000) (2.000000) ) ( wartosc_dokladnosc (-8.000000) (3.000000) ) ) ) ) ;;
assert (a =. 5.86);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 2.88);;
let a = sr_wartosc ( podzielic ( minus ( podzielic ( wartosc_dokladnosc (5.000000) (9.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) ;;
assert (a =. -0.980612244897959062);;
let a = min_wartosc ( minus ( wartosc_od_do (-10.000000) (-6.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ;;
assert (a =. -9.03);;
let a = min_wartosc ( minus ( wartosc_od_do (-6.000000) (-2.000000) ) ( wartosc_od_do (1.000000) (4.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( razy ( wartosc_od_do (-1.000000) (6.000000) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) ;;
assert (a =. -13.125);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_od_do (-5.000000) (1.000000) ) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) (6.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( razy ( wartosc_od_do (6.000000) (7.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 48.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (6.000000) (2.000000) ) ( plus ( wartosc_dokladna (4.000000) ) ( minus ( razy ( plus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) ( wartosc_dokladnosc (4.000000) (3.000000) ) ) ) ) ;;
assert (a =. 20.639999999999997);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -40.);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-1.000000) (1.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( minus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ) ( plus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (4.000000) (6.000000) ) ) ) ;;
assert (a =. -0.531914893617021267);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (3.000000) ) ( wartosc_dokladnosc (4.000000) (3.000000) ) ) (-10.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. 23.);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (1.000000) (1.000000) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ) ;;
assert (a =. -1.49);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-2.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( razy ( podzielic ( plus ( wartosc_od_do (-10.000000) (9.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ( podzielic ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_od_do (2.000000) (9.000000) ) ) ( plus ( razy ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -16.2000000000000028);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) ( razy ( wartosc_dokladna (-8.000000) ) ( razy ( minus ( minus ( minus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( plus ( wartosc_dokladna (9.000000) ) ( razy ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_od_do (6.000000) (7.000000) ) ) ) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ) ) ;;
assert (a =. 384.);;
let a = sr_wartosc ( plus ( minus ( podzielic ( wartosc_od_do (-5.000000) (-2.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ( wartosc_dokladnosc (1.000000) (2.000000) ) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -13.5657051282051277);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -0.833333333333333259);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-1.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( plus ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-10.000000) (6.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_od_do (-6.000000) (4.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ;;
assert (a =. -13.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-4.000000) (8.000000) ) ) ;;
assert (a =. -5.);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. 11.);;
let a = sr_wartosc ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ( wartosc_od_do (-7.000000) (3.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -4.5);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (6.000000) (7.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 33.480000000000004);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-8.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ( wartosc_dokladnosc (1.000000) (5.000000) ) ) ;;
assert (a =. -3.71666666666666679);;
let a = min_wartosc ( minus ( wartosc_od_do (6.000000) (7.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (2.000000) ) ( wartosc_dokladnosc (2.000000) (5.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (-3.000000) (1.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-9.000000) (9.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (-8.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) (-8.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.179999999999999716);;
let a = min_wartosc ( podzielic ( plus ( minus ( plus ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( wartosc_dokladna (2.000000) ) ) ( plus ( plus ( wartosc_od_do (-8.000000) (7.000000) ) ( minus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (7.000000) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ) ( wartosc_dokladna (-7.000000) ) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( minus ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-7.000000) (9.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ( wartosc_dokladnosc (5.000000) (7.000000) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-10.000000) (-7.000000) ) ( razy ( wartosc_dokladnosc (8.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( minus ( plus ( wartosc_dokladna (-4.000000) ) ( minus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( wartosc_dokladna (6.000000) ) ) ( minus ( wartosc_od_do (1.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( plus ( podzielic ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (3.000000) (6.000000) ) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (2.000000) (0.000000) ) ( plus ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-10.000000) (-6.000000) ) ) ;;
assert (a =. -0.700000000000000067);;
let a = sr_wartosc ( minus ( wartosc_od_do (-7.000000) (-1.000000) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_od_do (-4.000000) (6.000000) ) ) (8.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (9.000000) (6.000000) ) ) ) ;;
assert (a =. -9.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( plus ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_od_do (6.000000) (8.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ;;
assert (a =. -1.45833333333333348);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-10.000000) ) ) ;;
assert (a =. 0.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (1.000000) (2.000000) ) ) ) ;;
assert (a =. 1.20168067226890773);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (-6.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (8.000000) (2.000000) ) ( razy ( wartosc_dokladnosc (6.000000) (6.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ) ) ;;
assert (a =. -251.44);;
let a = in_wartosc ( razy ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (-9.000000) ) ( podzielic ( wartosc_od_do (4.000000) (5.000000) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ) ;;
assert (a =. -8.25925925925926);;
let a = min_wartosc ( razy ( razy ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. -60.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-2.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (3.000000) (4.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (5.000000) ) ) ;;
assert (a =. 1.00250626566416035);;
let a = max_wartosc ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (5.000000) ) ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ) ;;
assert (a =. -8.6);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-6.000000) (6.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-3.000000) (1.000000) ) ( wartosc_od_do (-8.000000) (-6.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (-8.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-7.000000) (9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ( wartosc_od_do (-7.000000) (-5.000000) ) ) (5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( minus ( plus ( wartosc_od_do (-2.000000) (-2.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (-9.000000) (-3.000000) ) ) ;;
assert (a =. 0.55555555555555558);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ;;
assert (a =. 3.);;
let a = min_wartosc ( podzielic ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_od_do (-3.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 7.);;
let a = max_wartosc ( minus ( minus ( wartosc_od_do (-6.000000) (8.000000) ) ( wartosc_dokladna (5.000000) ) ) ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) ) ) ;;
assert (a =. 2.78425026968716294);;
let a = sr_wartosc ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. -6.5);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (2.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. 0.625);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( razy ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-7.000000) (1.000000) ) ) ( minus ( wartosc_dokladnosc (5.000000) (9.000000) ) ( podzielic ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. 45.);;
let a = min_wartosc ( minus ( minus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-9.000000) ) ) ( wartosc_dokladnosc (-3.000000) (3.000000) ) ) ;;
assert (a =. 1.91000000000000014);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( podzielic ( razy ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ) ;;
assert (a =. 10.0179999999999989);;
let a = min_wartosc ( razy ( wartosc_od_do (-10.000000) (1.000000) ) ( wartosc_dokladnosc (-7.000000) (3.000000) ) ) ;;
assert (a =. -7.21);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (7.000000) (4.000000) ) ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-10.000000) (7.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-10.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ;;
assert (a =. -7.0600000000000005);;
let a = sr_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_od_do (3.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (1.000000) ) ( minus ( plus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ) ) ) ;;
assert (a =. 8.08080808080808133);;
let a = in_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_od_do (-5.000000) (-1.000000) ) ( wartosc_dokladnosc (-1.000000) (7.000000) ) ) ;;
assert (a =. -4.07);;
let a = min_wartosc ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -5.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (-6.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ) ) ( wartosc_dokladnosc (-3.000000) (6.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (6.000000) (8.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 8.52);;
let a = sr_wartosc ( plus ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -2.5);;
let a = max_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -1.62);;
let a = in_wartosc ( razy ( wartosc_od_do (-10.000000) (7.000000) ) ( wartosc_dokladna (-9.000000) ) ) (2.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladna (2.000000) ) ( podzielic ( podzielic ( plus ( wartosc_dokladnosc (-10.000000) (2.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( wartosc_od_do (-4.000000) (6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (9.000000) ) ( wartosc_od_do (1.000000) (9.000000) ) ) ;;
assert (a =. 2.38222222222222246);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) (4.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( razy ( plus ( wartosc_dokladnosc (3.000000) (5.000000) ) ( wartosc_dokladnosc (3.000000) (1.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-6.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) ;;
assert (a =. -24.12);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (4.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( wartosc_dokladna (-7.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (9.000000) (5.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ;;
assert (a =. 17.45);;
let a = sr_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (4.000000) (5.000000) ) ) ) ( wartosc_dokladnosc (-10.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_dokladnosc (-2.000000) (9.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( podzielic ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-1.000000) (1.000000) ) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) ;;
assert (a =. -56.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (2.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. -0.784);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (-9.000000) ) ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ) ;;
assert (a =. 14.04);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ) ;;
assert (a =. -11.120000000000001);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (6.000000) (3.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -0.179999999999999716);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (-3.000000) ) ( wartosc_dokladnosc (-3.000000) (9.000000) ) ) ;;
assert (a =. 1.37446651208119097);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( plus ( podzielic ( wartosc_dokladna (-1.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-6.000000) (5.000000) ) ( plus ( wartosc_dokladnosc (-10.000000) (2.000000) ) ( minus ( minus ( podzielic ( wartosc_od_do (-8.000000) (4.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladna (-10.000000) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-4.000000) (-3.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladnosc (-8.000000) (4.000000) ) ) ;;
assert (a =. 0.180288461538461509);;
let a = min_wartosc ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) ;;
assert (a =. -13.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (1.000000) (6.000000) ) ) ( wartosc_dokladnosc (6.000000) (6.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-3.000000) (8.000000) ) ( podzielic ( razy ( wartosc_od_do (-10.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) ) ;;
assert (a =. -3.24);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 0.5);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-2.000000) (7.000000) ) ( wartosc_od_do (-5.000000) (2.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -0.375);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (6.000000) (7.000000) ) ) ) ;;
assert (a =. 2.49);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (8.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (7.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. -0.713333333333333375);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-1.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (4.000000) ) ( plus ( wartosc_od_do (-7.000000) (-4.000000) ) ( podzielic ( podzielic ( podzielic ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_od_do (1.000000) (8.000000) ) ) ) ) ) (3.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( razy ( razy ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ( wartosc_od_do (3.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-5.000000) (1.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( plus ( wartosc_od_do (-4.000000) (-2.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -12.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. -0.5);;
let a = min_wartosc ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. -11.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_od_do (6.000000) (9.000000) ) ( plus ( podzielic ( razy ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( razy ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (4.000000) ) ) ) ( wartosc_dokladnosc (5.000000) (4.000000) ) ) ( plus ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-10.000000) (-6.000000) ) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (3.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. -1.236);;
let a = max_wartosc ( razy ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. 21.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( podzielic ( plus ( podzielic ( wartosc_dokladnosc (2.000000) (9.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ) ( wartosc_dokladna (-1.000000) ) ) ) ;;
assert (a =. 8.7450980392156854);;
let a = sr_wartosc ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -7.5);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (7.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. 0.62);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-10.000000) (3.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. -7.69999999999999929);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_od_do (-4.000000) (9.000000) ) ) (9.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ( podzielic ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. 1.16666666666666652);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -4.5);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (1.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (3.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (7.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ;;
assert (a =. 9.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -1.33333333333333326);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 48.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (6.000000) (1.000000) ) ( wartosc_dokladna (-7.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( plus ( wartosc_od_do (-4.000000) (9.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (-7.000000) ) ) (9.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 18.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (-6.000000) (-3.000000) ) ( wartosc_od_do (-8.000000) (-7.000000) ) ) ( wartosc_dokladnosc (7.000000) (5.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (4.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ( wartosc_dokladna (-2.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( plus ( wartosc_dokladnosc (6.000000) (7.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladna (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -6.5);;
let a = sr_wartosc ( razy ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (3.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladnosc (-8.000000) (2.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( razy ( wartosc_od_do (5.000000) (8.000000) ) ( wartosc_od_do (-2.000000) (7.000000) ) ) (5.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_od_do (1.000000) (8.000000) ) ( wartosc_od_do (6.000000) (7.000000) ) ) (-5.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_od_do (-2.000000) (3.000000) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ;;
assert (a =. -22.259999999999998);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (2.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladnosc (1.000000) (4.000000) ) ( plus ( wartosc_od_do (4.000000) (5.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -81.12);;
let a = min_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -49.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (-6.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-6.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (9.000000) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -7.5);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (2.000000) (4.000000) ) ( wartosc_od_do (4.000000) (9.000000) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ;;
assert (a =. 13.235294117647058);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ;;
assert (a =. -1.545);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (3.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 2.91);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) ;;
assert (a =. 40.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( plus ( wartosc_od_do (-8.000000) (-7.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) ) ) ;;
assert (a =. -0.9375);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( wartosc_dokladnosc (-10.000000) (5.000000) ) ) ;;
assert (a =. -13.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( minus ( podzielic ( wartosc_od_do (-10.000000) (-3.000000) ) ( wartosc_od_do (-9.000000) (4.000000) ) ) ( podzielic ( podzielic ( wartosc_od_do (-5.000000) (2.000000) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ( minus ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (5.000000) (8.000000) ) ( minus ( wartosc_od_do (5.000000) (6.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. -2.83333333333333304);;
let a = sr_wartosc ( podzielic ( razy ( minus ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ( plus ( wartosc_od_do (-7.000000) (8.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( podzielic ( minus ( wartosc_od_do (-5.000000) (-5.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ;;
assert (a =. -13.75);;
let a = max_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 11.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (1.000000) (9.000000) ) ( wartosc_dokladnosc (9.000000) (4.000000) ) ) ;;
assert (a =. 0.57425213675213671);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( razy ( wartosc_od_do (-5.000000) (-2.000000) ) ( wartosc_od_do (-10.000000) (-3.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -84.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (-2.000000) ) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( plus ( minus ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (-9.000000) (4.000000) ) ) ) ( wartosc_od_do (-8.000000) (-7.000000) ) ) ) ;;
assert (a =. 0.510752688172043);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( plus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( razy ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ( wartosc_od_do (6.000000) (8.000000) ) ) ) ;;
assert (a =. 1.02083333333333348);;
let a = in_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( razy ( wartosc_od_do (-3.000000) (2.000000) ) ( wartosc_dokladnosc (1.000000) (9.000000) ) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (2.000000) (9.000000) ) ) ) ;;
assert (a =. 3.63888888888888884);;
let a = max_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -2.);;
let a = max_wartosc ( minus ( wartosc_od_do (-1.000000) (2.000000) ) ( minus ( podzielic ( minus ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_od_do (-10.000000) (1.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (3.000000) ) ( wartosc_od_do (1.000000) (4.000000) ) ) ;;
assert (a =. -12.24);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( podzielic ( razy ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_dokladna (-2.000000) ) ) (1.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (3.000000) (0.000000) ) ( plus ( minus ( wartosc_od_do (-4.000000) (8.000000) ) ( minus ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-3.000000) (3.000000) ) ) ( minus ( wartosc_dokladna (8.000000) ) ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ) ) ) ( wartosc_dokladna (-10.000000) ) ) ) (-8.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-6.000000) (4.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( plus ( razy ( minus ( wartosc_dokladnosc (6.000000) (2.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ( minus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-10.000000) ) ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) (4.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_od_do (5.000000) (6.000000) ) ( wartosc_dokladnosc (-6.000000) (3.000000) ) ) ;;
assert (a =. 12.18);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-6.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( podzielic ( plus ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( razy ( razy ( wartosc_od_do (4.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ( podzielic ( wartosc_od_do (-9.000000) (-3.000000) ) ( minus ( wartosc_dokladna (-8.000000) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( wartosc_od_do (-7.000000) (3.000000) ) ) ) ) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ( razy ( wartosc_od_do (-9.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (-1.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( podzielic ( wartosc_od_do (-5.000000) (5.000000) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ( wartosc_dokladnosc (-2.000000) (8.000000) ) ) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (3.000000) ) ( minus ( wartosc_dokladnosc (8.000000) (7.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ) ) ;;
assert (a =. -1.29941860465116288);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_od_do (-8.000000) (-8.000000) ) ) ( wartosc_od_do (2.000000) (4.000000) ) ) ;;
assert (a =. 2.125);;
let a = max_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert (a =. 6.);;
let a = max_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (6.000000) (4.000000) ) ( wartosc_dokladnosc (-5.000000) (7.000000) ) ) ;;
assert (a =. 1.58999999999999986);;
let a = in_wartosc ( minus ( podzielic ( wartosc_od_do (-9.000000) (-8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) (7.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( plus ( wartosc_od_do (-8.000000) (-6.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (7.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ) ;;
assert (a =. -6.4);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (-9.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (-2.000000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( wartosc_od_do (4.000000) (6.000000) ) ) ( plus ( podzielic ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (2.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a =. -2.4063761955366636);;
let a = min_wartosc ( razy ( podzielic ( wartosc_od_do (2.000000) (6.000000) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ( plus ( wartosc_dokladnosc (2.000000) (6.000000) ) ( podzielic ( razy ( wartosc_dokladna (-9.000000) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ) ( plus ( wartosc_od_do (-4.000000) (-2.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ) ;;
assert (a =. -9.11607142857142705);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -0.700000000000000067);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-7.000000) (-1.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ) ) ;;
assert (a =. -0.66666666666666663);;
let a = min_wartosc ( podzielic ( wartosc_od_do (8.000000) (9.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (6.000000) (6.000000) ) ( wartosc_dokladnosc (8.000000) (9.000000) ) ) ;;
assert (a =. 0.688073394495412827);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-1.000000) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-7.000000) (9.000000) ) ) ;;
assert (a =. -6.37);;
let a = max_wartosc ( razy ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. 0.600000000000000089);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (6.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (2.000000) (6.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 8.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( podzielic ( wartosc_od_do (-2.000000) (8.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (4.000000) ) ( wartosc_dokladnosc (-8.000000) (3.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (3.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-8.000000) (3.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ) ) ) ( wartosc_dokladnosc (-10.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. 9.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.000000) (2.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.22222222222222221);;
let a = in_wartosc ( minus ( minus ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ( minus ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) (7.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (3.000000) ) ) ) (1.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (4.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -18.32);;
let a = max_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (2.000000) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-6.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_od_do (1.000000) (8.000000) ) ) ) ( wartosc_od_do (-9.000000) (-3.000000) ) ) ;;
assert (a =. -10.745);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-7.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (4.000000) ) ) ;;
assert (a =. -1.5);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (-9.000000) (-9.000000) ) ( podzielic ( minus ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (2.000000) (3.000000) ) ( wartosc_od_do (-6.000000) (8.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-2.000000) (-1.000000) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( minus ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladnosc (-4.000000) (6.000000) ) ) ) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ;;
assert (a =. -0.223850956524223849);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) (9.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (4.000000) ) ) ( podzielic ( wartosc_od_do (-8.000000) (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (3.000000) ) ( wartosc_od_do (-1.000000) (6.000000) ) ) (-8.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( plus ( wartosc_dokladnosc (1.000000) (4.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_od_do (2.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (4.000000) ) ( minus ( wartosc_od_do (-9.000000) (7.000000) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( razy ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-2.000000) (5.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladnosc (-7.000000) (3.000000) ) ) ;;
assert (a =. 13.58);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ;;
assert (a =. 2.25);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_dokladnosc (1.000000) (5.000000) ) ) ;;
assert (a =. -5.);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (6.000000) ) ) ;;
assert (a =. -1.06);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -13.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (1.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. -7.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (2.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (-6.000000) (-4.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( minus ( wartosc_dokladna (-4.000000) ) ( minus ( wartosc_od_do (-5.000000) (-2.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ) ( podzielic ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-3.000000) (8.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ) ;;
assert (a =. -10.879999999999999);;
let a = max_wartosc ( plus ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_od_do (-9.000000) (6.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-7.000000) (-6.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) (6.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (2.000000) ) ( razy ( wartosc_od_do (-5.000000) (-1.000000) ) ( wartosc_dokladna (-1.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. -0.625);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( minus ( wartosc_dokladnosc (-9.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ) ) ) ;;
assert (a =. 0.67842605156038);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladna (-1.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (5.000000) ) ( wartosc_dokladnosc (-1.000000) (6.000000) ) ) (2.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( plus ( wartosc_od_do (-2.000000) (5.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( plus ( wartosc_dokladnosc (-1.000000) (8.000000) ) ( wartosc_dokladnosc (-2.000000) (7.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( plus ( podzielic ( wartosc_od_do (-3.000000) (-3.000000) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a =. -2.375);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (9.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 1.20000000000000018);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ( minus ( wartosc_dokladna (-9.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (2.000000) ) ( podzielic ( plus ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( razy ( wartosc_od_do (-5.000000) (2.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( minus ( wartosc_dokladnosc (6.000000) (3.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ( wartosc_od_do (-2.000000) (5.000000) ) ) ;;
assert (a =. 7.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-2.000000) (8.000000) ) ( wartosc_dokladna (-1.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-9.000000) (9.000000) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ;;
assert (a =. -15.870000000000001);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (9.000000) (6.000000) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) ;;
assert (a =. -13.77);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_od_do (-5.000000) (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( razy ( wartosc_od_do (5.000000) (8.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ) ;;
assert (a =. 48.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (-5.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert (a =. -5.);;
let a = max_wartosc ( podzielic ( minus ( wartosc_od_do (8.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( razy ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( plus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (-9.000000) (-1.000000) ) ( wartosc_od_do (-10.000000) (-9.000000) ) ) ;;
assert (a =. -10.);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (6.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (5.000000) (9.000000) ) ) ;;
assert (a =. 1.41143260409315441);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (-5.000000) (5.000000) ) ( wartosc_dokladnosc (-7.000000) (4.000000) ) ) ) ;;
assert (a =. -0.125313283208020071);;
let a = max_wartosc ( plus ( wartosc_od_do (-6.000000) (-6.000000) ) ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (7.000000) (5.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) ;;
assert (a =. 6.384);;
let a = in_wartosc ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (6.000000) (8.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (-4.000000) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) ) ;;
assert (a =. -12.0796666666666663);;
let a = max_wartosc ( plus ( wartosc_dokladna (-10.000000) ) ( razy ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (6.000000) ) ( wartosc_dokladnosc (-6.000000) (3.000000) ) ) ;;
assert (a =. 0.912621359223301);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 2.5);;
let a = min_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (-10.000000) ) ) (1.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (9.000000) (9.000000) ) ( wartosc_dokladnosc (1.000000) (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (-1.000000) (1.000000) ) ( plus ( wartosc_dokladna (-8.000000) ) ( plus ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-1.000000) (9.000000) ) ) (9.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (3.000000) (5.000000) ) ) ;;
assert (a =. -2.85);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ( wartosc_dokladnosc (-6.000000) (6.000000) ) ) ;;
assert (a =. 1.33825103706677373);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (-2.000000) (5.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (9.000000) ) ) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( plus ( minus ( wartosc_od_do (-7.000000) (-6.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-8.000000) (8.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (2.000000) (7.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. 7.5);;
let a = min_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. -6.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 17.82);;
let a = min_wartosc ( minus ( wartosc_od_do (-9.000000) (7.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (8.000000) ) ( wartosc_od_do (4.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (9.000000) (1.000000) ) ( podzielic ( wartosc_od_do (4.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_od_do (5.000000) (6.000000) ) ( wartosc_dokladnosc (9.000000) (2.000000) ) ) ;;
assert (a =. 13.82);;
let a = sr_wartosc ( razy ( plus ( wartosc_od_do (-9.000000) (4.000000) ) ( wartosc_dokladnosc (-10.000000) (3.000000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. -28.9500000000000028);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (9.000000) (4.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-8.000000) (-8.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-8.000000) (8.000000) ) ( wartosc_od_do (6.000000) (9.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_od_do (-5.000000) (-4.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (8.000000) ) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-8.000000) (9.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. -2.72000000000000064);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ;;
assert (a =. 8.08);;
let a = min_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) (-8.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (7.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( razy ( plus ( minus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( plus ( podzielic ( wartosc_od_do (-5.000000) (3.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ( wartosc_dokladnosc (8.000000) (7.000000) ) ) ) ;;
assert (a =. -0.606666666666666465);;
let a = max_wartosc ( plus ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-6.000000) ) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. 60.);;
let a = in_wartosc ( plus ( razy ( minus ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( minus ( minus ( plus ( wartosc_od_do (0.000000) (4.000000) ) ( minus ( wartosc_od_do (-7.000000) (1.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ) ( wartosc_dokladna (-7.000000) ) ) ( plus ( wartosc_dokladnosc (-6.000000) (6.000000) ) ( wartosc_od_do (-5.000000) (8.000000) ) ) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (6.000000) ) ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-8.000000) (6.000000) ) ) ( wartosc_dokladnosc (2.000000) (7.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 7.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_od_do (-2.000000) (9.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (7.000000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (3.000000) (8.000000) ) ( wartosc_od_do (-3.000000) (3.000000) ) ) (-5.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.000000) (1.000000) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_od_do (3.000000) (9.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. -36.);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (5.000000) (5.000000) ) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) (6.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.000000) (9.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( razy ( wartosc_od_do (-8.000000) (3.000000) ) ( wartosc_dokladnosc (4.000000) (3.000000) ) ) ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) (1.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (2.000000) (9.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. 14.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert (a =. -4.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (4.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 5.2);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ;;
assert (a =. 162.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( podzielic ( wartosc_od_do (2.000000) (6.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (5.000000) (7.000000) ) ) ;;
assert (a =. 2.14);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (6.000000) ) ) (-1.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( razy ( wartosc_od_do (-4.000000) (5.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (-1.000000) (4.000000) ) ( wartosc_od_do (-8.000000) (8.000000) ) ) ;;
assert (a =. 1.5);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (-7.000000) (9.000000) ) ) ( wartosc_od_do (-7.000000) (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (8.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_od_do (-7.000000) (1.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. -7.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_od_do (-3.000000) (5.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (8.000000) ) ( wartosc_od_do (3.000000) (8.000000) ) ) ) ;;
assert (a =. -5.33333333333333304);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (-6.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( razy ( wartosc_od_do (0.000000) (4.000000) ) ( razy ( podzielic ( podzielic ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (7.000000) (8.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (6.000000) ) ) (-5.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-10.000000) (-7.000000) ) ) ;;
assert (a =. -0.5);;
let a = max_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-10.000000) (8.000000) ) ) ;;
assert (a =. 3.80000000000000071);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-1.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (-7.000000) (-4.000000) ) ( wartosc_dokladnosc (-6.000000) (9.000000) ) ) (-8.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.000000) (6.000000) ) ) (-7.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( razy ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-9.000000) (-2.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( podzielic ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( plus ( wartosc_dokladnosc (4.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (1.000000) ) ) ) ( wartosc_dokladna (-9.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladnosc (-6.000000) (1.000000) ) ) ;;
assert (a =. 1.17845117845117842);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (-1.000000) (3.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (2.000000) ) ) ) ( podzielic ( wartosc_dokladnosc (9.000000) (4.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( razy ( plus ( wartosc_dokladna (0.000000) ) ( plus ( minus ( wartosc_od_do (-9.000000) (6.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (5.000000) (9.000000) ) ) ) ( podzielic ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-6.000000) ) ( razy ( podzielic ( wartosc_od_do (-9.000000) (-8.000000) ) ( plus ( razy ( wartosc_od_do (-3.000000) (5.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (8.000000) ) ) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_dokladnosc (-2.000000) (2.000000) ) ) ;;
assert (a =. -3.68627450980392135);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladnosc (-7.000000) (8.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) ;;
assert (a =. 4.53600000000000048);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (3.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -1.28571428571428559);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-5.000000) (2.000000) ) ( wartosc_dokladnosc (2.000000) (2.000000) ) ) ;;
assert (a =. -3.5);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-5.000000) (3.000000) ) ( wartosc_od_do (-10.000000) (-8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (5.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (1.000000) (6.000000) ) ) ( wartosc_dokladnosc (5.000000) (6.000000) ) ) ;;
assert (a =. -2.35);;
let a = in_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (7.000000) (1.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-3.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (6.000000) ) ) (4.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (-3.000000) (2.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 8.16666666666666607);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (8.000000) ) ) ) ;;
assert (a =. 7.14285714285714235);;
let a = max_wartosc ( minus ( plus ( razy ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_od_do (-8.000000) (-4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -2.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (7.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -0.723333333333333273);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( plus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) ) ;;
assert (a =. -1.83999999999999986);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-9.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( podzielic ( razy ( razy ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_dokladnosc (1.000000) (8.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_od_do (-7.000000) (2.000000) ) ( wartosc_dokladna (5.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-3.000000) (9.000000) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ;;
assert (a =. -1.29870129870129891);;
let a = sr_wartosc ( razy ( wartosc_od_do (-10.000000) (-7.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( razy ( podzielic ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( wartosc_dokladnosc (-1.000000) (7.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (4.000000) (6.000000) ) ) ;;
assert (a =. 9.);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (9.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( razy ( wartosc_od_do (0.000000) (2.000000) ) ( podzielic ( wartosc_dokladnosc (7.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (-8.000000) (2.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ) ) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -4.75);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( minus ( wartosc_od_do (-1.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 1.42857142857142838);;
let a = in_wartosc ( podzielic ( wartosc_od_do (3.000000) (5.000000) ) ( plus ( wartosc_dokladnosc (-6.000000) (8.000000) ) ( wartosc_od_do (-5.000000) (-2.000000) ) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (3.000000) (8.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) (2.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( plus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_od_do (-7.000000) (8.000000) ) ) (-4.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. -4.92);;
let a = min_wartosc ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 4.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 7.63000000000000078);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) (-4.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (8.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (-3.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-2.000000) ) ( wartosc_od_do (-8.000000) (-5.000000) ) ) ;;
assert (a =. 1.025);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-5.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. -1.40000000000000013);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (2.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-5.000000) (2.000000) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( razy ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ) ) ;;
assert (a =. 30.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (4.000000) (4.000000) ) ( wartosc_dokladnosc (7.000000) (1.000000) ) ) ;;
assert (a =. 0.565770862800565766);;
let a = sr_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-4.000000) (5.000000) ) ) ;;
assert (a =. 4.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (1.000000) (5.000000) ) ( razy ( wartosc_dokladnosc (1.000000) (8.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ) ) ;;
assert (a =. 0.925925925925925819);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-2.000000) (3.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.000000) (9.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( plus ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.55555555555555558);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( podzielic ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (-9.000000) ) ) ( wartosc_od_do (3.000000) (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) (-5.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( razy ( plus ( wartosc_dokladnosc (-6.000000) (3.000000) ) ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ( wartosc_od_do (1.000000) (4.000000) ) ) ;;
assert (a =. 73.44);;
let a = max_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ;;
assert (a =. 18.);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_od_do (-5.000000) (8.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( wartosc_dokladna (2.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-2.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ;;
assert (a =. -0.1875);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( plus ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_od_do (-5.000000) (1.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ;;
assert (a =. 8.8);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ;;
assert (a =. -7.25773195876288746);;
let a = min_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( plus ( wartosc_od_do (-9.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) (-6.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.000000) (4.000000) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ;;
assert (a =. -0.144300144300144317);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( plus ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-6.000000) (-5.000000) ) ) ( plus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (-10.000000) (-2.000000) ) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-8.000000) (2.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 80.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 66.5);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-5.000000) ) ( wartosc_dokladnosc (9.000000) (4.000000) ) ) ;;
assert (a =. -1.15740740740740722);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -0.142857142857142849);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. -0.111111111111111105);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) ;;
assert (a =. 3.);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( plus ( minus ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( plus ( podzielic ( minus ( wartosc_dokladnosc (-6.000000) (3.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ;;
assert (a =. -16.9017475728155375);;
let a = min_wartosc ( plus ( wartosc_od_do (-1.000000) (2.000000) ) ( podzielic ( plus ( wartosc_od_do (-2.000000) (3.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ;;
assert (a =. -0.794444444444444509);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_od_do (-8.000000) (-4.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (1.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ) ( minus ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladnosc (6.000000) (4.000000) ) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (1.000000) ) ( wartosc_od_do (-6.000000) (9.000000) ) ) (5.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_od_do (4.000000) (8.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. -3.5);;
let a = in_wartosc ( podzielic ( podzielic ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (7.000000) ) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ( wartosc_od_do (-7.000000) (-2.000000) ) ) ( plus ( wartosc_dokladnosc (5.000000) (9.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladna (0.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( minus ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ) ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ) ;;
assert (a =. 11.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (0.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -6.);;
let a = min_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) ;;
assert (a =. -28.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (4.000000) ) ( wartosc_dokladnosc (4.000000) (5.000000) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (-3.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (2.000000) ) ( wartosc_od_do (-4.000000) (1.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( razy ( minus ( wartosc_dokladnosc (5.000000) (9.000000) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ( razy ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( minus ( wartosc_od_do (-3.000000) (6.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ) ( wartosc_od_do (2.000000) (9.000000) ) ) ;;
assert (a =. 311.849999999999966);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (1.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( razy ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ( razy ( podzielic ( wartosc_dokladnosc (1.000000) (5.000000) ) ( wartosc_dokladnosc (-6.000000) (1.000000) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (8.000000) (9.000000) ) ( wartosc_dokladnosc (-8.000000) (1.000000) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_od_do (-1.000000) (1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (-2.000000) ) ) (3.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -3.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( minus ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (4.000000) ) ) ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (2.000000) (4.000000) ) ) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( plus ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (-3.000000) (2.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) ;;
assert (a =. 2.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_dokladna (-3.000000) ) ) (6.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-9.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_dokladna (9.000000) ) ) (7.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (9.000000) (0.000000) ) ( minus ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ;;
assert (a =. 63.);;
let a = min_wartosc ( podzielic ( podzielic ( minus ( minus ( wartosc_od_do (-10.000000) (-7.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladnosc (-2.000000) (2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (5.000000) (8.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-7.000000) (-6.000000) ) ) ;;
assert (a =. 8.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ;;
assert (a =. 0.53);;
let a = max_wartosc ( razy ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_od_do (5.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-9.000000) (-6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ;;
assert (a =. 10.21);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (8.000000) (1.000000) ) ) ;;
assert (a =. 0.495049504950495045);;
let a = max_wartosc ( plus ( wartosc_od_do (-1.000000) (-1.000000) ) ( minus ( wartosc_dokladnosc (-4.000000) (6.000000) ) ( plus ( wartosc_dokladnosc (7.000000) (8.000000) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ) ) ;;
assert (a =. -17.14);;
let a = sr_wartosc ( plus ( wartosc_od_do (-6.000000) (2.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (-5.000000) ) ( minus ( wartosc_dokladnosc (-3.000000) (9.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) (1.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-10.000000) (3.000000) ) ) ;;
assert (a =. -6.30000000000000071);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) (2.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( podzielic ( razy ( razy ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (4.000000) (8.000000) ) ) ( wartosc_od_do (-2.000000) (9.000000) ) ) ( minus ( minus ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ) ( razy ( podzielic ( wartosc_od_do (-1.000000) (5.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ) (2.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( podzielic ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ) ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( minus ( wartosc_od_do (5.000000) (8.000000) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) ( wartosc_dokladnosc (3.000000) (6.000000) ) ) (8.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (7.000000) (9.000000) ) ) ) ;;
assert (a =. -0.0873743993010048098);;
let a = sr_wartosc ( podzielic ( minus ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( wartosc_dokladnosc (-3.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (-4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( podzielic ( podzielic ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_dokladna (3.000000) ) ) ( minus ( wartosc_od_do (8.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. -2.42092592592592615);;
let a = sr_wartosc ( podzielic ( podzielic ( minus ( wartosc_dokladna (-7.000000) ) ( plus ( wartosc_od_do (-9.000000) (2.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.0555555555555555525);;
let a = min_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (3.000000) ) ( wartosc_dokladnosc (-1.000000) (9.000000) ) ) ;;
assert (a =. -1.13186813186813184);;
let a = sr_wartosc ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. -3.);;
let a = min_wartosc ( podzielic ( podzielic ( podzielic ( plus ( podzielic ( podzielic ( wartosc_dokladnosc (-2.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-9.000000) (1.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. -11.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (4.000000) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( plus ( wartosc_od_do (-5.000000) (7.000000) ) ( plus ( razy ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ;;
assert (a =. -17.12);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -11.);;
let a = max_wartosc ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -8.);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) (-3.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) ;;
assert (a =. -14.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (8.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (1.000000) (2.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) (-3.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( plus ( wartosc_dokladnosc (2.000000) (3.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ( minus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( razy ( wartosc_od_do (-7.000000) (2.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ) ( wartosc_od_do (5.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( minus ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (8.000000) (3.000000) ) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (7.000000) ) ( wartosc_od_do (-8.000000) (-3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (4.000000) ) ) ;;
assert (a =. -14.);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-6.000000) (2.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-9.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ;;
assert (a =. -4.);;
let a = in_wartosc ( podzielic ( minus ( plus ( wartosc_dokladna (8.000000) ) ( podzielic ( razy ( wartosc_od_do (-7.000000) (-6.000000) ) ( wartosc_dokladnosc (-1.000000) (5.000000) ) ) ( wartosc_dokladnosc (9.000000) (5.000000) ) ) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (-3.000000) (4.000000) ) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_od_do (5.000000) (6.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. -9.33333333333333393);;
let a = min_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (9.000000) (6.000000) ) ) ;;
assert (a =. 3.46000000000000085);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (-6.000000) (5.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-2.000000) ) ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert (a =. -3.);;
let a = min_wartosc ( podzielic ( razy ( plus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (2.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (1.000000) ) ) ;;
assert (a =. 8.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (3.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -0.333333333333333315);;
let a = sr_wartosc ( minus ( wartosc_od_do (-10.000000) (-5.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ;;
assert (a =. -3.5);;
let a = max_wartosc ( podzielic ( plus ( podzielic ( podzielic ( wartosc_od_do (4.000000) (4.000000) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-5.000000) (5.000000) ) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_od_do (-4.000000) (-1.000000) ) ( wartosc_dokladna (-7.000000) ) ) (-5.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_dokladna (-2.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-1.000000) (2.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. 12.);;
let a = in_wartosc ( podzielic ( podzielic ( razy ( plus ( razy ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( minus ( plus ( wartosc_dokladnosc (9.000000) (5.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ) ( wartosc_od_do (-1.000000) (-1.000000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (4.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( minus ( plus ( wartosc_od_do (5.000000) (9.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert (a =. -3.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-2.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -2.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (4.000000) (5.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 33.6);;
let a = in_wartosc ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (6.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (1.000000) ) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (6.000000) ) ( wartosc_dokladna (5.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( razy ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) (3.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. 9.06);;
let a = in_wartosc ( podzielic ( minus ( minus ( wartosc_dokladna (5.000000) ) ( minus ( wartosc_od_do (-8.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (-7.000000) (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (5.000000) (6.000000) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_dokladna (9.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (4.000000) (4.000000) ) ) ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 1.16666666666666652);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -28.);;
let a = max_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_dokladna (8.000000) ) ( minus ( wartosc_od_do (-2.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ) ;;
assert (a =. 21.);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( minus ( wartosc_od_do (-2.000000) (6.000000) ) ( wartosc_od_do (-1.000000) (-1.000000) ) ) (-8.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-10.000000) (-7.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (-7.000000) (-4.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -6.5);;
let a = max_wartosc ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( minus ( podzielic ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( wartosc_od_do (-9.000000) (-3.000000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. 5.88888888888888928);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_od_do (-7.000000) (-2.000000) ) ) ;;
assert (a =. 1.71428571428571419);;
let a = sr_wartosc ( minus ( podzielic ( podzielic ( wartosc_od_do (1.000000) (9.000000) ) ( wartosc_dokladnosc (9.000000) (6.000000) ) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -10.168651590169052);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. 6.);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (4.000000) (7.000000) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (8.000000) ) ( wartosc_od_do (-7.000000) (7.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (6.000000) ) ( wartosc_od_do (-4.000000) (-1.000000) ) ) ) ( plus ( wartosc_dokladna (9.000000) ) ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (-8.000000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( razy ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (-3.000000) (7.000000) ) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) ( minus ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ;;
assert (a =. -6.29999999999999893);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) (-2.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-3.000000) (5.000000) ) ) ;;
assert (a =. -8.);;
let a = min_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 4.);;
let a = min_wartosc ( plus ( wartosc_od_do (-7.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( podzielic ( razy ( wartosc_od_do (1.000000) (2.000000) ) ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 4.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 18.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( plus ( wartosc_dokladnosc (2.000000) (2.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_dokladnosc (6.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( plus ( wartosc_od_do (-8.000000) (4.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 11.);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 0.66666666666666663);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ( wartosc_dokladna (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladnosc (-8.000000) (4.000000) ) ) ( podzielic ( wartosc_od_do (-4.000000) (1.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-6.000000) (7.000000) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ) ) ( wartosc_dokladnosc (-2.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (1.000000) ) ( wartosc_od_do (4.000000) (9.000000) ) ) ) ;;
assert (a =. -8.8375);;
let a = in_wartosc ( razy ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-3.000000) (5.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. 10.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (6.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 1.33333333333333326);;
let a = max_wartosc ( minus ( wartosc_od_do (-7.000000) (1.000000) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) ;;
assert (a =. 9.72);;
let a = max_wartosc ( podzielic ( podzielic ( podzielic ( plus ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (5.000000) (7.000000) ) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) (5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( wartosc_dokladnosc (2.000000) (4.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) (-6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-4.000000) (-4.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -1.33333333333333326);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( minus ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_od_do (-8.000000) (-6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_dokladnosc (-10.000000) (3.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_od_do (-5.000000) (1.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (5.000000) (3.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-6.000000) (9.000000) ) ( plus ( wartosc_dokladnosc (7.000000) (3.000000) ) ( wartosc_od_do (-8.000000) (4.000000) ) ) ) ;;
assert (a =. -17.21);;
let a = min_wartosc ( razy ( minus ( podzielic ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-4.000000) (7.000000) ) ( wartosc_dokladnosc (-2.000000) (1.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (1.000000) (4.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -0.27777777777777779);;
let a = max_wartosc ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-5.000000) (4.000000) ) ) ;;
assert (a =. 8.);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 2.);;
let a = max_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-3.000000) (7.000000) ) ) ;;
assert (a =. 7.);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_dokladnosc (9.000000) (2.000000) ) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) ( wartosc_dokladnosc (-9.000000) (7.000000) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (8.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (4.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. -0.66666666666666663);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (-1.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-10.000000) (-2.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (5.000000) ) ( podzielic ( wartosc_dokladnosc (-8.000000) (1.000000) ) ( minus ( wartosc_od_do (-5.000000) (-2.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) ) ) ) ;;
assert (a =. 13.3838383838383841);;
let a = min_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( plus ( wartosc_od_do (-10.000000) (8.000000) ) ( wartosc_dokladnosc (1.000000) (3.000000) ) ) ( wartosc_dokladnosc (3.000000) (3.000000) ) ) ;;
assert (a =. -27.9026999999999958);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.000000) (4.000000) ) ( wartosc_dokladnosc (2.000000) (7.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (6.000000) (8.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( razy ( wartosc_od_do (-4.000000) (5.000000) ) ( minus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ) (7.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.000000) (3.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) (4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( razy ( wartosc_dokladna (7.000000) ) ( podzielic ( wartosc_dokladnosc (4.000000) (4.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ) ;;
assert (a =. 5.60000000000000053);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (4.000000) (9.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 10.5);;
let a = in_wartosc ( razy ( razy ( wartosc_od_do (-9.000000) (-4.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (9.000000) (2.000000) ) ) ) ;;
assert (a =. 18.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (8.000000) ) ( wartosc_od_do (-10.000000) (-4.000000) ) ) ;;
assert (a =. -0.184000000000000025);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( wartosc_od_do (-8.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (2.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ;;
assert (a =. 4.08);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. -1.75);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-2.000000) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ;;
assert (a =. -0.205761316872427963);;
let a = min_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( minus ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (-7.000000) (2.000000) ) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ) ;;
assert (a =. -13.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (5.000000) ) ) (1.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. 2.66666666666666652);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ) ;;
assert (a =. 9.18);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (-2.000000) (-1.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. 8.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( razy ( wartosc_od_do (-9.000000) (6.000000) ) ( podzielic ( wartosc_od_do (-5.000000) (-1.000000) ) ( wartosc_dokladnosc (7.000000) (9.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (7.000000) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. 0.265714285714285681);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-2.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.000000) (9.000000) ) ( wartosc_dokladna (-6.000000) ) ) (-5.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (9.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.333333333333333315);;
let a = min_wartosc ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (5.000000) ) ) ;;
assert (a =. 2.59999999999999964);;
let a = in_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-3.000000) (8.000000) ) ) (9.000000);;
assert (a = true);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ;;
assert (a =. 12.);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (-8.000000) (7.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladna (3.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. -18.18);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( razy ( wartosc_dokladnosc (5.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (-1.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-7.000000) (8.000000) ) ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( minus ( plus ( wartosc_dokladnosc (6.000000) (9.000000) ) ( wartosc_od_do (-5.000000) (2.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.000000) (6.000000) ) ( podzielic ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-10.000000) (5.000000) ) ) ) (-4.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( minus ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (1.000000) (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_od_do (3.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.22222222222222221);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (9.000000) (9.000000) ) ) ;;
assert (a =. -1.35000000000000142);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (-6.000000) (1.000000) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-2.000000) (9.000000) ) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (9.000000) ) ) ( minus ( wartosc_dokladnosc (-9.000000) (2.000000) ) ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (6.000000) (4.000000) ) ) ( plus ( wartosc_dokladna (-2.000000) ) ( razy ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_od_do (1.000000) (1.000000) ) ) ) ) ) ) ;;
assert (a =. 0.0494024770401987889);;
let a = max_wartosc ( plus ( wartosc_od_do (-9.000000) (-3.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. -11.);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (6.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-8.000000) (1.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (-3.000000) (3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (5.000000) ) ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( razy ( wartosc_dokladnosc (-4.000000) (8.000000) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ( minus ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ) (-6.000000);;
assert (a = true);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (4.000000) ) ( wartosc_od_do (-10.000000) (-7.000000) ) ) ;;
assert (a =. 2.32000000000000028);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_dokladnosc (-9.000000) (2.000000) ) ) ;;
assert (a =. 17.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-1.000000) (-1.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( razy ( wartosc_dokladnosc (-2.000000) (4.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( plus ( podzielic ( minus ( wartosc_od_do (-9.000000) (3.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (4.000000) ) ) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. -0.428571428571428492);;
let a = max_wartosc ( razy ( podzielic ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladnosc (-1.000000) (5.000000) ) ) ;;
assert (a =. 0.749999999999999889);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. 5.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( plus ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. -25.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (5.000000) (7.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (9.000000) (3.000000) ) ) ) ) ;;
assert (a =. 6.00090081072965642);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-9.000000) (9.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 0.547499999999999876);;
let a = max_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( razy ( wartosc_od_do (1.000000) (1.000000) ) ( wartosc_od_do (-7.000000) (-3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (8.000000) (5.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 9.6);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (6.000000) (3.000000) ) ( wartosc_od_do (6.000000) (6.000000) ) ) ( wartosc_dokladnosc (-5.000000) (9.000000) ) ) ;;
assert (a =. -0.202177638874886545);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (2.000000) ) ) ;;
assert (a =. 1.96078431372549011);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-10.000000) (4.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. 24.2666666666666657);;
let a = in_wartosc ( minus ( minus ( wartosc_dokladnosc (-9.000000) (7.000000) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( minus ( podzielic ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. -9.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (9.000000) ) ) (-10.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (6.000000) (7.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (8.000000) ) ) (7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-5.000000) (7.000000) ) ) ) ;;
assert (a =. -0.370093457943925286);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (-6.000000) (-6.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (1.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (-3.000000) ) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -0.037037037037037035);;
let a = in_wartosc ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) (-5.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ;;
assert (a =. 28.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -0.125);;
let a = sr_wartosc ( minus ( podzielic ( wartosc_dokladna (1.000000) ) ( razy ( wartosc_dokladnosc (6.000000) (7.000000) ) ( wartosc_dokladnosc (1.000000) (9.000000) ) ) ) ( wartosc_dokladnosc (-10.000000) (5.000000) ) ) ;;
assert (a =. 10.1699188678691);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( minus ( wartosc_od_do (-4.000000) (1.000000) ) ( wartosc_dokladna (7.000000) ) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.000000) (5.000000) ) ( wartosc_od_do (-9.000000) (-6.000000) ) ) ;;
assert (a =. 0.16666666666666663);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ;;
assert (a =. -3.5);;
let a = sr_wartosc ( razy ( wartosc_od_do (-8.000000) (3.000000) ) ( wartosc_dokladnosc (6.000000) (2.000000) ) ) ;;
assert (a =. -15.3);;
let a = sr_wartosc ( plus ( wartosc_od_do (-4.000000) (2.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( razy ( wartosc_dokladnosc (9.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (7.000000) ) ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (-1.000000) ) ) ;;
assert (a =. -24.);;
let a = in_wartosc ( razy ( wartosc_od_do (-4.000000) (5.000000) ) ( wartosc_od_do (7.000000) (9.000000) ) ) (-8.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-8.000000) (5.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (8.000000) ) ( minus ( wartosc_od_do (-10.000000) (-9.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ) ;;
assert (a =. -8.4);;
let a = sr_wartosc ( plus ( wartosc_od_do (-9.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -0.5);;
let a = min_wartosc ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ( wartosc_dokladnosc (6.000000) (8.000000) ) ) ;;
assert (a =. -0.480000000000000426);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (6.000000) (8.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) (-5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-3.000000) (-1.000000) ) ( wartosc_dokladna (-3.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-7.000000) (-5.000000) ) ( podzielic ( wartosc_dokladnosc (-6.000000) (2.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-4.000000) (6.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ;;
assert (a =. -2.2);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladna (7.000000) ) ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( minus ( minus ( wartosc_dokladnosc (8.000000) (3.000000) ) ( wartosc_dokladnosc (-2.000000) (9.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) ;;
assert (a =. 0.575815738963531665);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. -3.5);;
let a = in_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( podzielic ( plus ( podzielic ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ( wartosc_od_do (-7.000000) (-5.000000) ) ) ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (3.000000) (6.000000) ) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (3.000000) ) ( wartosc_dokladna (-6.000000) ) ) ) ( razy ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_dokladnosc (9.000000) (6.000000) ) ) ) ) ( wartosc_dokladnosc (-6.000000) (9.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.22222222222222221);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-4.000000) (8.000000) ) ( wartosc_od_do (-6.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-5.000000) (-5.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) (6.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (6.000000) (9.000000) ) ) ;;
assert (a =. 0.166666666666666657);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( podzielic ( minus ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (4.000000) (9.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ) ) ;;
assert (a =. -9.37499999999999822);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-10.000000) (6.000000) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) ;;
assert (a =. -13.6);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -54.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (2.000000) ) ( wartosc_dokladna (-5.000000) ) ) (0.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (3.000000) (4.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert (a =. 12.120000000000001);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-10.000000) (-2.000000) ) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( minus ( wartosc_dokladnosc (7.000000) (4.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ;;
assert (a =. 10.2800000000000011);;
let a = min_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -12.);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_od_do (0.000000) (4.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (7.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 1.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 14.);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (6.000000) (9.000000) ) ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( podzielic ( wartosc_od_do (-4.000000) (-3.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ;;
assert (a =. -9.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a =. -0.4);;
let a = max_wartosc ( minus ( wartosc_dokladna (8.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ) ;;
assert (a =. 8.);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (6.000000) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) ;;
assert (a =. 19.0800000000000018);;
let a = sr_wartosc ( razy ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_dokladnosc (6.000000) (8.000000) ) ) ;;
assert (a =. 22.6800000000000033);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (1.000000) ) ( wartosc_dokladnosc (9.000000) (5.000000) ) ) ;;
assert (a =. -8.46450000000000102);;
let a = in_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-9.000000) (-9.000000) ) ) (6.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( minus ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( wartosc_od_do (-3.000000) (-1.000000) ) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ;;
assert (a =. 5.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-4.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -1.5);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-8.000000) (6.000000) ) ) ;;
assert (a =. 72.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( minus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladnosc (-6.000000) (7.000000) ) ) ) (8.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( razy ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ) (-2.000000);;
assert (a = true);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.000000) (1.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -4.5);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. 8.);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladnosc (0.000000) (2.000000) ) ( razy ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ;;
assert (a =. -24.48);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (-7.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( podzielic ( wartosc_od_do (-8.000000) (5.000000) ) ( razy ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-5.000000) (1.000000) ) ) ;;
assert (a =. 3.95);;
let a = in_wartosc ( plus ( plus ( wartosc_dokladna (-3.000000) ) ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-5.000000) (9.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ;;
assert (a =. 5.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( razy ( wartosc_od_do (-8.000000) (1.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( razy ( plus ( wartosc_od_do (-5.000000) (-4.000000) ) ( wartosc_od_do (-8.000000) (5.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 18.);;
let a = in_wartosc ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( plus ( plus ( podzielic ( wartosc_dokladna (-10.000000) ) ( plus ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (-4.000000) ) ( razy ( razy ( wartosc_od_do (-7.000000) (6.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ( wartosc_dokladnosc (-1.000000) (6.000000) ) ) ) ) ) ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.000000) (9.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ;;
assert (a =. 1.11022302462515654e-16);;
let a = sr_wartosc ( plus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -3.5);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-10.000000) (-6.000000) ) ) ;;
assert (a =. -13.);;
let a = in_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-7.000000) (1.000000) ) ) (5.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_od_do (-7.000000) (2.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-6.000000) (4.000000) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ( plus ( podzielic ( wartosc_od_do (-9.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ) (6.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( podzielic ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (5.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (8.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (3.000000) ) ( razy ( wartosc_od_do (2.000000) (5.000000) ) ( wartosc_dokladna (3.000000) ) ) ) ) ;;
assert (a =. 23.1958762886597931);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( razy ( podzielic ( wartosc_od_do (3.000000) (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_od_do (-2.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ;;
assert (a =. -0.52);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (9.000000) (7.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 19.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-3.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (3.000000) ) ) ) ;;
assert (a =. -0.156060606060606066);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (-5.000000) (7.000000) ) ) ;;
assert (a =. -0.215053763440860191);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_od_do (-7.000000) (6.000000) ) ( razy ( razy ( wartosc_od_do (-8.000000) (1.000000) ) ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_od_do (5.000000) (9.000000) ) ) ) ( wartosc_dokladnosc (6.000000) (5.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( podzielic ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (4.000000) (7.000000) ) ) ( wartosc_dokladnosc (-5.000000) (9.000000) ) ) ;;
assert (a =. 5.25093457943925213);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ;;
assert (a =. -0.99);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_dokladnosc (-6.000000) (7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-5.000000) (9.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( minus ( wartosc_od_do (-8.000000) (9.000000) ) ( wartosc_od_do (-10.000000) (9.000000) ) ) ;;
assert (a =. 1.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( wartosc_dokladnosc (5.000000) (4.000000) ) ) ;;
assert (a =. -9.56);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-2.000000) (8.000000) ) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-8.000000) (-2.000000) ) ) (3.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 5.);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ) ;;
assert (a =. -13.47);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. 0.4);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ;;
assert (a =. -28.5600000000000023);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (5.000000) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) ;;
assert (a =. -0.819848975188781);;
let a = sr_wartosc ( minus ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (1.000000) ) ) ( podzielic ( wartosc_dokladnosc (2.000000) (1.000000) ) ( wartosc_dokladnosc (4.000000) (7.000000) ) ) ) ;;
assert (a =. -10.5028137875590382);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-1.000000) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (8.000000) (9.000000) ) ) ) ;;
assert (a =. 5.5625);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (7.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 2.66666666666666652);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (7.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( podzielic ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -0.55555555555555558);;
let a = max_wartosc ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_od_do (-1.000000) (1.000000) ) ) ;;
assert (a =. 9.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (6.000000) (2.000000) ) ( wartosc_dokladnosc (-1.000000) (2.000000) ) ) ;;
assert (a =. 7.);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ) (-4.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-2.000000) (6.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) (7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( plus ( plus ( wartosc_dokladnosc (-4.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (1.000000) (8.000000) ) ( plus ( wartosc_od_do (-5.000000) (4.000000) ) ( razy ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-9.000000) (2.000000) ) ) ) ) ) ( podzielic ( wartosc_dokladnosc (-7.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (6.000000) (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( minus ( wartosc_od_do (-10.000000) (-4.000000) ) ( wartosc_dokladna (5.000000) ) ) ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ) ;;
assert (a =. 106.050000000000011);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-3.000000) (5.000000) ) ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (8.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (5.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( podzielic ( razy ( plus ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( wartosc_dokladnosc (8.000000) (3.000000) ) ) ( wartosc_dokladnosc (-5.000000) (8.000000) ) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( minus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (-9.000000) (5.000000) ) ) ;;
assert (a =. 2.55000000000000071);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (6.000000) (9.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ;;
assert (a =. 8.);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( razy ( podzielic ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (5.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-4.000000) (2.000000) ) ) ;;
assert (a =. 0.765306122448979664);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (4.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-9.000000) (7.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) (3.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-3.000000) (7.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) (5.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (6.000000) (7.000000) ) ( minus ( minus ( podzielic ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) ( wartosc_dokladnosc (-3.000000) (1.000000) ) ) ) ( podzielic ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ;;
assert (a =. 41.4);;
let a = max_wartosc ( plus ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) ;;
assert (a =. 7.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( minus ( podzielic ( wartosc_od_do (-4.000000) (4.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladnosc (-8.000000) (3.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ) (-4.000000);;
assert (a = true);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-6.000000) (9.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( minus ( minus ( wartosc_od_do (-3.000000) (1.000000) ) ( wartosc_od_do (-3.000000) (3.000000) ) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ) ;;
assert (a =. -9.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( wartosc_dokladnosc (4.000000) (1.000000) ) ) ;;
assert (a =. -0.500100010001000128);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ;;
assert (a =. 8.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-5.000000) ) ( wartosc_dokladnosc (2.000000) (5.000000) ) ) ;;
assert (a =. -3.55889724310776945);;
let a = min_wartosc ( razy ( wartosc_od_do (-7.000000) (2.000000) ) ( wartosc_od_do (-6.000000) (-1.000000) ) ) ;;
assert (a =. -12.);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (1.000000) (2.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. -8.16);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (-10.000000) (3.000000) ) ) ;;
assert (a =. -11.);;
let a = max_wartosc ( minus ( podzielic ( wartosc_dokladnosc (5.000000) (4.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 2.52);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (1.000000) ) ) ) ( wartosc_od_do (-1.000000) (4.000000) ) ) ;;
assert (a =. 1.5);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-6.000000) (2.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (2.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-3.000000) (6.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. 0.5);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 64.);;
let a = max_wartosc ( plus ( wartosc_od_do (3.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( razy ( wartosc_od_do (-10.000000) (-3.000000) ) ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ;;
assert (a =. -100.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 0.5);;
let a = min_wartosc ( razy ( minus ( wartosc_dokladnosc (9.000000) (6.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-9.000000) (0.000000) ) ( podzielic ( plus ( wartosc_od_do (-6.000000) (-1.000000) ) ( plus ( razy ( podzielic ( wartosc_od_do (6.000000) (7.000000) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ( wartosc_od_do (-10.000000) (6.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-9.000000) (4.000000) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) ) ;;
assert (a =. -1.);;
let a = max_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (8.000000) ) ( wartosc_dokladna (-2.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (2.000000) ) ) (-1.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (7.000000) (0.000000) ) ) ;;
assert (a =. 0.857142857142857095);;
let a = min_wartosc ( plus ( razy ( wartosc_dokladnosc (2.000000) (0.000000) ) ( plus ( wartosc_od_do (-6.000000) (6.000000) ) ( minus ( minus ( plus ( wartosc_dokladnosc (-10.000000) (9.000000) ) ( wartosc_dokladna (3.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( podzielic ( minus ( wartosc_od_do (-6.000000) (0.000000) ) ( razy ( wartosc_dokladna (-2.000000) ) ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (6.000000) (1.000000) ) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladnosc (8.000000) (9.000000) ) ) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (3.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( podzielic ( plus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_dokladnosc (6.000000) (5.000000) ) ) ( minus ( podzielic ( wartosc_dokladnosc (7.000000) (1.000000) ) ( razy ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (1.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ( wartosc_od_do (-6.000000) (6.000000) ) ) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (9.000000) (1.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) ;;
assert (a =. 1.36238532110091737);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( podzielic ( plus ( wartosc_od_do (6.000000) (6.000000) ) ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (6.000000) ) ) ) ( wartosc_od_do (-2.000000) (4.000000) ) ) ( minus ( razy ( wartosc_dokladna (-2.000000) ) ( minus ( podzielic ( podzielic ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_od_do (0.000000) (8.000000) ) ) ( wartosc_dokladnosc (-7.000000) (3.000000) ) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( minus ( wartosc_dokladnosc (8.000000) (8.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ) ;;
assert (a =. -15.64);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-8.000000) (3.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (2.000000) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) (8.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( razy ( wartosc_od_do (-6.000000) (-2.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-3.000000) (2.000000) ) ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( podzielic ( razy ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ( podzielic ( wartosc_dokladnosc (9.000000) (3.000000) ) ( wartosc_dokladnosc (-5.000000) (3.000000) ) ) ) ) ;;
assert (a =. -1.44395189003436442);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (0.000000) (3.000000) ) ( podzielic ( minus ( wartosc_od_do (-9.000000) (7.000000) ) ( minus ( minus ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ( wartosc_od_do (-7.000000) (8.000000) ) ) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (5.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_od_do (8.000000) (8.000000) ) ( wartosc_dokladnosc (1.000000) (1.000000) ) ) ;;
assert (a =. 8.08080808080808133);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 1.25);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( plus ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( razy ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( plus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (3.000000) (1.000000) ) ) ) ) ;;
assert (a =. 10.5966666666666676);;
let a = max_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (-1.000000) ) ( wartosc_dokladnosc (2.000000) (2.000000) ) ) ;;
assert (a =. -1.52060824329731892);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (2.000000) (8.000000) ) ) ;;
assert (a =. -1.5);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -7.);;
let a = in_wartosc ( razy ( wartosc_od_do (-1.000000) (-1.000000) ) ( wartosc_dokladna (-9.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_dokladnosc (9.000000) (2.000000) ) ) ;;
assert (a =. 36.72);;
let a = sr_wartosc ( minus ( wartosc_od_do (-10.000000) (7.000000) ) ( wartosc_dokladnosc (-5.000000) (2.000000) ) ) ;;
assert (a =. 3.5);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (8.000000) ) ) ;;
assert (a =. -9.2);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_od_do (-7.000000) (-5.000000) ) ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-7.000000) (-7.000000) ) ) ) ;;
assert (a =. -4.);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (2.000000) (6.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (-9.000000) (0.000000) ) ( plus ( wartosc_od_do (2.000000) (9.000000) ) ( wartosc_dokladnosc (4.000000) (2.000000) ) ) ) ;;
assert (a =. -14.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (-1.000000) (6.000000) ) ) ;;
assert (a =. -2.12765957446808507);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 1.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( podzielic ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (7.000000) ) ) ( plus ( minus ( minus ( wartosc_od_do (-7.000000) (4.000000) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ( minus ( wartosc_od_do (-8.000000) (3.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( plus ( wartosc_od_do (-8.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (6.000000) (4.000000) ) ( wartosc_od_do (2.000000) (7.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ;;
assert (a =. -6.58);;
let a = min_wartosc ( razy ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-7.000000) (9.000000) ) ) ;;
assert (a =. 19.11);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (7.000000) (7.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. 14.49);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 63.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladnosc (4.000000) (6.000000) ) ) ;;
assert (a =. 1.86170212765957444);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -8.36);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (1.000000) (5.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (6.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( minus ( wartosc_od_do (-10.000000) (1.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ;;
assert (a =. 0.571428571428571397);;
let a = sr_wartosc ( plus ( wartosc_od_do (-5.000000) (3.000000) ) ( wartosc_od_do (1.000000) (5.000000) ) ) ;;
assert (a =. 2.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-7.000000) (-2.000000) ) ) (-8.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (3.000000) ) ) ;;
assert (a =. 10.);;
let a = max_wartosc ( razy ( wartosc_od_do (-9.000000) (-6.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -18.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (2.000000) ) ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( plus ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( podzielic ( plus ( plus ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-6.000000) (-6.000000) ) ) ( wartosc_dokladnosc (6.000000) (0.000000) ) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ( wartosc_dokladnosc (-2.000000) (8.000000) ) ) ( wartosc_dokladnosc (-7.000000) (4.000000) ) ) ;;
assert (a =. -0.650108496575887873);;
let a = in_wartosc ( plus ( podzielic ( wartosc_dokladnosc (9.000000) (7.000000) ) ( podzielic ( wartosc_od_do (-5.000000) (7.000000) ) ( wartosc_od_do (-8.000000) (-5.000000) ) ) ) ( wartosc_dokladnosc (8.000000) (7.000000) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( minus ( podzielic ( wartosc_dokladnosc (8.000000) (3.000000) ) ( wartosc_dokladnosc (-7.000000) (5.000000) ) ) ( minus ( wartosc_dokladnosc (4.000000) (7.000000) ) ( wartosc_dokladnosc (-7.000000) (2.000000) ) ) ) ;;
assert (a =. -12.6590977443609027);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (9.000000) (9.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (8.000000) ) ( wartosc_od_do (-6.000000) (8.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 0.13285714285714284);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-1.000000) (2.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (8.000000) ) ( plus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ) ) (-8.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( razy ( wartosc_od_do (-7.000000) (-7.000000) ) ( wartosc_od_do (6.000000) (6.000000) ) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. -50.);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (9.000000) (5.000000) ) ( podzielic ( razy ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( minus ( wartosc_od_do (-9.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (1.000000) (9.000000) ) ( wartosc_od_do (-3.000000) (9.000000) ) ) ;;
assert (a =. -27.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( minus ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-10.000000) (1.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( wartosc_od_do (-8.000000) (-7.000000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladnosc (8.000000) (6.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( wartosc_dokladnosc (7.000000) (7.000000) ) ) ;;
assert (a =. -92.29);;
let a = sr_wartosc ( plus ( plus ( wartosc_od_do (-8.000000) (6.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (9.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. -1.5925);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (4.000000) (5.000000) ) ( wartosc_od_do (-7.000000) (4.000000) ) ) ;;
assert (a =. 16.8);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (3.000000) (6.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (7.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ;;
assert (a =. 4.5);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ( wartosc_od_do (-6.000000) (1.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( plus ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (6.000000) (6.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladnosc (3.000000) (9.000000) ) ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-4.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert (a =. -0.0833333333333333287);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( minus ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( minus ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ) ;;
assert (a =. 2.);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-5.000000) (-3.000000) ) ) ;;
assert (a =. -10.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.000000) (-6.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) (-9.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-8.000000) (-3.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( razy ( wartosc_od_do (-1.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -2.);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -7.);;
let a = in_wartosc ( minus ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (7.000000) (1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ( razy ( wartosc_dokladnosc (-8.000000) (3.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (-7.000000) (6.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-1.000000) (0.000000) ) ( podzielic ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (-8.000000) (4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. -36.);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( razy ( razy ( wartosc_od_do (-6.000000) (5.000000) ) ( wartosc_dokladnosc (7.000000) (6.000000) ) ) ( minus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-10.000000) (-7.000000) ) ) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (-5.000000) (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( razy ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (-9.000000) (8.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (5.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( plus ( plus ( wartosc_od_do (0.000000) (8.000000) ) ( razy ( wartosc_dokladnosc (2.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (-10.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (1.000000) (6.000000) ) ) ( wartosc_od_do (-9.000000) (9.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) (3.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (-7.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ;;
assert (a =. 0.700000000000000178);;
let a = max_wartosc ( plus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (1.000000) (9.000000) ) ) ;;
assert (a =. -8.91);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-9.000000) (3.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -7.73);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. 0.125);;
let a = min_wartosc ( plus ( razy ( wartosc_od_do (6.000000) (9.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ;;
assert (a =. -19.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (4.000000) (7.000000) ) ( minus ( wartosc_dokladna (8.000000) ) ( plus ( wartosc_dokladnosc (-2.000000) (7.000000) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ) ) ;;
assert (a =. 0.264200792602377776);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-2.000000) (6.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. -10.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) (1.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (-7.000000) (2.000000) ) ( wartosc_od_do (-5.000000) (-1.000000) ) ) ;;
assert (a =. 35.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) (-10.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (5.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_od_do (-9.000000) (-3.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -0.166666666666666657);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( razy ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (9.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (4.000000) (5.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (8.000000) ) ( wartosc_dokladnosc (-3.000000) (5.000000) ) ) (-2.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (3.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. -0.5);;
let a = sr_wartosc ( podzielic ( podzielic ( plus ( wartosc_dokladna (7.000000) ) ( plus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (2.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. -2.04);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( plus ( wartosc_od_do (2.000000) (9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (6.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (-4.000000) (7.000000) ) ( wartosc_dokladnosc (-2.000000) (0.000000) ) ) ;;
assert (a =. 3.5);;
let a = in_wartosc ( plus ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) (9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (2.000000) ) ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (2.000000) ) ) ) ;;
assert (a =. -1.5);;
let a = max_wartosc ( minus ( minus ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-1.000000) (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (4.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-4.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-2.000000) (3.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (3.000000) (9.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -18.);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -13.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-7.000000) (5.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a = neg_infinity);;
let a = min_wartosc ( podzielic ( plus ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladnosc (7.000000) (4.000000) ) ) ( podzielic ( wartosc_od_do (-7.000000) (-1.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (7.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ) ) ;;
assert (a =. -4.18666666666666654);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.000000) (2.000000) ) ( wartosc_od_do (4.000000) (9.000000) ) ) ;;
assert (a =. -5.5);;
let a = in_wartosc ( podzielic ( podzielic ( plus ( wartosc_od_do (-2.000000) (4.000000) ) ( razy ( wartosc_dokladnosc (-4.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (1.000000) ) ) ) ( razy ( wartosc_dokladna (1.000000) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ) ) ( wartosc_dokladnosc (-9.000000) (3.000000) ) ) (9.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( minus ( wartosc_od_do (-5.000000) (-5.000000) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ( wartosc_dokladna (1.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladnosc (-3.000000) (1.000000) ) ) ;;
assert (a =. 0.66006600660066006);;
let a = min_wartosc ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. 2.);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (0.000000) (5.000000) ) ( minus ( plus ( wartosc_dokladna (9.000000) ) ( razy ( wartosc_dokladna (1.000000) ) ( podzielic ( podzielic ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( minus ( wartosc_od_do (0.000000) (3.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( plus ( wartosc_od_do (-7.000000) (2.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-2.000000) (9.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (0.000000) ) ) (1.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_od_do (0.000000) (1.000000) ) ( podzielic ( podzielic ( podzielic ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( minus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (3.000000) ) ) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) (-2.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladna (-9.000000) ) ( minus ( plus ( minus ( wartosc_od_do (-10.000000) (-1.000000) ) ( wartosc_od_do (7.000000) (7.000000) ) ) ( podzielic ( wartosc_od_do (-10.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (-6.000000) (9.000000) ) ) ;;
assert (a =. -0.366300366300366276);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (2.000000) (9.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) ;;
assert (a =. 0.399267399267399292);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_od_do (-8.000000) (7.000000) ) ) (-1.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladna (2.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (-9.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_od_do (-2.000000) (9.000000) ) ) ) ;;
assert (a =. -3.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (9.000000) ) ) ;;
assert (a =. 0.720000000000000639);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ;;
assert (a =. 2.4075);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (3.000000) (9.000000) ) ( wartosc_od_do (-1.000000) (0.000000) ) ) ;;
assert (a =. 3.27);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (1.000000) (3.000000) ) ( wartosc_dokladnosc (-3.000000) (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_od_do (-1.000000) (1.000000) ) ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (1.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ) ) ( wartosc_od_do (-2.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.111111111111111105);;
let a = min_wartosc ( minus ( podzielic ( wartosc_od_do (3.000000) (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladnosc (-8.000000) (7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -4.5);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (6.000000) ) ( podzielic ( razy ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_od_do (-7.000000) (-5.000000) ) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( minus ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a = infinity);;
let a = in_wartosc ( plus ( podzielic ( wartosc_od_do (-7.000000) (9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) (2.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 6.);;
let a = in_wartosc ( razy ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (5.000000) ) ) (-8.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -3.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-5.000000) (8.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. -7.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ;;
assert (a =. -0.600000000000000089);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-9.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( plus ( podzielic ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 17.1428571428571423);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( minus ( wartosc_od_do (-7.000000) (2.000000) ) ( podzielic ( podzielic ( wartosc_dokladna (-4.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( razy ( wartosc_od_do (2.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -4.);;
let a = min_wartosc ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -5.);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladnosc (5.000000) (8.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-2.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (1.000000) (7.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ;;
assert (a =. 4.93);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (9.000000) (3.000000) ) ) ;;
assert (a =. 1.00090081072965664);;
let a = sr_wartosc ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-2.000000) (5.000000) ) ) ;;
assert (a =. 3.5);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-8.000000) (7.000000) ) ( wartosc_dokladnosc (-3.000000) (0.000000) ) ) ;;
assert (a =. 24.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( plus ( plus ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-4.000000) (9.000000) ) ) ( wartosc_dokladnosc (-9.000000) (8.000000) ) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) ;;
assert (a =. -3.27999999999999936);;
let a = min_wartosc ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladnosc (9.000000) (2.000000) ) ) ( podzielic ( minus ( wartosc_od_do (-8.000000) (-2.000000) ) ( wartosc_dokladna (-8.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) (2.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (0.000000) (1.000000) ) ) (5.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (3.000000) (7.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (7.000000) (7.000000) ) ) ;;
assert (a =. -6.5);;
let a = in_wartosc ( razy ( wartosc_od_do (4.000000) (5.000000) ) ( wartosc_dokladna (2.000000) ) ) (8.000000);;
assert (a = true);;
let a = in_wartosc ( podzielic ( wartosc_od_do (2.000000) (3.000000) ) ( wartosc_dokladna (0.000000) ) ) (-8.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (2.000000) (9.000000) ) ( wartosc_dokladnosc (-3.000000) (6.000000) ) ) ;;
assert (a =. 8.5);;
let a = min_wartosc ( razy ( minus ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (-3.000000) (3.000000) ) ) ( wartosc_od_do (-5.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( plus ( wartosc_dokladnosc (5.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -0.93000000000000016);;
let a = min_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (2.000000) (6.000000) ) ) ;;
assert (a =. -19.0800000000000018);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( podzielic ( razy ( wartosc_od_do (-3.000000) (3.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ) ( wartosc_dokladnosc (9.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( wartosc_od_do (5.000000) (9.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( minus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (4.000000) ) ) ;;
assert (a =. -4.16);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (2.000000) (3.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( podzielic ( wartosc_od_do (1.000000) (9.000000) ) ( wartosc_dokladna (9.000000) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( plus ( minus ( wartosc_dokladnosc (1.000000) (1.000000) ) ( wartosc_dokladnosc (-10.000000) (1.000000) ) ) ( wartosc_dokladnosc (7.000000) (5.000000) ) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) ;;
assert (a =. 18.);;
let a = max_wartosc ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( minus ( podzielic ( wartosc_dokladnosc (-1.000000) (9.000000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ;;
assert (a =. 2.45250000000000057);;
let a = min_wartosc ( podzielic ( razy ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladnosc (-1.000000) (5.000000) ) ) ( wartosc_dokladnosc (9.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-8.000000) (6.000000) ) ( wartosc_dokladnosc (7.000000) (7.000000) ) ) ;;
assert (a =. 6.);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (-7.000000) (-1.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -0.285714285714285698);;
let a = max_wartosc ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-7.000000) (9.000000) ) ) ;;
assert (a =. -1.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( minus ( plus ( razy ( podzielic ( wartosc_dokladnosc (-8.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( razy ( wartosc_od_do (0.000000) (9.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( plus ( podzielic ( podzielic ( wartosc_od_do (3.000000) (9.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( minus ( plus ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-10.000000) (2.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_dokladna (-9.000000) ) ) ) ) ( razy ( wartosc_od_do (-4.000000) (5.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_dokladnosc (-6.000000) (4.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( razy ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_od_do (4.000000) (5.000000) ) ) ( podzielic ( wartosc_od_do (-7.000000) (7.000000) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ) ( wartosc_dokladnosc (-3.000000) (8.000000) ) ) (-6.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (3.000000) ) ) ;;
assert (a =. -3.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-3.000000) (9.000000) ) ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (8.000000) (1.000000) ) ( wartosc_dokladnosc (-4.000000) (0.000000) ) ) ) ) ;;
assert (a =. -6.80535353535353593);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (5.000000) (0.000000) ) ) ;;
assert (a =. -1.6);;
let a = in_wartosc ( razy ( wartosc_od_do (-8.000000) (-6.000000) ) ( wartosc_dokladnosc (-6.000000) (7.000000) ) ) (3.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) ;;
assert (a =. 5.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-6.000000) (-6.000000) ) ) ;;
assert (a =. 11.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-9.000000) (-7.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ( wartosc_dokladnosc (1.000000) (7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-2.000000) ) ( razy ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladnosc (-3.000000) (3.000000) ) ) ) ;;
assert (a =. -6.635);;
let a = min_wartosc ( plus ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. -6.);;
let a = sr_wartosc ( minus ( wartosc_dokladna (4.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-7.000000) ) ) ) ;;
assert (a =. 4.);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (-1.000000) (2.000000) ) ( razy ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ( wartosc_dokladnosc (-7.000000) (1.000000) ) ) ;;
assert (a =. -0.0721500721500721587);;
let a = min_wartosc ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-5.000000) (3.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( plus ( razy ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-10.000000) (-5.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) (-5.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (6.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -2.);;
let a = sr_wartosc ( plus ( wartosc_od_do (-6.000000) (7.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. -2.5);;
let a = in_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_od_do (-7.000000) (-2.000000) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-9.000000) (9.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) (3.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (0.000000) (3.000000) ) ( plus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladnosc (-7.000000) (6.000000) ) ) ) ;;
assert (a =. -7.42);;
let a = min_wartosc ( razy ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( plus ( wartosc_od_do (-4.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ) ( wartosc_dokladnosc (6.000000) (4.000000) ) ) ;;
assert (a =. -6.24);;
let a = max_wartosc ( minus ( wartosc_od_do (8.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( razy ( razy ( wartosc_dokladnosc (-2.000000) (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ;;
assert (a =. -20.);;
let a = max_wartosc ( plus ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ;;
assert (a =. 10.);;
let a = min_wartosc ( minus ( razy ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 10.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (-7.000000) (3.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (7.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (9.000000) (1.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( razy ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (-9.000000) (-4.000000) ) ) ) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ) ) ;;
assert (a =. 57.195);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-3.000000) (5.000000) ) ( wartosc_dokladnosc (4.000000) (5.000000) ) ) (-2.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (5.000000) (4.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (-4.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (1.000000) ) ( plus ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladna (-10.000000) ) ) ) ;;
assert (a =. 0.594);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (0.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (5.000000) (6.000000) ) ( wartosc_od_do (6.000000) (9.000000) ) ) ( wartosc_dokladna (-3.000000) ) ) ) ;;
assert (a =. -0.833333333333333259);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-3.000000) ) ( razy ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (7.000000) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ( wartosc_dokladna (6.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladna (-1.000000) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ;;
assert (a =. -7.52);;
let a = in_wartosc ( plus ( wartosc_od_do (3.000000) (4.000000) ) ( wartosc_od_do (7.000000) (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_dokladnosc (-7.000000) (8.000000) ) ) ( wartosc_od_do (-9.000000) (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( podzielic ( plus ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ( wartosc_dokladnosc (-10.000000) (3.000000) ) ) ( wartosc_od_do (-3.000000) (-1.000000) ) ) ( podzielic ( wartosc_dokladnosc (4.000000) (0.000000) ) ( wartosc_od_do (7.000000) (7.000000) ) ) ) ;;
assert (a =. 5.65833333333333233);;
let a = in_wartosc ( minus ( wartosc_dokladna (6.000000) ) ( plus ( wartosc_od_do (-10.000000) (6.000000) ) ( wartosc_dokladna (8.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = min_wartosc ( podzielic ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( razy ( wartosc_dokladna (3.000000) ) ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( wartosc_dokladna (5.000000) ) ) ) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( plus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (3.000000) ) ) (-1.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (9.000000) (0.000000) ) ( wartosc_dokladnosc (-5.000000) (0.000000) ) ) ;;
assert (a =. -45.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( plus ( wartosc_od_do (5.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (7.000000) ) ) (-7.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (3.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_dokladnosc (-9.000000) (8.000000) ) ) ;;
assert (a =. -15.72);;
let a = sr_wartosc ( minus ( plus ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -3.5);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladnosc (-9.000000) (2.000000) ) ) ;;
assert (a =. -0.333466720021341867);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -1.);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (-2.000000) (8.000000) ) ( wartosc_dokladnosc (-10.000000) (5.000000) ) ) ) ;;
assert (a =. 12.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (8.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (4.000000) ) ( plus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( wartosc_od_do (1.000000) (8.000000) ) ) ;;
assert (a =. 6.1);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (1.000000) (9.000000) ) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( podzielic ( minus ( podzielic ( wartosc_dokladna (-9.000000) ) ( razy ( wartosc_dokladnosc (-9.000000) (0.000000) ) ( wartosc_dokladnosc (-4.000000) (6.000000) ) ) ) ( razy ( wartosc_dokladnosc (3.000000) (7.000000) ) ( wartosc_od_do (-9.000000) (-3.000000) ) ) ) ( wartosc_dokladna (-9.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (5.000000) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ;;
assert (a =. -1.0725);;
let a = max_wartosc ( minus ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (7.000000) ) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( plus ( podzielic ( wartosc_dokladna (-7.000000) ) ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (6.000000) ) ( wartosc_dokladnosc (-10.000000) (2.000000) ) ) ;;
assert (a =. -15.);;
let a = sr_wartosc ( minus ( wartosc_od_do (-9.000000) (-1.000000) ) ( wartosc_od_do (-5.000000) (3.000000) ) ) ;;
assert (a =. -4.);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (1.000000) (9.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. -5.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( razy ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( podzielic ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( wartosc_od_do (-1.000000) (-1.000000) ) ) ( podzielic ( wartosc_od_do (-7.000000) (-6.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-2.000000) ) ) (4.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (-7.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ;;
assert (a =. 28.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (4.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( wartosc_dokladnosc (-3.000000) (6.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_od_do (-4.000000) (3.000000) ) ( wartosc_dokladnosc (3.000000) (0.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( plus ( wartosc_od_do (3.000000) (7.000000) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.000000) (-4.000000) ) ( wartosc_dokladnosc (1.000000) (5.000000) ) ) ;;
assert (a =. -3.80952380952380931);;
let a = min_wartosc ( podzielic ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ( wartosc_dokladnosc (-9.000000) (9.000000) ) ) ;;
assert (a =. -1.09890109890109899);;
let a = sr_wartosc ( minus ( wartosc_dokladna (-7.000000) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. -7.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (0.000000) (7.000000) ) ( podzielic ( minus ( wartosc_dokladnosc (-1.000000) (6.000000) ) ( razy ( wartosc_od_do (5.000000) (7.000000) ) ( wartosc_od_do (-9.000000) (-5.000000) ) ) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (4.000000) (5.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( razy ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-9.000000) (-1.000000) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert (a =. 0.5);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.000000) (8.000000) ) ( wartosc_dokladna (5.000000) ) ) (-2.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (1.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-5.000000) (2.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert (a =. -13.1);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-4.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (6.000000) (2.000000) ) ( minus ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-7.000000) (-4.000000) ) ) ) ;;
assert (a =. 12.24);;
let a = min_wartosc ( plus ( wartosc_od_do (-6.000000) (-5.000000) ) ( podzielic ( wartosc_od_do (-2.000000) (6.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (5.000000) ) ( wartosc_od_do (0.000000) (7.000000) ) ) ;;
assert (a =. -0.271428571428571408);;
let a = sr_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( razy ( razy ( minus ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ( wartosc_dokladnosc (-7.000000) (4.000000) ) ) ( podzielic ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( podzielic ( wartosc_od_do (3.000000) (5.000000) ) ( minus ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( plus ( minus ( wartosc_od_do (-10.000000) (-5.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ) ) ) ( wartosc_dokladna (9.000000) ) ) ) (-10.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (3.000000) (0.000000) ) ( minus ( wartosc_dokladna (-7.000000) ) ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( plus ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_od_do (1.000000) (7.000000) ) ) ) ) ) ;;
assert (a =. 14.);;
let a = sr_wartosc ( razy ( wartosc_dokladna (2.000000) ) ( podzielic ( plus ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladna (2.000000) ) ) ( wartosc_od_do (-6.000000) (-4.000000) ) ) ) ;;
assert (a =. 1.41666666666666674);;
let a = sr_wartosc ( razy ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_od_do (-1.000000) (1.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.000000) (5.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladna (4.000000) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. 12.);;
let a = sr_wartosc ( razy ( minus ( wartosc_dokladna (0.000000) ) ( razy ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ( wartosc_dokladnosc (4.000000) (9.000000) ) ) ;;
assert (a =. 156.96);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (1.000000) (6.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. -0.117777777777777773);;
let a = min_wartosc ( minus ( wartosc_od_do (0.000000) (7.000000) ) ( razy ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladnosc (7.000000) (2.000000) ) ) ) ;;
assert (a =. 41.1600000000000037);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( wartosc_od_do (-7.000000) (-7.000000) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (1.000000) (9.000000) ) ( wartosc_dokladna (4.000000) ) ) ;;
assert (a =. -2.91);;
let a = sr_wartosc ( razy ( wartosc_dokladnosc (3.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (4.000000) ) ) ;;
assert (a =. 15.);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( plus ( razy ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_dokladna (4.000000) ) ) ( minus ( plus ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (-1.000000) ) ( razy ( wartosc_od_do (-7.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-9.000000) (-4.000000) ) ( wartosc_dokladnosc (-6.000000) (2.000000) ) ) ) ) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_dokladna (-4.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (3.000000) (8.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( plus ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-1.000000) (0.000000) ) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-6.000000) (-3.000000) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) ;;
assert (a =. 6.);;
let a = in_wartosc ( minus ( wartosc_dokladna (1.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) (5.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( razy ( wartosc_dokladnosc (-2.000000) (9.000000) ) ( wartosc_od_do (-10.000000) (-2.000000) ) ) ( wartosc_dokladnosc (2.000000) (7.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-2.000000) (8.000000) ) ( wartosc_od_do (-4.000000) (1.000000) ) ) (-4.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (0.000000) (6.000000) ) ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (-4.000000) (3.000000) ) ) ) (7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( plus ( podzielic ( wartosc_dokladnosc (-2.000000) (6.000000) ) ( wartosc_dokladnosc (9.000000) (5.000000) ) ) ( wartosc_od_do (-1.000000) (2.000000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (-1.000000) (1.000000) ) ) ;;
assert (a =. -1.98019801980198018);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ;;
assert (a =. -1.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-10.000000) (1.000000) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) (1.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (7.000000) ) ) ;;
assert (a =. 0.5);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (8.000000) (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 2.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (5.000000) ) ( minus ( wartosc_dokladnosc (-3.000000) (1.000000) ) ( wartosc_dokladnosc (-3.000000) (8.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( plus ( minus ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. 9.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) (-3.000000);;
assert (a = false);;
let a = sr_wartosc ( minus ( razy ( podzielic ( wartosc_od_do (-7.000000) (0.000000) ) ( wartosc_od_do (0.000000) (4.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ;;
assert (a = neg_infinity);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-4.000000) (2.000000) ) ( wartosc_od_do (-4.000000) (8.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( plus ( wartosc_od_do (-10.000000) (0.000000) ) ( plus ( wartosc_od_do (-7.000000) (2.000000) ) ( wartosc_od_do (-3.000000) (3.000000) ) ) ) ;;
assert (a =. -7.5);;
let a = max_wartosc ( razy ( wartosc_dokladnosc (8.000000) (0.000000) ) ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_od_do (3.000000) (7.000000) ) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( razy ( wartosc_od_do (1.000000) (2.000000) ) ( minus ( wartosc_dokladnosc (7.000000) (0.000000) ) ( wartosc_dokladnosc (-10.000000) (0.000000) ) ) ) ;;
assert (a =. 34.);;
let a = max_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 3.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (3.000000) ) ( wartosc_od_do (-9.000000) (-8.000000) ) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ( wartosc_dokladna (9.000000) ) ) (7.000000);;
assert (a = true);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (7.000000) ) ( razy ( wartosc_od_do (0.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( podzielic ( minus ( wartosc_od_do (-8.000000) (4.000000) ) ( wartosc_dokladna (-10.000000) ) ) ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (5.000000) (4.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( plus ( wartosc_od_do (-5.000000) (1.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( razy ( wartosc_od_do (-4.000000) (-2.000000) ) ( razy ( wartosc_od_do (5.000000) (8.000000) ) ( wartosc_dokladnosc (-8.000000) (0.000000) ) ) ) (7.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-2.000000) (4.000000) ) ) (4.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( podzielic ( plus ( wartosc_dokladnosc (-8.000000) (2.000000) ) ( wartosc_od_do (-6.000000) (4.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ( wartosc_dokladnosc (-7.000000) (0.000000) ) ) ;;
assert (a =. -8.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-4.000000) (8.000000) ) ( razy ( wartosc_od_do (-5.000000) (5.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) (0.000000);;
assert (a = true);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_od_do (8.000000) (8.000000) ) ) ;;
assert (a =. -6.);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (5.000000) (1.000000) ) ( wartosc_dokladnosc (4.000000) (0.000000) ) ) (-10.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( razy ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( razy ( wartosc_od_do (-2.000000) (3.000000) ) ( wartosc_dokladnosc (7.000000) (1.000000) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( razy ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladna (-1.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladnosc (0.000000) (9.000000) ) ( podzielic ( wartosc_od_do (-5.000000) (-1.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ) ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (4.000000) ) ( razy ( wartosc_dokladna (-10.000000) ) ( wartosc_dokladnosc (-5.000000) (4.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( wartosc_dokladna (-4.000000) ) ) ;;
assert (a =. 0.7725);;
let a = sr_wartosc ( plus ( wartosc_dokladna (-5.000000) ) ( podzielic ( wartosc_dokladnosc (-9.000000) (8.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (0.000000) (8.000000) ) ( wartosc_dokladna (-7.000000) ) ) ( podzielic ( razy ( wartosc_od_do (1.000000) (8.000000) ) ( podzielic ( wartosc_od_do (-1.000000) (1.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_dokladna (7.000000) ) ) ) ) ( podzielic ( wartosc_od_do (-6.000000) (-5.000000) ) ( wartosc_od_do (0.000000) (6.000000) ) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_od_do (1.000000) (2.000000) ) ) ;;
assert (a =. 18.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_od_do (-3.000000) (6.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (-9.000000) (4.000000) ) ( minus ( wartosc_dokladnosc (9.000000) (7.000000) ) ( podzielic ( podzielic ( wartosc_od_do (-8.000000) (0.000000) ) ( plus ( wartosc_od_do (-5.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ) ( wartosc_dokladnosc (8.000000) (6.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (-6.000000) (2.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. -6.12);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-5.000000) (9.000000) ) ( wartosc_dokladnosc (-10.000000) (6.000000) ) ) ;;
assert (a =. -0.21276595744680854);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (-5.000000) (3.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ;;
assert (a =. -5.15);;
let a = sr_wartosc ( razy ( wartosc_dokladna (4.000000) ) ( wartosc_od_do (-6.000000) (-3.000000) ) ) ;;
assert (a =. -18.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-5.000000) (1.000000) ) ( wartosc_od_do (-3.000000) (-2.000000) ) ) (-9.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_dokladnosc (-1.000000) (8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. 1.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (0.000000) (1.000000) ) ( wartosc_dokladna (-8.000000) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( plus ( wartosc_od_do (6.000000) (9.000000) ) ( wartosc_od_do (0.000000) (9.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. 1.71428571428571419);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-2.000000) (8.000000) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ;;
assert (a =. -0.910891089108910923);;
let a = max_wartosc ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (-6.000000) (6.000000) ) ) ;;
assert (a =. -5.64);;
let a = min_wartosc ( minus ( minus ( wartosc_dokladna (-8.000000) ) ( wartosc_dokladnosc (2.000000) (8.000000) ) ) ( wartosc_dokladnosc (0.000000) (8.000000) ) ) ;;
assert (a =. -10.16);;
let a = in_wartosc ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladnosc (-5.000000) (6.000000) ) ) ) (-7.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (-10.000000) (5.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (-8.000000) (4.000000) ) ) ;;
assert (a = neg_infinity);;
let a = sr_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( plus ( wartosc_dokladna (-3.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-8.000000) (4.000000) ) ( wartosc_dokladna (-3.000000) ) ) ;;
assert (a =. 2.66666666666666652);;
let a = max_wartosc ( podzielic ( razy ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (-2.000000) (4.000000) ) ) ( wartosc_dokladnosc (6.000000) (7.000000) ) ) ;;
assert (a =. -1.49532710280373826);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (7.000000) (3.000000) ) ( wartosc_od_do (0.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = in_wartosc ( plus ( wartosc_od_do (-2.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (3.000000) ) ( wartosc_od_do (-3.000000) (1.000000) ) ) ) (-2.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (0.000000) (0.000000) ) ( wartosc_dokladna (-8.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (6.000000) (1.000000) ) ( plus ( razy ( wartosc_dokladnosc (6.000000) (9.000000) ) ( wartosc_od_do (-4.000000) (2.000000) ) ) ( wartosc_dokladna (-8.000000) ) ) ) ;;
assert (a = infinity);;
let a = max_wartosc ( razy ( podzielic ( wartosc_od_do (4.000000) (8.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-4.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (2.000000) ) ( minus ( wartosc_dokladna (-1.000000) ) ( razy ( plus ( wartosc_dokladnosc (-5.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ( wartosc_dokladna (7.000000) ) ) ) ) ;;
assert (a =. 0.);;
let a = min_wartosc ( podzielic ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert (a =. -0.428571428571428548);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (1.000000) ) ( wartosc_od_do (-7.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = sr_wartosc ( podzielic ( minus ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ( plus ( wartosc_dokladnosc (-3.000000) (0.000000) ) ( plus ( podzielic ( wartosc_od_do (-4.000000) (5.000000) ) ( wartosc_dokladnosc (0.000000) (6.000000) ) ) ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (7.000000) (7.000000) ) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (8.000000) (0.000000) ) ) ;;
assert (a =. 0.75);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_od_do (-10.000000) (-7.000000) ) ( wartosc_od_do (-7.000000) (1.000000) ) ) ( wartosc_dokladna (-6.000000) ) ) (1.000000);;
assert (a = false);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (5.000000) (1.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert (a =. 5.05);;
let a = min_wartosc ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-9.000000) (2.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( plus ( wartosc_dokladnosc (7.000000) (4.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (5.000000) ) ( wartosc_od_do (-4.000000) (7.000000) ) ) ) ( razy ( podzielic ( wartosc_od_do (-6.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( wartosc_dokladnosc (-5.000000) (5.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) ( podzielic ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_dokladnosc (9.000000) (1.000000) ) ) ) (5.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (5.000000) (1.000000) ) ) ;;
assert (a =. 9.9);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( razy ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-3.000000) (2.000000) ) ) ( wartosc_dokladnosc (-8.000000) (5.000000) ) ) ;;
assert (a =. 4.20000000000000107);;
let a = min_wartosc ( plus ( minus ( wartosc_od_do (0.000000) (2.000000) ) ( podzielic ( wartosc_dokladnosc (9.000000) (0.000000) ) ( podzielic ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -18.);;
let a = max_wartosc ( podzielic ( wartosc_dokladnosc (7.000000) (3.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-10.000000) (-8.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a = infinity);;
let a = min_wartosc ( minus ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-10.000000) ) ) ;;
assert (a =. 19.);;
let a = max_wartosc ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladnosc (-6.000000) (6.000000) ) ) ;;
assert (a =. -50.76);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (5.000000) ) ) ;;
assert (a =. 1.8);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) ;;
assert (a =. -9.);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (6.000000) (0.000000) ) ( wartosc_od_do (-5.000000) (6.000000) ) ) (-3.000000);;
assert (a = false);;
let a = in_wartosc ( podzielic ( wartosc_od_do (1.000000) (3.000000) ) ( wartosc_dokladna (-2.000000) ) ) (-6.000000);;
assert (a = false);;
let a = min_wartosc ( podzielic ( wartosc_od_do (0.000000) (8.000000) ) ( wartosc_od_do (1.000000) (3.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_od_do (-7.000000) (-2.000000) ) ) ;;
assert (a =. -0.428571428571428548);;
let a = in_wartosc ( plus ( minus ( podzielic ( razy ( wartosc_dokladna (-5.000000) ) ( wartosc_od_do (-5.000000) (7.000000) ) ) ( minus ( wartosc_od_do (0.000000) (6.000000) ) ( podzielic ( podzielic ( wartosc_dokladnosc (-7.000000) (4.000000) ) ( podzielic ( wartosc_od_do (3.000000) (4.000000) ) ( razy ( plus ( wartosc_dokladna (-7.000000) ) ( wartosc_od_do (4.000000) (4.000000) ) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ) ) ( plus ( wartosc_od_do (-3.000000) (7.000000) ) ( wartosc_dokladna (-3.000000) ) ) ) ) ) ( podzielic ( razy ( podzielic ( plus ( wartosc_dokladnosc (-6.000000) (0.000000) ) ( wartosc_od_do (0.000000) (2.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_od_do (3.000000) (8.000000) ) ) ) ( wartosc_dokladna (4.000000) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( wartosc_od_do (-5.000000) (0.000000) ) ( wartosc_dokladna (7.000000) ) ) ;;
assert (a =. -17.5);;
let a = max_wartosc ( razy ( wartosc_od_do (7.000000) (9.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (4.000000) (8.000000) ) ( wartosc_od_do (1.000000) (1.000000) ) ) ;;
assert (a =. 5.32);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.000000) (6.000000) ) ( wartosc_dokladna (9.000000) ) ) (1.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( plus ( wartosc_od_do (-3.000000) (8.000000) ) ( wartosc_od_do (-1.000000) (7.000000) ) ) ( wartosc_dokladna (-2.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( plus ( wartosc_dokladnosc (7.000000) (0.000000) ) ( plus ( wartosc_dokladnosc (-8.000000) (0.000000) ) ( podzielic ( wartosc_dokladna (-6.000000) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (-6.000000) (6.000000) ) ( minus ( plus ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (-6.000000) ) ) ( wartosc_dokladna (0.000000) ) ) ) ;;
assert (a =. 10.);;
let a = min_wartosc ( plus ( wartosc_dokladna (-7.000000) ) ( plus ( wartosc_od_do (4.000000) (4.000000) ) ( wartosc_dokladnosc (0.000000) (1.000000) ) ) ) ;;
assert (a =. -3.);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-2.000000) (9.000000) ) ) ;;
assert (a =. -9.);;
let a = max_wartosc ( minus ( plus ( podzielic ( wartosc_dokladna (0.000000) ) ( podzielic ( wartosc_dokladnosc (-3.000000) (3.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (1.000000) (2.000000) ) ) ) ) ( wartosc_dokladnosc (5.000000) (7.000000) ) ) ( wartosc_od_do (-4.000000) (4.000000) ) ) ;;
assert (a =. 9.35);;
let a = max_wartosc ( plus ( wartosc_od_do (-8.000000) (0.000000) ) ( wartosc_dokladnosc (1.000000) (2.000000) ) ) ;;
assert (a =. 1.02);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-6.000000) (6.000000) ) ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) (-9.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( minus ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (0.000000) (3.000000) ) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ;;
assert (a =. 3.00270243218897);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladnosc (-10.000000) (0.000000) ) ( wartosc_dokladna (-4.000000) ) ) ( wartosc_od_do (0.000000) (3.000000) ) ) (3.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (3.000000) (4.000000) ) ) ;;
assert (a =. 3.);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-9.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = in_wartosc ( plus ( wartosc_dokladnosc (3.000000) (2.000000) ) ( wartosc_dokladnosc (0.000000) (5.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( razy ( podzielic ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_od_do (8.000000) (9.000000) ) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ;;
assert (a =. -0.5625);;
let a = sr_wartosc ( minus ( minus ( razy ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (1.000000) (6.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -6.);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-1.000000) (6.000000) ) ( podzielic ( wartosc_dokladna (-8.000000) ) ( wartosc_od_do (-1.000000) (2.000000) ) ) ) ;;
assert (a =. 0.75);;
let a = in_wartosc ( razy ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (-8.000000) (9.000000) ) ) (7.000000);;
assert (a = false);;
let a = min_wartosc ( plus ( wartosc_dokladnosc (8.000000) (5.000000) ) ( wartosc_od_do (-8.000000) (1.000000) ) ) ;;
assert (a =. -0.400000000000000355);;
let a = max_wartosc ( plus ( podzielic ( podzielic ( wartosc_dokladnosc (-6.000000) (7.000000) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) ( wartosc_dokladnosc (-6.000000) (1.000000) ) ) ( wartosc_dokladna (-7.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = sr_wartosc ( minus ( wartosc_od_do (0.000000) (4.000000) ) ( wartosc_dokladnosc (-8.000000) (8.000000) ) ) ;;
assert (a =. 10.);;
let a = in_wartosc ( plus ( wartosc_od_do (-5.000000) (4.000000) ) ( wartosc_dokladnosc (-3.000000) (3.000000) ) ) (-5.000000);;
assert (a = true);;
let a = min_wartosc ( plus ( wartosc_dokladna (-1.000000) ) ( plus ( plus ( podzielic ( wartosc_dokladnosc (0.000000) (2.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladnosc (4.000000) (3.000000) ) ) ( wartosc_dokladna (-10.000000) ) ) ) ;;
assert (a =. -7.12);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladna (3.000000) ) ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (2.000000) (5.000000) ) ) ) ( wartosc_od_do (-7.000000) (6.000000) ) ) ;;
assert (a = infinity);;
let a = sr_wartosc ( podzielic ( wartosc_dokladna (7.000000) ) ( podzielic ( wartosc_dokladna (5.000000) ) ( razy ( podzielic ( wartosc_dokladna (7.000000) ) ( wartosc_dokladnosc (2.000000) (3.000000) ) ) ( wartosc_od_do (0.000000) (0.000000) ) ) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-2.000000) (3.000000) ) ( wartosc_dokladna (-9.000000) ) ) ;;
assert (a =. 0.22222222222222221);;
let a = in_wartosc ( minus ( podzielic ( wartosc_dokladna (0.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( plus ( wartosc_od_do (-6.000000) (0.000000) ) ( plus ( wartosc_od_do (-2.000000) (-1.000000) ) ( wartosc_od_do (-6.000000) (0.000000) ) ) ) ) (8.000000);;
assert (a = true);;
let a = sr_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (6.000000) ) ( wartosc_dokladna (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( razy ( podzielic ( wartosc_od_do (-10.000000) (3.000000) ) ( wartosc_dokladna (8.000000) ) ) ( razy ( wartosc_od_do (0.000000) (5.000000) ) ( wartosc_od_do (-1.000000) (3.000000) ) ) ) (1.000000);;
assert (a = true);;
let a = sr_wartosc ( plus ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladnosc (-2.000000) (1.000000) ) ( podzielic ( razy ( wartosc_dokladna (0.000000) ) ( plus ( wartosc_dokladna (5.000000) ) ( wartosc_dokladnosc (4.000000) (9.000000) ) ) ) ( wartosc_od_do (-9.000000) (-2.000000) ) ) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( podzielic ( wartosc_od_do (-7.000000) (-3.000000) ) ( wartosc_dokladna (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( razy ( wartosc_od_do (-1.000000) (9.000000) ) ( wartosc_dokladna (-5.000000) ) ) ( wartosc_dokladnosc (-7.000000) (7.000000) ) ) ;;
assert (a =. 6.91244239631336477);;
let a = in_wartosc ( podzielic ( podzielic ( wartosc_dokladna (-3.000000) ) ( wartosc_dokladnosc (-2.000000) (9.000000) ) ) ( wartosc_dokladnosc (-6.000000) (0.000000) ) ) (-10.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladnosc (-6.000000) (5.000000) ) ( wartosc_dokladna (8.000000) ) ) (8.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_od_do (4.000000) (5.000000) ) ( wartosc_dokladna (1.000000) ) ) ;;
assert (a =. 5.5);;
let a = max_wartosc ( minus ( wartosc_dokladnosc (9.000000) (7.000000) ) ( podzielic ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_dokladnosc (8.000000) (8.000000) ) ) ) ;;
assert (a =. 9.76586956521739147);;
let a = min_wartosc ( podzielic ( podzielic ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (6.000000) ) ) ( minus ( wartosc_dokladna (2.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (7.000000) ) ( minus ( wartosc_dokladnosc (1.000000) (3.000000) ) ( wartosc_dokladnosc (9.000000) (2.000000) ) ) ) ) ) ;;
assert (a =. 0.25);;
let a = max_wartosc ( podzielic ( wartosc_od_do (5.000000) (6.000000) ) ( podzielic ( wartosc_dokladna (-2.000000) ) ( wartosc_od_do (-9.000000) (0.000000) ) ) ) ;;
assert (a =. 27.);;
let a = sr_wartosc ( minus ( wartosc_dokladnosc (1.000000) (0.000000) ) ( wartosc_dokladna (3.000000) ) ) ;;
assert (a =. -2.);;
let a = in_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (8.000000) ) ( wartosc_dokladnosc (6.000000) (9.000000) ) ) (-9.000000);;
assert (a = false);;
let a = in_wartosc ( razy ( wartosc_dokladna (-9.000000) ) ( wartosc_dokladna (4.000000) ) ) (0.000000);;
assert (a = false);;
let a = min_wartosc ( minus ( wartosc_dokladnosc (5.000000) (0.000000) ) ( wartosc_dokladnosc (0.000000) (2.000000) ) ) ;;
assert (a =. 5.);;
let a = max_wartosc ( minus ( razy ( wartosc_od_do (1.000000) (1.000000) ) ( wartosc_dokladnosc (-2.000000) (3.000000) ) ) ( minus ( wartosc_od_do (-7.000000) (2.000000) ) ( razy ( wartosc_dokladnosc (-1.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (-2.000000) ) ) ) ) ;;
assert (a =. 9.06);;
let a = sr_wartosc ( plus ( podzielic ( plus ( podzielic ( wartosc_od_do (-8.000000) (2.000000) ) ( podzielic ( wartosc_od_do (-3.000000) (2.000000) ) ( wartosc_dokladnosc (-4.000000) (1.000000) ) ) ) ( minus ( wartosc_dokladnosc (0.000000) (4.000000) ) ( wartosc_dokladnosc (2.000000) (1.000000) ) ) ) ( razy ( wartosc_dokladna (2.000000) ) ( wartosc_dokladnosc (2.000000) (0.000000) ) ) ) ( wartosc_od_do (-1.000000) (8.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( minus ( wartosc_dokladnosc (1.000000) (9.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) (0.000000);;
assert (a = false);;
let a = sr_wartosc ( podzielic ( razy ( wartosc_od_do (-8.000000) (2.000000) ) ( wartosc_dokladnosc (5.000000) (3.000000) ) ) ( wartosc_dokladnosc (-6.000000) (5.000000) ) ) ;;
assert (a =. 2.71052631578947389);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (9.000000) (5.000000) ) ( plus ( razy ( wartosc_dokladna (9.000000) ) ( wartosc_dokladna (-3.000000) ) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (-3.000000) (3.000000) ) ) ) ) ;;
assert (a =. -284.350499999999954);;
let a = in_wartosc ( razy ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (-5.000000) (-4.000000) ) ) (5.000000);;
assert (a = false);;
let a = max_wartosc ( podzielic ( wartosc_od_do (-9.000000) (1.000000) ) ( wartosc_dokladnosc (5.000000) (8.000000) ) ) ;;
assert (a =. 0.217391304347826109);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (4.000000) (7.000000) ) ( wartosc_od_do (-7.000000) (-2.000000) ) ) ;;
assert (a =. -2.14);;
let a = max_wartosc ( podzielic ( minus ( wartosc_dokladna (7.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( wartosc_dokladna (9.000000) ) ) ;;
assert (a =. 0.88888888888888884);;
let a = min_wartosc ( plus ( plus ( wartosc_dokladnosc (2.000000) (0.000000) ) ( wartosc_dokladna (6.000000) ) ) ( wartosc_od_do (-4.000000) (5.000000) ) ) ;;
assert (a =. 4.);;
let a = max_wartosc ( podzielic ( podzielic ( wartosc_dokladna (5.000000) ) ( wartosc_od_do (-2.000000) (-1.000000) ) ) ( wartosc_dokladna (8.000000) ) ) ;;
assert (a =. -0.3125);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-1.000000) (3.000000) ) ( razy ( wartosc_dokladna (-3.000000) ) ( plus ( podzielic ( plus ( minus ( wartosc_dokladnosc (9.000000) (1.000000) ) ( wartosc_dokladna (-1.000000) ) ) ( plus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-4.000000) (0.000000) ) ) ) ( podzielic ( podzielic ( wartosc_dokladna (-4.000000) ) ( wartosc_dokladnosc (-10.000000) (4.000000) ) ) ( wartosc_dokladna (5.000000) ) ) ) ( wartosc_dokladna (3.000000) ) ) ) ) ;;
assert (a =. 0.00240987801545303236);;
let a = min_wartosc ( razy ( wartosc_dokladnosc (4.000000) (9.000000) ) ( podzielic ( wartosc_dokladna (-9.000000) ) ( plus ( razy ( minus ( wartosc_dokladnosc (-9.000000) (6.000000) ) ( wartosc_dokladna (-6.000000) ) ) ( wartosc_od_do (-9.000000) (5.000000) ) ) ( wartosc_dokladnosc (5.000000) (2.000000) ) ) ) ) ;;
assert (a = neg_infinity);;
let a = in_wartosc ( minus ( wartosc_od_do (-7.000000) (-4.000000) ) ( wartosc_dokladna (0.000000) ) ) (-1.000000);;
assert (a = false);;
let a = sr_wartosc ( plus ( wartosc_dokladnosc (-4.000000) (5.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. -10.);;
let a = min_wartosc ( podzielic ( wartosc_dokladnosc (-8.000000) (8.000000) ) ( wartosc_od_do (-3.000000) (0.000000) ) ) ;;
assert (a =. 2.45333333333333314);;
let a = min_wartosc ( razy ( wartosc_od_do (6.000000) (7.000000) ) ( wartosc_od_do (-2.000000) (0.000000) ) ) ;;
assert (a =. -14.);;
let a = sr_wartosc ( minus ( minus ( wartosc_od_do (-10.000000) (-7.000000) ) ( plus ( wartosc_dokladna (0.000000) ) ( wartosc_od_do (4.000000) (7.000000) ) ) ) ( wartosc_dokladna (6.000000) ) ) ;;
assert (a =. -20.);;
let a = max_wartosc ( minus ( wartosc_dokladna (2.000000) ) ( wartosc_dokladna (-6.000000) ) ) ;;
assert (a =. 8.);;
let a = min_wartosc ( minus ( wartosc_dokladna (3.000000) ) ( wartosc_dokladnosc (7.000000) (9.000000) ) ) ;;
assert (a =. -4.63);;
let a = sr_wartosc ( podzielic ( wartosc_od_do (-8.000000) (8.000000) ) ( wartosc_od_do (-8.000000) (0.000000) ) ) ;;
assert ((classify_float a) == FP_nan);;
let a = in_wartosc ( plus ( wartosc_dokladna (2.000000) ) ( podzielic ( wartosc_dokladnosc (0.000000) (9.000000) ) ( wartosc_dokladnosc (1.000000) (8.000000) ) ) ) (4.000000);;
assert (a = false);;
let a = in_wartosc ( minus ( wartosc_dokladna (0.000000) ) ( wartosc_dokladnosc (9.000000) (5.000000) ) ) (8.000000);;
assert (a = false);;
let a = min_wartosc ( razy ( wartosc_dokladna (6.000000) ) ( wartosc_dokladnosc (3.000000) (8.000000) ) ) ;;
assert (a =. 16.56);;
let a = min_wartosc ( podzielic ( minus ( wartosc_od_do (-3.000000) (0.000000) ) ( wartosc_od_do (-6.000000) (-3.000000) ) ) ( wartosc_dokladnosc (6.000000) (7.000000) ) ) ;;
assert (a =. 0.);;
let a = max_wartosc ( plus ( razy ( podzielic ( wartosc_od_do (6.000000) (7.000000) ) ( plus ( wartosc_od_do (-9.000000) (0.000000) ) ( wartosc_od_do (0.000000) (5.000000) ) ) ) ( wartosc_dokladnosc (0.000000) (0.000000) ) ) ( wartosc_od_do (-8.000000) (5.000000) ) ) ;;
assert (a =. 5.);;
let a = in_wartosc ( minus ( razy ( podzielic ( razy ( wartosc_dokladnosc (1.000000) (3.000000) ) ( plus ( wartosc_dokladnosc (0.000000) (0.000000) ) ( wartosc_od_do (-10.000000) (0.000000) ) ) ) ( wartosc_od_do (-1.000000) (5.000000) ) ) ( podzielic ( wartosc_dokladnosc (9.000000) (2.000000) ) ( razy ( wartosc_dokladna (3.000000) ) ( wartosc_dokladna (4.000000) ) ) ) ) ( wartosc_dokladnosc (0.000000) (9.000000) ) ) (0.000000);;
assert (a = true);;
let a = podzielic (wartosc_dokladna 1.) (plus (podzielic (wartosc_dokladna 1.) (wartosc_od_do ~-.1. 1.)) (wartosc_dokladna 2.));;
assert (in_wartosc a 0.99 = false);;
